(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(let ((#{gen-label 2745}# (if #f #f))
      (#{transformer-environment 2764}# (if #f #f)))
  (letrec*
    ((#{top-level-eval-hook 2703}#
       (lambda (#{x 24076}# #{mod 24077}#)
         (primitive-eval #{x 24076}#)))
     (#{get-global-definition-hook 2706}#
       (lambda (#{symbol 13606}# #{module 13607}#)
         (begin
           (if (if (not #{module 13607}#) (current-module) #f)
             (warn "module system is booted, we should have a module"
                   #{symbol 13606}#))
           (let ((#{v 13608}#
                   (module-variable
                     (if #{module 13607}#
                       (resolve-module (cdr #{module 13607}#))
                       (current-module))
                     #{symbol 13606}#)))
             (if #{v 13608}#
               (if (variable-bound? #{v 13608}#)
                 (let ((#{val 13610}# (variable-ref #{v 13608}#)))
                   (if (macro? #{val 13610}#)
                     (if (macro-type #{val 13610}#)
                       (cons (macro-type #{val 13610}#)
                             (macro-binding #{val 13610}#))
                       #f)
                     #f))
                 #f)
               #f)))))
     (#{maybe-name-value! 2708}#
       (lambda (#{name 13887}# #{val 13888}#)
         (if (if (struct? #{val 13888}#)
               (eq? (struct-vtable #{val 13888}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 13895}# (struct-ref #{val 13888}# 1)))
             (if (not (assq 'name #{meta 13895}#))
               (let ((#{v 13900}#
                       (cons (cons 'name #{name 13887}#) #{meta 13895}#)))
                 (struct-set! #{val 13888}# 1 #{v 13900}#)))))))
     (#{build-application 2710}#
       (lambda (#{source 13612}#
                #{fun-exp 13613}#
                #{arg-exps 13614}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 11)
           #{source 13612}#
           #{fun-exp 13613}#
           #{arg-exps 13614}#)))
     (#{build-conditional 2711}#
       (lambda (#{source 13620}#
                #{test-exp 13621}#
                #{then-exp 13622}#
                #{else-exp 13623}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 10)
           #{source 13620}#
           #{test-exp 13621}#
           #{then-exp 13622}#
           #{else-exp 13623}#)))
     (#{build-dynlet 2712}#
       (lambda (#{source 13630}#
                #{fluids 13631}#
                #{vals 13632}#
                #{body 13633}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 17)
           #{source 13630}#
           #{fluids 13631}#
           #{vals 13632}#
           #{body 13633}#)))
     (#{build-lexical-reference 2713}#
       (lambda (#{type 24078}#
                #{source 24079}#
                #{name 24080}#
                #{var 24081}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{source 24079}#
           #{name 24080}#
           #{var 24081}#)))
     (#{build-lexical-assignment 2714}#
       (lambda (#{source 13640}#
                #{name 13641}#
                #{var 13642}#
                #{exp 13643}#)
         (begin
           (if (if (struct? #{exp 13643}#)
                 (eq? (struct-vtable #{exp 13643}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 13659}# (struct-ref #{exp 13643}# 1)))
               (if (not (assq 'name #{meta 13659}#))
                 (let ((#{v 13666}#
                         (cons (cons 'name #{name 13641}#) #{meta 13659}#)))
                   (struct-set! #{exp 13643}# 1 #{v 13666}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 4)
             #{source 13640}#
             #{name 13641}#
             #{var 13642}#
             #{exp 13643}#))))
     (#{analyze-variable 2715}#
       (lambda (#{mod 24087}#
                #{var 24088}#
                #{modref-cont 24089}#
                #{bare-cont 24090}#)
         (if (not #{mod 24087}#)
           (#{bare-cont 24090}# #{var 24088}#)
           (let ((#{kind 24091}# (car #{mod 24087}#))
                 (#{mod 24092}# (cdr #{mod 24087}#)))
             (if (eqv? #{kind 24091}# 'public)
               (#{modref-cont 24089}#
                 #{mod 24092}#
                 #{var 24088}#
                 #t)
               (if (eqv? #{kind 24091}# 'private)
                 (if (not (equal?
                            #{mod 24092}#
                            (module-name (current-module))))
                   (#{modref-cont 24089}#
                     #{mod 24092}#
                     #{var 24088}#
                     #f)
                   (#{bare-cont 24090}# #{var 24088}#))
                 (if (eqv? #{kind 24091}# 'bare)
                   (#{bare-cont 24090}# #{var 24088}#)
                   (if (eqv? #{kind 24091}# 'hygiene)
                     (if (if (not (equal?
                                    #{mod 24092}#
                                    (module-name (current-module))))
                           (module-variable
                             (resolve-module #{mod 24092}#)
                             #{var 24088}#)
                           #f)
                       (#{modref-cont 24089}#
                         #{mod 24092}#
                         #{var 24088}#
                         #f)
                       (#{bare-cont 24090}# #{var 24088}#))
                     (syntax-violation
                       #f
                       "bad module kind"
                       #{var 24088}#
                       #{mod 24092}#)))))))))
     (#{build-global-reference 2716}#
       (lambda (#{source 24107}# #{var 24108}# #{mod 24109}#)
         (#{analyze-variable 2715}#
           #{mod 24109}#
           #{var 24108}#
           (lambda (#{mod 24112}# #{var 24113}# #{public? 24114}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 5)
               #{source 24107}#
               #{mod 24112}#
               #{var 24113}#
               #{public? 24114}#))
           (lambda (#{var 24122}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 7)
               #{source 24107}#
               #{var 24122}#)))))
     (#{build-global-assignment 2717}#
       (lambda (#{source 13675}#
                #{var 13676}#
                #{exp 13677}#
                #{mod 13678}#)
         (begin
           (if (if (struct? #{exp 13677}#)
                 (eq? (struct-vtable #{exp 13677}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 13694}# (struct-ref #{exp 13677}# 1)))
               (if (not (assq 'name #{meta 13694}#))
                 (let ((#{v 13701}#
                         (cons (cons 'name #{var 13676}#) #{meta 13694}#)))
                   (struct-set! #{exp 13677}# 1 #{v 13701}#)))))
           (#{analyze-variable 2715}#
             #{mod 13678}#
             #{var 13676}#
             (lambda (#{mod 13706}# #{var 13707}# #{public? 13708}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 6)
                 #{source 13675}#
                 #{mod 13706}#
                 #{var 13707}#
                 #{public? 13708}#
                 #{exp 13677}#))
             (lambda (#{var 13716}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 8)
                 #{source 13675}#
                 #{var 13716}#
                 #{exp 13677}#))))))
     (#{build-global-definition 2718}#
       (lambda (#{source 24128}# #{var 24129}# #{exp 24130}#)
         (begin
           (if (if (struct? #{exp 24130}#)
                 (eq? (struct-vtable #{exp 24130}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 24146}# (struct-ref #{exp 24130}# 1)))
               (if (not (assq 'name #{meta 24146}#))
                 (let ((#{v 24153}#
                         (cons (cons 'name #{var 24129}#) #{meta 24146}#)))
                   (struct-set! #{exp 24130}# 1 #{v 24153}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #{source 24128}#
             #{var 24129}#
             #{exp 24130}#))))
     (#{build-simple-lambda 2719}#
       (lambda (#{src 13722}#
                #{req 13723}#
                #{rest 13724}#
                #{vars 13725}#
                #{meta 13726}#
                #{exp 13727}#)
         (let ((#{body 13733}#
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 14)
                   #{src 13722}#
                   #{req 13723}#
                   #f
                   #{rest 13724}#
                   #f
                   '()
                   #{vars 13725}#
                   #{exp 13727}#
                   #f)))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 13)
             #{src 13722}#
             #{meta 13726}#
             #{body 13733}#))))
     (#{build-sequence 2724}#
       (lambda (#{src 24161}# #{exps 24162}#)
         (if (null? (cdr #{exps 24162}#))
           (car #{exps 24162}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 12)
             #{src 24161}#
             #{exps 24162}#))))
     (#{build-let 2725}#
       (lambda (#{src 13745}#
                #{ids 13746}#
                #{vars 13747}#
                #{val-exps 13748}#
                #{body-exp 13749}#)
         (begin
           (for-each
             #{maybe-name-value! 2708}#
             #{ids 13746}#
             #{val-exps 13748}#)
           (if (null? #{vars 13747}#)
             #{body-exp 13749}#
             (make-struct/no-tail
               (vector-ref %expanded-vtables 15)
               #{src 13745}#
               #{ids 13746}#
               #{vars 13747}#
               #{val-exps 13748}#
               #{body-exp 13749}#)))))
     (#{build-named-let 2726}#
       (lambda (#{src 13773}#
                #{ids 13774}#
                #{vars 13775}#
                #{val-exps 13776}#
                #{body-exp 13777}#)
         (let ((#{f 13778}# (car #{vars 13775}#))
               (#{f-name 13779}# (car #{ids 13774}#))
               (#{vars 13780}# (cdr #{vars 13775}#))
               (#{ids 13781}# (cdr #{ids 13774}#)))
           (let ((#{proc 13782}#
                   (let ((#{body 13802}#
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 14)
                             #{src 13773}#
                             #{ids 13781}#
                             #f
                             #f
                             #f
                             '()
                             #{vars 13780}#
                             #{body-exp 13777}#
                             #f)))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 13)
                       #{src 13773}#
                       '()
                       #{body 13802}#))))
             (begin
               (if (if (struct? #{proc 13782}#)
                     (eq? (struct-vtable #{proc 13782}#)
                          (vector-ref %expanded-vtables 13))
                     #f)
                 (let ((#{meta 13826}# (struct-ref #{proc 13782}# 1)))
                   (if (not (assq 'name #{meta 13826}#))
                     (let ((#{v 13833}#
                             (cons (cons 'name #{f-name 13779}#)
                                   #{meta 13826}#)))
                       (struct-set! #{proc 13782}# 1 #{v 13833}#)))))
               (for-each
                 #{maybe-name-value! 2708}#
                 #{ids 13781}#
                 #{val-exps 13776}#)
               (let ((#{names 13857}# (list #{f-name 13779}#))
                     (#{gensyms 13858}# (list #{f 13778}#))
                     (#{vals 13859}# (list #{proc 13782}#))
                     (#{body 13860}#
                       (let ((#{fun-exp 13864}#
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 3)
                                 #{src 13773}#
                                 #{f-name 13779}#
                                 #{f 13778}#)))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #{src 13773}#
                           #{fun-exp 13864}#
                           #{val-exps 13776}#))))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 16)
                   #{src 13773}#
                   #f
                   #{names 13857}#
                   #{gensyms 13858}#
                   #{vals 13859}#
                   #{body 13860}#)))))))
     (#{build-letrec 2727}#
       (lambda (#{src 13880}#
                #{in-order? 13881}#
                #{ids 13882}#
                #{vars 13883}#
                #{val-exps 13884}#
                #{body-exp 13885}#)
         (if (null? #{vars 13883}#)
           #{body-exp 13885}#
           (begin
             (for-each
               #{maybe-name-value! 2708}#
               #{ids 13882}#
               #{val-exps 13884}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 16)
               #{src 13880}#
               #{in-order? 13881}#
               #{ids 13882}#
               #{vars 13883}#
               #{val-exps 13884}#
               #{body-exp 13885}#)))))
     (#{source-annotation 2736}#
       (lambda (#{x 13911}#)
         (if (if (vector? #{x 13911}#)
               (if (= (vector-length #{x 13911}#) 4)
                 (eq? (vector-ref #{x 13911}# 0) 'syntax-object)
                 #f)
               #f)
           (#{source-annotation 2736}#
             (vector-ref #{x 13911}# 1))
           (if (pair? #{x 13911}#)
             (let ((#{props 13926}# (source-properties #{x 13911}#)))
               (if (pair? #{props 13926}#) #{props 13926}# #f))
             #f))))
     (#{extend-env 2737}#
       (lambda (#{labels 13928}# #{bindings 13929}# #{r 13930}#)
         (if (null? #{labels 13928}#)
           #{r 13930}#
           (#{extend-env 2737}#
             (cdr #{labels 13928}#)
             (cdr #{bindings 13929}#)
             (cons (cons (car #{labels 13928}#)
                         (car #{bindings 13929}#))
                   #{r 13930}#)))))
     (#{extend-var-env 2738}#
       (lambda (#{labels 13931}# #{vars 13932}# #{r 13933}#)
         (if (null? #{labels 13931}#)
           #{r 13933}#
           (#{extend-var-env 2738}#
             (cdr #{labels 13931}#)
             (cdr #{vars 13932}#)
             (cons (cons (car #{labels 13931}#)
                         (cons 'lexical (car #{vars 13932}#)))
                   #{r 13933}#)))))
     (#{macros-only-env 2739}#
       (lambda (#{r 13934}#)
         (if (null? #{r 13934}#)
           '()
           (let ((#{a 13935}# (car #{r 13934}#)))
             (if (eq? (car (cdr #{a 13935}#)) 'macro)
               (cons #{a 13935}#
                     (#{macros-only-env 2739}# (cdr #{r 13934}#)))
               (#{macros-only-env 2739}# (cdr #{r 13934}#)))))))
     (#{global-extend 2741}#
       (lambda (#{type 13937}# #{sym 13938}# #{val 13939}#)
         (module-define!
           (current-module)
           #{sym 13938}#
           (make-syntax-transformer
             #{sym 13938}#
             #{type 13937}#
             #{val 13939}#))))
     (#{id? 2743}#
       (lambda (#{x 8002}#)
         (if (symbol? #{x 8002}#)
           #t
           (if (if (vector? #{x 8002}#)
                 (if (= (vector-length #{x 8002}#) 4)
                   (eq? (vector-ref #{x 8002}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 8002}# 1))
             #f))))
     (#{gen-labels 2746}#
       (lambda (#{ls 13952}#)
         (if (null? #{ls 13952}#)
           '()
           (cons (#{gen-label 2745}#)
                 (#{gen-labels 2746}# (cdr #{ls 13952}#))))))
     (#{make-binding-wrap 2757}#
       (lambda (#{ids 13953}# #{labels 13954}# #{w 13955}#)
         (if (null? #{ids 13953}#)
           #{w 13955}#
           (cons (car #{w 13955}#)
                 (cons (let ((#{labelvec 13956}#
                               (list->vector #{labels 13954}#)))
                         (let ((#{n 13957}#
                                 (vector-length #{labelvec 13956}#)))
                           (let ((#{symnamevec 13958}#
                                   (make-vector #{n 13957}#))
                                 (#{marksvec 13959}#
                                   (make-vector #{n 13957}#)))
                             (begin
                               (letrec*
                                 ((#{f 13960}#
                                    (lambda (#{ids 13963}# #{i 13964}#)
                                      (if (not (null? #{ids 13963}#))
                                        (call-with-values
                                          (lambda ()
                                            (let ((#{x 13967}#
                                                    (car #{ids 13963}#)))
                                              (if (if (vector? #{x 13967}#)
                                                    (if (= (vector-length
                                                             #{x 13967}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 13967}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (values
                                                  (vector-ref #{x 13967}# 1)
                                                  (let ((#{m1 13983}#
                                                          (car #{w 13955}#))
                                                        (#{m2 13984}#
                                                          (car (vector-ref
                                                                 #{x 13967}#
                                                                 2))))
                                                    (if (null? #{m2 13984}#)
                                                      #{m1 13983}#
                                                      (append
                                                        #{m1 13983}#
                                                        #{m2 13984}#))))
                                                (values
                                                  #{x 13967}#
                                                  (car #{w 13955}#)))))
                                          (lambda (#{symname 14004}#
                                                   #{marks 14005}#)
                                            (begin
                                              (vector-set!
                                                #{symnamevec 13958}#
                                                #{i 13964}#
                                                #{symname 14004}#)
                                              (vector-set!
                                                #{marksvec 13959}#
                                                #{i 13964}#
                                                #{marks 14005}#)
                                              (#{f 13960}#
                                                (cdr #{ids 13963}#)
                                                (#{1+}# #{i 13964}#)))))))))
                                 (#{f 13960}# #{ids 13953}# 0))
                               (vector
                                 'ribcage
                                 #{symnamevec 13958}#
                                 #{marksvec 13959}#
                                 #{labelvec 13956}#)))))
                       (cdr #{w 13955}#))))))
     (#{join-wraps 2759}#
       (lambda (#{w1 14014}# #{w2 14015}#)
         (let ((#{m1 14016}# (car #{w1 14014}#))
               (#{s1 14017}# (cdr #{w1 14014}#)))
           (if (null? #{m1 14016}#)
             (if (null? #{s1 14017}#)
               #{w2 14015}#
               (cons (car #{w2 14015}#)
                     (let ((#{m2 14024}# (cdr #{w2 14015}#)))
                       (if (null? #{m2 14024}#)
                         #{s1 14017}#
                         (append #{s1 14017}# #{m2 14024}#)))))
             (cons (let ((#{m2 14033}# (car #{w2 14015}#)))
                     (if (null? #{m2 14033}#)
                       #{m1 14016}#
                       (append #{m1 14016}# #{m2 14033}#)))
                   (let ((#{m2 14042}# (cdr #{w2 14015}#)))
                     (if (null? #{m2 14042}#)
                       #{s1 14017}#
                       (append #{s1 14017}# #{m2 14042}#))))))))
     (#{same-marks? 2761}#
       (lambda (#{x 14047}# #{y 14048}#)
         (if (eq? #{x 14047}# #{y 14048}#)
           (eq? #{x 14047}# #{y 14048}#)
           (if (not (null? #{x 14047}#))
             (if (not (null? #{y 14048}#))
               (if (eq? (car #{x 14047}#) (car #{y 14048}#))
                 (#{same-marks? 2761}#
                   (cdr #{x 14047}#)
                   (cdr #{y 14048}#))
                 #f)
               #f)
             #f))))
     (#{id-var-name 2762}#
       (lambda (#{id 14056}# #{w 14057}#)
         (letrec*
           ((#{search 14058}#
              (lambda (#{sym 14119}# #{subst 14120}# #{marks 14121}#)
                (if (null? #{subst 14120}#)
                  (values #f #{marks 14121}#)
                  (let ((#{fst 14122}# (car #{subst 14120}#)))
                    (if (eq? #{fst 14122}# 'shift)
                      (#{search 14058}#
                        #{sym 14119}#
                        (cdr #{subst 14120}#)
                        (cdr #{marks 14121}#))
                      (let ((#{symnames 14124}# (vector-ref #{fst 14122}# 1)))
                        (if (vector? #{symnames 14124}#)
                          (let ((#{n 14136}#
                                  (vector-length #{symnames 14124}#)))
                            (letrec*
                              ((#{f 14137}#
                                 (lambda (#{i 14139}#)
                                   (if (= #{i 14139}# #{n 14136}#)
                                     (#{search 14058}#
                                       #{sym 14119}#
                                       (cdr #{subst 14120}#)
                                       #{marks 14121}#)
                                     (if (if (eq? (vector-ref
                                                    #{symnames 14124}#
                                                    #{i 14139}#)
                                                  #{sym 14119}#)
                                           (#{same-marks? 2761}#
                                             #{marks 14121}#
                                             (vector-ref
                                               (vector-ref #{fst 14122}# 2)
                                               #{i 14139}#))
                                           #f)
                                       (values
                                         (vector-ref
                                           (vector-ref #{fst 14122}# 3)
                                           #{i 14139}#)
                                         #{marks 14121}#)
                                       (#{f 14137}# (#{1+}# #{i 14139}#)))))))
                              (#{f 14137}# 0)))
                          (letrec*
                            ((#{f 14172}#
                               (lambda (#{symnames 14174}# #{i 14175}#)
                                 (if (null? #{symnames 14174}#)
                                   (#{search 14058}#
                                     #{sym 14119}#
                                     (cdr #{subst 14120}#)
                                     #{marks 14121}#)
                                   (if (if (eq? (car #{symnames 14174}#)
                                                #{sym 14119}#)
                                         (#{same-marks? 2761}#
                                           #{marks 14121}#
                                           (list-ref
                                             (vector-ref #{fst 14122}# 2)
                                             #{i 14175}#))
                                         #f)
                                     (values
                                       (list-ref
                                         (vector-ref #{fst 14122}# 3)
                                         #{i 14175}#)
                                       #{marks 14121}#)
                                     (#{f 14172}#
                                       (cdr #{symnames 14174}#)
                                       (#{1+}# #{i 14175}#)))))))
                            (#{f 14172}# #{symnames 14124}# 0))))))))))
           (if (symbol? #{id 14056}#)
             (let ((#{t 14061}#
                     (#{search 14058}#
                       #{id 14056}#
                       (cdr #{w 14057}#)
                       (car #{w 14057}#))))
               (if #{t 14061}# #{t 14061}# #{id 14056}#))
             (if (if (vector? #{id 14056}#)
                   (if (= (vector-length #{id 14056}#) 4)
                     (eq? (vector-ref #{id 14056}# 0) 'syntax-object)
                     #f)
                   #f)
               (let ((#{id 14076}# (vector-ref #{id 14056}# 1))
                     (#{w1 14077}# (vector-ref #{id 14056}# 2)))
                 (let ((#{marks 14078}#
                         (let ((#{m1 14088}# (car #{w 14057}#))
                               (#{m2 14089}# (car #{w1 14077}#)))
                           (if (null? #{m2 14089}#)
                             #{m1 14088}#
                             (append #{m1 14088}# #{m2 14089}#)))))
                   (call-with-values
                     (lambda ()
                       (#{search 14058}#
                         #{id 14076}#
                         (cdr #{w 14057}#)
                         #{marks 14078}#))
                     (lambda (#{new-id 14105}# #{marks 14106}#)
                       (if #{new-id 14105}#
                         #{new-id 14105}#
                         (let ((#{t 14114}#
                                 (#{search 14058}#
                                   #{id 14076}#
                                   (cdr #{w1 14077}#)
                                   #{marks 14106}#)))
                           (if #{t 14114}# #{t 14114}# #{id 14076}#)))))))
               (syntax-violation
                 'id-var-name
                 "invalid id"
                 #{id 14056}#))))))
     (#{valid-bound-ids? 2768}#
       (lambda (#{ids 14197}#)
         (if (letrec*
               ((#{all-ids? 14198}#
                  (lambda (#{ids 14360}#)
                    (if (null? #{ids 14360}#)
                      (null? #{ids 14360}#)
                      (if (let ((#{x 14371}# (car #{ids 14360}#)))
                            (if (symbol? #{x 14371}#)
                              #t
                              (if (if (vector? #{x 14371}#)
                                    (if (= (vector-length #{x 14371}#) 4)
                                      (eq? (vector-ref #{x 14371}# 0)
                                           'syntax-object)
                                      #f)
                                    #f)
                                (symbol? (vector-ref #{x 14371}# 1))
                                #f)))
                        (#{all-ids? 14198}# (cdr #{ids 14360}#))
                        #f)))))
               (#{all-ids? 14198}# #{ids 14197}#))
           (#{distinct-bound-ids? 2769}# #{ids 14197}#)
           #f)))
     (#{distinct-bound-ids? 2769}#
       (lambda (#{ids 14499}#)
         (letrec*
           ((#{distinct? 14500}#
              (lambda (#{ids 14612}#)
                (if (null? #{ids 14612}#)
                  (null? #{ids 14612}#)
                  (if (not (#{bound-id-member? 2770}#
                             (car #{ids 14612}#)
                             (cdr #{ids 14612}#)))
                    (#{distinct? 14500}# (cdr #{ids 14612}#))
                    #f)))))
           (#{distinct? 14500}# #{ids 14499}#))))
     (#{bound-id-member? 2770}#
       (lambda (#{x 14822}# #{list 14823}#)
         (if (not (null? #{list 14823}#))
           (let ((#{t 14824}#
                   (let ((#{j 14905}# (car #{list 14823}#)))
                     (if (if (if (vector? #{x 14822}#)
                               (if (= (vector-length #{x 14822}#) 4)
                                 (eq? (vector-ref #{x 14822}# 0)
                                      'syntax-object)
                                 #f)
                               #f)
                           (if (vector? #{j 14905}#)
                             (if (= (vector-length #{j 14905}#) 4)
                               (eq? (vector-ref #{j 14905}# 0) 'syntax-object)
                               #f)
                             #f)
                           #f)
                       (if (eq? (vector-ref #{x 14822}# 1)
                                (vector-ref #{j 14905}# 1))
                         (#{same-marks? 2761}#
                           (car (vector-ref #{x 14822}# 2))
                           (car (vector-ref #{j 14905}# 2)))
                         #f)
                       (eq? #{x 14822}# #{j 14905}#)))))
             (if #{t 14824}#
               #{t 14824}#
               (#{bound-id-member? 2770}#
                 #{x 14822}#
                 (cdr #{list 14823}#))))
           #f)))
     (#{wrap 2771}#
       (lambda (#{x 14949}# #{w 14950}# #{defmod 14951}#)
         (if (if (null? (car #{w 14950}#))
               (null? (cdr #{w 14950}#))
               #f)
           #{x 14949}#
           (if (if (vector? #{x 14949}#)
                 (if (= (vector-length #{x 14949}#) 4)
                   (eq? (vector-ref #{x 14949}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{expression 14965}# (vector-ref #{x 14949}# 1))
                   (#{wrap 14966}#
                     (#{join-wraps 2759}#
                       #{w 14950}#
                       (vector-ref #{x 14949}# 2)))
                   (#{module 14967}# (vector-ref #{x 14949}# 3)))
               (vector
                 'syntax-object
                 #{expression 14965}#
                 #{wrap 14966}#
                 #{module 14967}#))
             (if (null? #{x 14949}#)
               #{x 14949}#
               (vector
                 'syntax-object
                 #{x 14949}#
                 #{w 14950}#
                 #{defmod 14951}#))))))
     (#{source-wrap 2772}#
       (lambda (#{x 14984}#
                #{w 14985}#
                #{s 14986}#
                #{defmod 14987}#)
         (#{wrap 2771}#
           (begin
             (if (if (pair? #{x 14984}#) #{s 14986}# #f)
               (set-source-properties! #{x 14984}# #{s 14986}#))
             #{x 14984}#)
           #{w 14985}#
           #{defmod 14987}#)))
     (#{expand-sequence 2773}#
       (lambda (#{body 24167}#
                #{r 24168}#
                #{w 24169}#
                #{s 24170}#
                #{mod 24171}#)
         (#{build-sequence 2724}#
           #{s 24170}#
           (letrec*
             ((#{dobody 24251}#
                (lambda (#{body 24601}#
                         #{r 24602}#
                         #{w 24603}#
                         #{mod 24604}#)
                  (if (null? #{body 24601}#)
                    '()
                    (let ((#{first 24605}#
                            (let ((#{e 24609}# (car #{body 24601}#)))
                              (call-with-values
                                (lambda ()
                                  (#{syntax-type 2777}#
                                    #{e 24609}#
                                    #{r 24602}#
                                    #{w 24603}#
                                    (#{source-annotation 2736}# #{e 24609}#)
                                    #f
                                    #{mod 24604}#
                                    #f))
                                (lambda (#{type 24616}#
                                         #{value 24617}#
                                         #{e 24618}#
                                         #{w 24619}#
                                         #{s 24620}#
                                         #{mod 24621}#)
                                  (#{expand-expr 2779}#
                                    #{type 24616}#
                                    #{value 24617}#
                                    #{e 24618}#
                                    #{r 24602}#
                                    #{w 24619}#
                                    #{s 24620}#
                                    #{mod 24621}#))))))
                      (cons #{first 24605}#
                            (#{dobody 24251}#
                              (cdr #{body 24601}#)
                              #{r 24602}#
                              #{w 24603}#
                              #{mod 24604}#)))))))
             (#{dobody 24251}#
               #{body 24167}#
               #{r 24168}#
               #{w 24169}#
               #{mod 24171}#)))))
     (#{expand-top-sequence 2774}#
       (lambda (#{body 15005}#
                #{r 15006}#
                #{w 15007}#
                #{s 15008}#
                #{m 15009}#
                #{esew 15010}#
                #{mod 15011}#)
         (letrec*
           ((#{scan 15012}#
              (lambda (#{body 15143}#
                       #{r 15144}#
                       #{w 15145}#
                       #{s 15146}#
                       #{m 15147}#
                       #{esew 15148}#
                       #{mod 15149}#
                       #{exps 15150}#)
                (if (null? #{body 15143}#)
                  #{exps 15150}#
                  (call-with-values
                    (lambda ()
                      (call-with-values
                        (lambda ()
                          (let ((#{e 15151}# (car #{body 15143}#)))
                            (#{syntax-type 2777}#
                              #{e 15151}#
                              #{r 15144}#
                              #{w 15145}#
                              (let ((#{t 15155}#
                                      (#{source-annotation 2736}#
                                        #{e 15151}#)))
                                (if #{t 15155}# #{t 15155}# #{s 15146}#))
                              #f
                              #{mod 15149}#
                              #f)))
                        (lambda (#{type 15390}#
                                 #{value 15391}#
                                 #{e 15392}#
                                 #{w 15393}#
                                 #{s 15394}#
                                 #{mod 15395}#)
                          (if (eqv? #{type 15390}# 'begin-form)
                            (let ((#{tmp 15400}#
                                    ($sc-dispatch #{e 15392}# '(_))))
                              (if #{tmp 15400}#
                                (@apply
                                  (lambda () #{exps 15150}#)
                                  #{tmp 15400}#)
                                (let ((#{tmp 15404}#
                                        ($sc-dispatch
                                          #{e 15392}#
                                          '(_ any . each-any))))
                                  (if #{tmp 15404}#
                                    (@apply
                                      (lambda (#{e1 15408}# #{e2 15409}#)
                                        (#{scan 15012}#
                                          (cons #{e1 15408}# #{e2 15409}#)
                                          #{r 15144}#
                                          #{w 15393}#
                                          #{s 15394}#
                                          #{m 15147}#
                                          #{esew 15148}#
                                          #{mod 15395}#
                                          #{exps 15150}#))
                                      #{tmp 15404}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 15392}#)))))
                            (if (eqv? #{type 15390}# 'local-syntax-form)
                              (#{expand-local-syntax 2783}#
                                #{value 15391}#
                                #{e 15392}#
                                #{r 15144}#
                                #{w 15393}#
                                #{s 15394}#
                                #{mod 15395}#
                                (lambda (#{body 15424}#
                                         #{r 15425}#
                                         #{w 15426}#
                                         #{s 15427}#
                                         #{mod 15428}#)
                                  (#{scan 15012}#
                                    #{body 15424}#
                                    #{r 15425}#
                                    #{w 15426}#
                                    #{s 15427}#
                                    #{m 15147}#
                                    #{esew 15148}#
                                    #{mod 15428}#
                                    #{exps 15150}#)))
                              (if (eqv? #{type 15390}# 'eval-when-form)
                                (let ((#{tmp 15433}#
                                        ($sc-dispatch
                                          #{e 15392}#
                                          '(_ each-any any . each-any))))
                                  (if #{tmp 15433}#
                                    (@apply
                                      (lambda (#{x 15437}#
                                               #{e1 15438}#
                                               #{e2 15439}#)
                                        (let ((#{when-list 15440}#
                                                (#{parse-when-list 2776}#
                                                  #{e 15392}#
                                                  #{x 15437}#))
                                              (#{body 15441}#
                                                (cons #{e1 15438}#
                                                      #{e2 15439}#)))
                                          (if (eq? #{m 15147}# 'e)
                                            (if (memq 'eval
                                                      #{when-list 15440}#)
                                              (#{scan 15012}#
                                                #{body 15441}#
                                                #{r 15144}#
                                                #{w 15393}#
                                                #{s 15394}#
                                                (if (memq 'expand
                                                          #{when-list 15440}#)
                                                  'c&e
                                                  'e)
                                                '(eval)
                                                #{mod 15395}#
                                                #{exps 15150}#)
                                              (begin
                                                (if (memq 'expand
                                                          #{when-list 15440}#)
                                                  (let ((#{x 15518}#
                                                          (#{expand-top-sequence 2774}#
                                                            #{body 15441}#
                                                            #{r 15144}#
                                                            #{w 15393}#
                                                            #{s 15394}#
                                                            'e
                                                            '(eval)
                                                            #{mod 15395}#)))
                                                    (primitive-eval
                                                      #{x 15518}#)))
                                                (values #{exps 15150}#)))
                                            (if (memq 'load
                                                      #{when-list 15440}#)
                                              (if (let ((#{t 15544}#
                                                          (memq 'compile
                                                                #{when-list 15440}#)))
                                                    (if #{t 15544}#
                                                      #{t 15544}#
                                                      (let ((#{t 15593}#
                                                              (memq 'expand
                                                                    #{when-list 15440}#)))
                                                        (if #{t 15593}#
                                                          #{t 15593}#
                                                          (if (eq? #{m 15147}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list 15440}#)
                                                            #f)))))
                                                (#{scan 15012}#
                                                  #{body 15441}#
                                                  #{r 15144}#
                                                  #{w 15393}#
                                                  #{s 15394}#
                                                  'c&e
                                                  '(compile load)
                                                  #{mod 15395}#
                                                  #{exps 15150}#)
                                                (if (if (eq? #{m 15147}# 'c)
                                                      #t
                                                      (eq? #{m 15147}# 'c&e))
                                                  (#{scan 15012}#
                                                    #{body 15441}#
                                                    #{r 15144}#
                                                    #{w 15393}#
                                                    #{s 15394}#
                                                    'c
                                                    '(load)
                                                    #{mod 15395}#
                                                    #{exps 15150}#)
                                                  (values #{exps 15150}#)))
                                              (if (let ((#{t 15722}#
                                                          (memq 'compile
                                                                #{when-list 15440}#)))
                                                    (if #{t 15722}#
                                                      #{t 15722}#
                                                      (let ((#{t 15771}#
                                                              (memq 'expand
                                                                    #{when-list 15440}#)))
                                                        (if #{t 15771}#
                                                          #{t 15771}#
                                                          (if (eq? #{m 15147}#
                                                                   'c&e)
                                                            (memq 'eval
                                                                  #{when-list 15440}#)
                                                            #f)))))
                                                (begin
                                                  (let ((#{x 15895}#
                                                          (#{expand-top-sequence 2774}#
                                                            #{body 15441}#
                                                            #{r 15144}#
                                                            #{w 15393}#
                                                            #{s 15394}#
                                                            'e
                                                            '(eval)
                                                            #{mod 15395}#)))
                                                    (primitive-eval
                                                      #{x 15895}#))
                                                  (values #{exps 15150}#))
                                                (values #{exps 15150}#))))))
                                      #{tmp 15433}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 15392}#)))
                                (if (if (eqv? #{type 15390}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type 15390}#
                                            'define-syntax-parameter-form))
                                  (let ((#{n 15941}#
                                          (#{id-var-name 2762}#
                                            #{value 15391}#
                                            #{w 15393}#))
                                        (#{r 15942}#
                                          (#{macros-only-env 2739}#
                                            #{r 15144}#)))
                                    (if (eqv? #{m 15147}# 'c)
                                      (if (memq 'compile #{esew 15148}#)
                                        (let ((#{e 15946}#
                                                (#{expand-install-global 2775}#
                                                  #{n 15941}#
                                                  (#{expand 2778}#
                                                    #{e 15392}#
                                                    #{r 15942}#
                                                    #{w 15393}#
                                                    #{mod 15395}#))))
                                          (begin
                                            (#{top-level-eval-hook 2703}#
                                              #{e 15946}#
                                              #{mod 15395}#)
                                            (if (memq 'load #{esew 15148}#)
                                              (values
                                                (cons #{e 15946}#
                                                      #{exps 15150}#))
                                              (values #{exps 15150}#))))
                                        (if (memq 'load #{esew 15148}#)
                                          (values
                                            (cons (#{expand-install-global 2775}#
                                                    #{n 15941}#
                                                    (#{expand 2778}#
                                                      #{e 15392}#
                                                      #{r 15942}#
                                                      #{w 15393}#
                                                      #{mod 15395}#))
                                                  #{exps 15150}#))
                                          (values #{exps 15150}#)))
                                      (if (eqv? #{m 15147}# 'c&e)
                                        (let ((#{e 16393}#
                                                (#{expand-install-global 2775}#
                                                  #{n 15941}#
                                                  (#{expand 2778}#
                                                    #{e 15392}#
                                                    #{r 15942}#
                                                    #{w 15393}#
                                                    #{mod 15395}#))))
                                          (begin
                                            (#{top-level-eval-hook 2703}#
                                              #{e 16393}#
                                              #{mod 15395}#)
                                            (values
                                              (cons #{e 16393}#
                                                    #{exps 15150}#))))
                                        (begin
                                          (if (memq 'eval #{esew 15148}#)
                                            (#{top-level-eval-hook 2703}#
                                              (#{expand-install-global 2775}#
                                                #{n 15941}#
                                                (#{expand 2778}#
                                                  #{e 15392}#
                                                  #{r 15942}#
                                                  #{w 15393}#
                                                  #{mod 15395}#))
                                              #{mod 15395}#))
                                          (values #{exps 15150}#)))))
                                  (if (eqv? #{type 15390}# 'define-form)
                                    (let ((#{n 17028}#
                                            (#{id-var-name 2762}#
                                              #{value 15391}#
                                              #{w 15393}#)))
                                      (let ((#{type 17029}#
                                              (car (let ((#{t 17036}#
                                                           (assq #{n 17028}#
                                                                 #{r 15144}#)))
                                                     (if #{t 17036}#
                                                       (cdr #{t 17036}#)
                                                       (if (symbol?
                                                             #{n 17028}#)
                                                         (let ((#{t 17042}#
                                                                 (#{get-global-definition-hook 2706}#
                                                                   #{n 17028}#
                                                                   #{mod 15395}#)))
                                                           (if #{t 17042}#
                                                             #{t 17042}#
                                                             '(global)))
                                                         '(displaced-lexical)))))))
                                        (if (if (eqv? #{type 17029}# 'global)
                                              #t
                                              (if (eqv? #{type 17029}# 'core)
                                                #t
                                                (if (eqv? #{type 17029}#
                                                          'macro)
                                                  #t
                                                  (eqv? #{type 17029}#
                                                        'module-ref))))
                                          (begin
                                            (if (if (if (eq? #{m 15147}# 'c)
                                                      #t
                                                      (eq? #{m 15147}# 'c&e))
                                                  (if (not (module-local-variable
                                                             (current-module)
                                                             #{n 17028}#))
                                                    (current-module)
                                                    #f)
                                                  #f)
                                              (let ((#{old 17073}#
                                                      (module-variable
                                                        (current-module)
                                                        #{n 17028}#)))
                                                (if (if (variable?
                                                          #{old 17073}#)
                                                      (variable-bound?
                                                        #{old 17073}#)
                                                      #f)
                                                  (module-define!
                                                    (current-module)
                                                    #{n 17028}#
                                                    (variable-ref
                                                      #{old 17073}#))
                                                  (module-add!
                                                    (current-module)
                                                    #{n 17028}#
                                                    (make-undefined-variable)))))
                                            (values
                                              (cons (if (eq? #{m 15147}# 'c&e)
                                                      (let ((#{x 17075}#
                                                              (#{build-global-definition 2718}#
                                                                #{s 15394}#
                                                                #{n 17028}#
                                                                (#{expand 2778}#
                                                                  #{e 15392}#
                                                                  #{r 15144}#
                                                                  #{w 15393}#
                                                                  #{mod 15395}#))))
                                                        (begin
                                                          (#{top-level-eval-hook 2703}#
                                                            #{x 17075}#
                                                            #{mod 15395}#)
                                                          #{x 17075}#))
                                                      (lambda ()
                                                        (#{build-global-definition 2718}#
                                                          #{s 15394}#
                                                          #{n 17028}#
                                                          (#{expand 2778}#
                                                            #{e 15392}#
                                                            #{r 15144}#
                                                            #{w 15393}#
                                                            #{mod 15395}#))))
                                                    #{exps 15150}#)))
                                          (if (eqv? #{type 17029}#
                                                    'displaced-lexical)
                                            (syntax-violation
                                              #f
                                              "identifier out of context"
                                              #{e 15392}#
                                              (#{wrap 2771}#
                                                #{value 15391}#
                                                #{w 15393}#
                                                #{mod 15395}#))
                                            (syntax-violation
                                              #f
                                              "cannot define keyword at top level"
                                              #{e 15392}#
                                              (#{wrap 2771}#
                                                #{value 15391}#
                                                #{w 15393}#
                                                #{mod 15395}#))))))
                                    (values
                                      (cons (if (eq? #{m 15147}# 'c&e)
                                              (let ((#{x 17521}#
                                                      (#{expand-expr 2779}#
                                                        #{type 15390}#
                                                        #{value 15391}#
                                                        #{e 15392}#
                                                        #{r 15144}#
                                                        #{w 15393}#
                                                        #{s 15394}#
                                                        #{mod 15395}#)))
                                                (begin
                                                  (primitive-eval #{x 17521}#)
                                                  #{x 17521}#))
                                              (lambda ()
                                                (#{expand-expr 2779}#
                                                  #{type 15390}#
                                                  #{value 15391}#
                                                  #{e 15392}#
                                                  #{r 15144}#
                                                  #{w 15393}#
                                                  #{s 15394}#
                                                  #{mod 15395}#)))
                                            #{exps 15150}#))))))))))
                    (lambda (#{exps 17530}#)
                      (#{scan 15012}#
                        (cdr #{body 15143}#)
                        #{r 15144}#
                        #{w 15145}#
                        #{s 15146}#
                        #{m 15147}#
                        #{esew 15148}#
                        #{mod 15149}#
                        #{exps 17530}#)))))))
           (call-with-values
             (lambda ()
               (#{scan 15012}#
                 #{body 15005}#
                 #{r 15006}#
                 #{w 15007}#
                 #{s 15008}#
                 #{m 15009}#
                 #{esew 15010}#
                 #{mod 15011}#
                 '()))
             (lambda (#{exps 15015}#)
               (if (null? #{exps 15015}#)
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 0)
                   #{s 15008}#)
                 (#{build-sequence 2724}#
                   #{s 15008}#
                   (letrec*
                     ((#{lp 15055}#
                        (lambda (#{in 15139}# #{out 15140}#)
                          (if (null? #{in 15139}#)
                            #{out 15140}#
                            (let ((#{e 15141}# (car #{in 15139}#)))
                              (#{lp 15055}#
                                (cdr #{in 15139}#)
                                (cons (if (procedure? #{e 15141}#)
                                        (#{e 15141}#)
                                        #{e 15141}#)
                                      #{out 15140}#)))))))
                     (#{lp 15055}# #{exps 15015}# '())))))))))
     (#{expand-install-global 2775}#
       (lambda (#{name 17531}# #{e 17532}#)
         (let ((#{exp 17538}#
                 (let ((#{fun-exp 17548}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'make-syntax-transformer)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'make-syntax-transformer
                             #f)))
                       (#{arg-exps 17549}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #{name 17531}#)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 'macro)
                               #{e 17532}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp 17548}#
                     #{arg-exps 17549}#))))
           (begin
             (if (if (struct? #{exp 17538}#)
                   (eq? (struct-vtable #{exp 17538}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 17590}# (struct-ref #{exp 17538}# 1)))
                 (if (not (assq 'name #{meta 17590}#))
                   (let ((#{v 17597}#
                           (cons (cons 'name #{name 17531}#) #{meta 17590}#)))
                     (struct-set! #{exp 17538}# 1 #{v 17597}#)))))
             (make-struct/no-tail
               (vector-ref %expanded-vtables 9)
               #f
               #{name 17531}#
               #{exp 17538}#)))))
     (#{parse-when-list 2776}#
       (lambda (#{e 17608}# #{when-list 17609}#)
         (let ((#{result 17610}#
                 (#{strip 2791}# #{when-list 17609}# '(()))))
           (letrec*
             ((#{lp 17611}#
                (lambda (#{l 17665}#)
                  (if (null? #{l 17665}#)
                    #{result 17610}#
                    (if (let ((#{t 17667}# (car #{l 17665}#)))
                          (if (eq? #{t 17667}# 'compile)
                            #t
                            (if (eq? #{t 17667}# 'load)
                              #t
                              (if (eq? #{t 17667}# 'eval)
                                #t
                                (eq? #{t 17667}# 'expand)))))
                      (#{lp 17611}# (cdr #{l 17665}#))
                      (syntax-violation
                        'eval-when
                        "invalid situation"
                        #{e 17608}#
                        (car #{l 17665}#)))))))
             (#{lp 17611}# #{result 17610}#)))))
     (#{syntax-type 2777}#
       (lambda (#{e 17669}#
                #{r 17670}#
                #{w 17671}#
                #{s 17672}#
                #{rib 17673}#
                #{mod 17674}#
                #{for-car? 17675}#)
         (if (symbol? #{e 17669}#)
           (let ((#{n 17676}#
                   (#{id-var-name 2762}# #{e 17669}# #{w 17671}#)))
             (let ((#{b 17677}#
                     (let ((#{t 17685}# (assq #{n 17676}# #{r 17670}#)))
                       (if #{t 17685}#
                         (cdr #{t 17685}#)
                         (if (symbol? #{n 17676}#)
                           (let ((#{t 17691}#
                                   (#{get-global-definition-hook 2706}#
                                     #{n 17676}#
                                     #{mod 17674}#)))
                             (if #{t 17691}# #{t 17691}# '(global)))
                           '(displaced-lexical))))))
               (let ((#{type 17678}# (car #{b 17677}#)))
                 (if (eqv? #{type 17678}# 'lexical)
                   (values
                     #{type 17678}#
                     (cdr #{b 17677}#)
                     #{e 17669}#
                     #{w 17671}#
                     #{s 17672}#
                     #{mod 17674}#)
                   (if (eqv? #{type 17678}# 'global)
                     (values
                       #{type 17678}#
                       #{n 17676}#
                       #{e 17669}#
                       #{w 17671}#
                       #{s 17672}#
                       #{mod 17674}#)
                     (if (eqv? #{type 17678}# 'macro)
                       (if #{for-car? 17675}#
                         (values
                           #{type 17678}#
                           (cdr #{b 17677}#)
                           #{e 17669}#
                           #{w 17671}#
                           #{s 17672}#
                           #{mod 17674}#)
                         (#{syntax-type 2777}#
                           (#{expand-macro 2781}#
                             (cdr #{b 17677}#)
                             #{e 17669}#
                             #{r 17670}#
                             #{w 17671}#
                             #{s 17672}#
                             #{rib 17673}#
                             #{mod 17674}#)
                           #{r 17670}#
                           '(())
                           #{s 17672}#
                           #{rib 17673}#
                           #{mod 17674}#
                           #f))
                       (values
                         #{type 17678}#
                         (cdr #{b 17677}#)
                         #{e 17669}#
                         #{w 17671}#
                         #{s 17672}#
                         #{mod 17674}#)))))))
           (if (pair? #{e 17669}#)
             (let ((#{first 17711}# (car #{e 17669}#)))
               (call-with-values
                 (lambda ()
                   (#{syntax-type 2777}#
                     #{first 17711}#
                     #{r 17670}#
                     #{w 17671}#
                     #{s 17672}#
                     #{rib 17673}#
                     #{mod 17674}#
                     #t))
                 (lambda (#{ftype 17713}#
                          #{fval 17714}#
                          #{fe 17715}#
                          #{fw 17716}#
                          #{fs 17717}#
                          #{fmod 17718}#)
                   (if (eqv? #{ftype 17713}# 'lexical)
                     (values
                       'lexical-call
                       #{fval 17714}#
                       #{e 17669}#
                       #{w 17671}#
                       #{s 17672}#
                       #{mod 17674}#)
                     (if (eqv? #{ftype 17713}# 'global)
                       (values
                         'global-call
                         (vector
                           'syntax-object
                           #{fval 17714}#
                           #{w 17671}#
                           #{fmod 17718}#)
                         #{e 17669}#
                         #{w 17671}#
                         #{s 17672}#
                         #{mod 17674}#)
                       (if (eqv? #{ftype 17713}# 'macro)
                         (#{syntax-type 2777}#
                           (#{expand-macro 2781}#
                             #{fval 17714}#
                             #{e 17669}#
                             #{r 17670}#
                             #{w 17671}#
                             #{s 17672}#
                             #{rib 17673}#
                             #{mod 17674}#)
                           #{r 17670}#
                           '(())
                           #{s 17672}#
                           #{rib 17673}#
                           #{mod 17674}#
                           #{for-car? 17675}#)
                         (if (eqv? #{ftype 17713}# 'module-ref)
                           (call-with-values
                             (lambda ()
                               (#{fval 17714}#
                                 #{e 17669}#
                                 #{r 17670}#
                                 #{w 17671}#))
                             (lambda (#{e 17739}#
                                      #{r 17740}#
                                      #{w 17741}#
                                      #{s 17742}#
                                      #{mod 17743}#)
                               (#{syntax-type 2777}#
                                 #{e 17739}#
                                 #{r 17740}#
                                 #{w 17741}#
                                 #{s 17742}#
                                 #{rib 17673}#
                                 #{mod 17743}#
                                 #{for-car? 17675}#)))
                           (if (eqv? #{ftype 17713}# 'core)
                             (values
                               'core-form
                               #{fval 17714}#
                               #{e 17669}#
                               #{w 17671}#
                               #{s 17672}#
                               #{mod 17674}#)
                             (if (eqv? #{ftype 17713}# 'local-syntax)
                               (values
                                 'local-syntax-form
                                 #{fval 17714}#
                                 #{e 17669}#
                                 #{w 17671}#
                                 #{s 17672}#
                                 #{mod 17674}#)
                               (if (eqv? #{ftype 17713}# 'begin)
                                 (values
                                   'begin-form
                                   #f
                                   #{e 17669}#
                                   #{w 17671}#
                                   #{s 17672}#
                                   #{mod 17674}#)
                                 (if (eqv? #{ftype 17713}# 'eval-when)
                                   (values
                                     'eval-when-form
                                     #f
                                     #{e 17669}#
                                     #{w 17671}#
                                     #{s 17672}#
                                     #{mod 17674}#)
                                   (if (eqv? #{ftype 17713}# 'define)
                                     (let ((#{tmp 17760}#
                                             ($sc-dispatch
                                               #{e 17669}#
                                               '(_ any any))))
                                       (if (if #{tmp 17760}#
                                             (@apply
                                               (lambda (#{name 17764}#
                                                        #{val 17765}#)
                                                 (if (symbol? #{name 17764}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 17764}#)
                                                         (if (= (vector-length
                                                                  #{name 17764}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 17764}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 17764}#
                                                         1))
                                                     #f)))
                                               #{tmp 17760}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 17792}#
                                                    #{val 17793}#)
                                             (values
                                               'define-form
                                               #{name 17792}#
                                               #{val 17793}#
                                               #{w 17671}#
                                               #{s 17672}#
                                               #{mod 17674}#))
                                           #{tmp 17760}#)
                                         (let ((#{tmp 17794}#
                                                 ($sc-dispatch
                                                   #{e 17669}#
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if #{tmp 17794}#
                                                 (@apply
                                                   (lambda (#{name 17798}#
                                                            #{args 17799}#
                                                            #{e1 17800}#
                                                            #{e2 17801}#)
                                                     (if (if (symbol?
                                                               #{name 17798}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name 17798}#)
                                                                 (if (= (vector-length
                                                                          #{name 17798}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name 17798}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name 17798}#
                                                                 1))
                                                             #f))
                                                       (#{valid-bound-ids? 2768}#
                                                         (letrec*
                                                           ((#{lvl 17950}#
                                                              (lambda (#{vars 17952}#
                                                                       #{ls 17953}#
                                                                       #{w 17954}#)
                                                                (if (pair? #{vars 17952}#)
                                                                  (#{lvl 17950}#
                                                                    (cdr #{vars 17952}#)
                                                                    (cons (#{wrap 2771}#
                                                                            (car #{vars 17952}#)
                                                                            #{w 17954}#
                                                                            #f)
                                                                          #{ls 17953}#)
                                                                    #{w 17954}#)
                                                                  (if (if (symbol?
                                                                            #{vars 17952}#)
                                                                        #t
                                                                        (if (if (vector?
                                                                                  #{vars 17952}#)
                                                                              (if (= (vector-length
                                                                                       #{vars 17952}#)
                                                                                     4)
                                                                                (eq? (vector-ref
                                                                                       #{vars 17952}#
                                                                                       0)
                                                                                     'syntax-object)
                                                                                #f)
                                                                              #f)
                                                                          (symbol?
                                                                            (vector-ref
                                                                              #{vars 17952}#
                                                                              1))
                                                                          #f))
                                                                    (cons (#{wrap 2771}#
                                                                            #{vars 17952}#
                                                                            #{w 17954}#
                                                                            #f)
                                                                          #{ls 17953}#)
                                                                    (if (null? #{vars 17952}#)
                                                                      #{ls 17953}#
                                                                      (if (if (vector?
                                                                                #{vars 17952}#)
                                                                            (if (= (vector-length
                                                                                     #{vars 17952}#)
                                                                                   4)
                                                                              (eq? (vector-ref
                                                                                     #{vars 17952}#
                                                                                     0)
                                                                                   'syntax-object)
                                                                              #f)
                                                                            #f)
                                                                        (#{lvl 17950}#
                                                                          (vector-ref
                                                                            #{vars 17952}#
                                                                            1)
                                                                          #{ls 17953}#
                                                                          (#{join-wraps 2759}#
                                                                            #{w 17954}#
                                                                            (vector-ref
                                                                              #{vars 17952}#
                                                                              2)))
                                                                        (cons #{vars 17952}#
                                                                              #{ls 17953}#))))))))
                                                           (#{lvl 17950}#
                                                             #{args 17799}#
                                                             '()
                                                             '(()))))
                                                       #f))
                                                   #{tmp 17794}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name 17998}#
                                                        #{args 17999}#
                                                        #{e1 18000}#
                                                        #{e2 18001}#)
                                                 (values
                                                   'define-form
                                                   (#{wrap 2771}#
                                                     #{name 17998}#
                                                     #{w 17671}#
                                                     #{mod 17674}#)
                                                   (let ((#{e 18007}#
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("kg"
                                                                         "kh"
                                                                         "ki"
                                                                         "kj"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("jx"
                                                                         "jy"
                                                                         "jz"
                                                                         "k0"
                                                                         "k1"
                                                                         "k2"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("jw"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("jm"
                                                                         "jn"
                                                                         "jo"
                                                                         "jp"
                                                                         "jq"
                                                                         "jr"
                                                                         "js"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("5k"
                                                                        "5j"
                                                                        "5i"
                                                                        "5h"
                                                                        "5g"
                                                                        "5f"
                                                                        "5e"
                                                                        "5d"
                                                                        "5c"
                                                                        "5b"
                                                                        "5a"
                                                                        "59"
                                                                        "58"
                                                                        "57"
                                                                        "56"
                                                                        "55"
                                                                        "54"
                                                                        "53"
                                                                        "52"
                                                                        "51"
                                                                        "50"
                                                                        "4z"
                                                                        "4y"
                                                                        "4x"
                                                                        "4w"
                                                                        "4v"
                                                                        "4u"
                                                                        "4t"
                                                                        "4s"
                                                                        "4r"
                                                                        "4q"
                                                                        "4p"
                                                                        "4o"
                                                                        "4n"
                                                                        "4m"
                                                                        "4l"
                                                                        "4k"
                                                                        "4j"
                                                                        "4i"
                                                                        "4h"
                                                                        "4g"
                                                                        "4f"
                                                                        "4e"
                                                                        "4d"
                                                                        "4c"
                                                                        "4b"
                                                                        "4a"
                                                                        "49"
                                                                        "48"
                                                                        "47"
                                                                        "46"
                                                                        "45"
                                                                        "44"
                                                                        "43"
                                                                        "42"
                                                                        "41"
                                                                        "40"
                                                                        "3z"
                                                                        "3y"
                                                                        "3x"
                                                                        "3w"
                                                                        "3v"
                                                                        "3u"
                                                                        "3t"
                                                                        "3s"
                                                                        "3r"
                                                                        "3q"
                                                                        "3p"
                                                                        "3o"
                                                                        "3n"
                                                                        "3m"
                                                                        "3l"
                                                                        "3k"
                                                                        "3j"
                                                                        "3i"
                                                                        "3h"
                                                                        "3g"
                                                                        "3f"
                                                                        "3e"
                                                                        "3d"
                                                                        "3c"
                                                                        "3b"
                                                                        "3a"
                                                                        "39"
                                                                        "38"
                                                                        "37"
                                                                        "36"
                                                                        "35"
                                                                        "34"
                                                                        "33"
                                                                        "32"
                                                                        "31"
                                                                        "30"
                                                                        "2z"
                                                                        "2y"
                                                                        "2x"
                                                                        "2w"
                                                                        "2v"
                                                                        "2u"
                                                                        "2t"
                                                                        "2s"
                                                                        "2r"
                                                                        "2q"
                                                                        "2p"
                                                                        "2o"
                                                                        "2n"
                                                                        "2m"
                                                                        "2l"
                                                                        "2k"
                                                                        "2j"
                                                                        "2i"
                                                                        "2h"
                                                                        "2g"
                                                                        "2f"
                                                                        "2e"
                                                                        "2d"
                                                                        "2c"
                                                                        "2b"
                                                                        "2a"
                                                                        "29"
                                                                        "28"
                                                                        "27"
                                                                        "26"
                                                                        "25"
                                                                        "24"
                                                                        "23"
                                                                        "22"
                                                                        "21"
                                                                        "20"
                                                                        "1z"
                                                                        "1y"
                                                                        "1x"
                                                                        "1w"
                                                                        "1v"
                                                                        "1u"
                                                                        "1t"
                                                                        "1s"
                                                                        "1r"
                                                                        "1q"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("8"
                                                                        "7"
                                                                        "6")))
                                                                    (hygiene
                                                                      guile))
                                                                 (#{wrap 2771}#
                                                                   (cons #{args 17999}#
                                                                         (cons #{e1 18000}#
                                                                               #{e2 18001}#))
                                                                   #{w 17671}#
                                                                   #{mod 17674}#))))
                                                     (begin
                                                       (if (if (pair? #{e 18007}#)
                                                             #{s 17672}#
                                                             #f)
                                                         (set-source-properties!
                                                           #{e 18007}#
                                                           #{s 17672}#))
                                                       #{e 18007}#))
                                                   '(())
                                                   #{s 17672}#
                                                   #{mod 17674}#))
                                               #{tmp 17794}#)
                                             (let ((#{tmp 18014}#
                                                     ($sc-dispatch
                                                       #{e 17669}#
                                                       '(_ any))))
                                               (if (if #{tmp 18014}#
                                                     (@apply
                                                       (lambda (#{name 18018}#)
                                                         (if (symbol?
                                                               #{name 18018}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name 18018}#)
                                                                 (if (= (vector-length
                                                                          #{name 18018}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name 18018}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name 18018}#
                                                                 1))
                                                             #f)))
                                                       #{tmp 18014}#)
                                                     #f)
                                                 (@apply
                                                   (lambda (#{name 18045}#)
                                                     (values
                                                       'define-form
                                                       (#{wrap 2771}#
                                                         #{name 18045}#
                                                         #{w 17671}#
                                                         #{mod 17674}#)
                                                       '(#(syntax-object
                                                           if
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("kl"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("jx"
                                                                "jy"
                                                                "jz"
                                                                "k0"
                                                                "k1"
                                                                "k2"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("jw"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("jm"
                                                                "jn"
                                                                "jo"
                                                                "jp"
                                                                "jq"
                                                                "jr"
                                                                "js"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("5k"
                                                               "5j"
                                                               "5i"
                                                               "5h"
                                                               "5g"
                                                               "5f"
                                                               "5e"
                                                               "5d"
                                                               "5c"
                                                               "5b"
                                                               "5a"
                                                               "59"
                                                               "58"
                                                               "57"
                                                               "56"
                                                               "55"
                                                               "54"
                                                               "53"
                                                               "52"
                                                               "51"
                                                               "50"
                                                               "4z"
                                                               "4y"
                                                               "4x"
                                                               "4w"
                                                               "4v"
                                                               "4u"
                                                               "4t"
                                                               "4s"
                                                               "4r"
                                                               "4q"
                                                               "4p"
                                                               "4o"
                                                               "4n"
                                                               "4m"
                                                               "4l"
                                                               "4k"
                                                               "4j"
                                                               "4i"
                                                               "4h"
                                                               "4g"
                                                               "4f"
                                                               "4e"
                                                               "4d"
                                                               "4c"
                                                               "4b"
                                                               "4a"
                                                               "49"
                                                               "48"
                                                               "47"
                                                               "46"
                                                               "45"
                                                               "44"
                                                               "43"
                                                               "42"
                                                               "41"
                                                               "40"
                                                               "3z"
                                                               "3y"
                                                               "3x"
                                                               "3w"
                                                               "3v"
                                                               "3u"
                                                               "3t"
                                                               "3s"
                                                               "3r"
                                                               "3q"
                                                               "3p"
                                                               "3o"
                                                               "3n"
                                                               "3m"
                                                               "3l"
                                                               "3k"
                                                               "3j"
                                                               "3i"
                                                               "3h"
                                                               "3g"
                                                               "3f"
                                                               "3e"
                                                               "3d"
                                                               "3c"
                                                               "3b"
                                                               "3a"
                                                               "39"
                                                               "38"
                                                               "37"
                                                               "36"
                                                               "35"
                                                               "34"
                                                               "33"
                                                               "32"
                                                               "31"
                                                               "30"
                                                               "2z"
                                                               "2y"
                                                               "2x"
                                                               "2w"
                                                               "2v"
                                                               "2u"
                                                               "2t"
                                                               "2s"
                                                               "2r"
                                                               "2q"
                                                               "2p"
                                                               "2o"
                                                               "2n"
                                                               "2m"
                                                               "2l"
                                                               "2k"
                                                               "2j"
                                                               "2i"
                                                               "2h"
                                                               "2g"
                                                               "2f"
                                                               "2e"
                                                               "2d"
                                                               "2c"
                                                               "2b"
                                                               "2a"
                                                               "29"
                                                               "28"
                                                               "27"
                                                               "26"
                                                               "25"
                                                               "24"
                                                               "23"
                                                               "22"
                                                               "21"
                                                               "20"
                                                               "1z"
                                                               "1y"
                                                               "1x"
                                                               "1w"
                                                               "1v"
                                                               "1u"
                                                               "1t"
                                                               "1s"
                                                               "1r"
                                                               "1q"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("8" "7" "6")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("kl"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("jx"
                                                                "jy"
                                                                "jz"
                                                                "k0"
                                                                "k1"
                                                                "k2"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("jw"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("jm"
                                                                "jn"
                                                                "jo"
                                                                "jp"
                                                                "jq"
                                                                "jr"
                                                                "js"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("5k"
                                                               "5j"
                                                               "5i"
                                                               "5h"
                                                               "5g"
                                                               "5f"
                                                               "5e"
                                                               "5d"
                                                               "5c"
                                                               "5b"
                                                               "5a"
                                                               "59"
                                                               "58"
                                                               "57"
                                                               "56"
                                                               "55"
                                                               "54"
                                                               "53"
                                                               "52"
                                                               "51"
                                                               "50"
                                                               "4z"
                                                               "4y"
                                                               "4x"
                                                               "4w"
                                                               "4v"
                                                               "4u"
                                                               "4t"
                                                               "4s"
                                                               "4r"
                                                               "4q"
                                                               "4p"
                                                               "4o"
                                                               "4n"
                                                               "4m"
                                                               "4l"
                                                               "4k"
                                                               "4j"
                                                               "4i"
                                                               "4h"
                                                               "4g"
                                                               "4f"
                                                               "4e"
                                                               "4d"
                                                               "4c"
                                                               "4b"
                                                               "4a"
                                                               "49"
                                                               "48"
                                                               "47"
                                                               "46"
                                                               "45"
                                                               "44"
                                                               "43"
                                                               "42"
                                                               "41"
                                                               "40"
                                                               "3z"
                                                               "3y"
                                                               "3x"
                                                               "3w"
                                                               "3v"
                                                               "3u"
                                                               "3t"
                                                               "3s"
                                                               "3r"
                                                               "3q"
                                                               "3p"
                                                               "3o"
                                                               "3n"
                                                               "3m"
                                                               "3l"
                                                               "3k"
                                                               "3j"
                                                               "3i"
                                                               "3h"
                                                               "3g"
                                                               "3f"
                                                               "3e"
                                                               "3d"
                                                               "3c"
                                                               "3b"
                                                               "3a"
                                                               "39"
                                                               "38"
                                                               "37"
                                                               "36"
                                                               "35"
                                                               "34"
                                                               "33"
                                                               "32"
                                                               "31"
                                                               "30"
                                                               "2z"
                                                               "2y"
                                                               "2x"
                                                               "2w"
                                                               "2v"
                                                               "2u"
                                                               "2t"
                                                               "2s"
                                                               "2r"
                                                               "2q"
                                                               "2p"
                                                               "2o"
                                                               "2n"
                                                               "2m"
                                                               "2l"
                                                               "2k"
                                                               "2j"
                                                               "2i"
                                                               "2h"
                                                               "2g"
                                                               "2f"
                                                               "2e"
                                                               "2d"
                                                               "2c"
                                                               "2b"
                                                               "2a"
                                                               "29"
                                                               "28"
                                                               "27"
                                                               "26"
                                                               "25"
                                                               "24"
                                                               "23"
                                                               "22"
                                                               "21"
                                                               "20"
                                                               "1z"
                                                               "1y"
                                                               "1x"
                                                               "1w"
                                                               "1v"
                                                               "1u"
                                                               "1t"
                                                               "1s"
                                                               "1r"
                                                               "1q"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("8" "7" "6")))
                                                           (hygiene guile))
                                                         #(syntax-object
                                                           #f
                                                           ((top)
                                                            #(ribcage
                                                              #(name)
                                                              #((top))
                                                              #("kl"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(ftype
                                                                fval
                                                                fe
                                                                fw
                                                                fs
                                                                fmod)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("jx"
                                                                "jy"
                                                                "jz"
                                                                "k0"
                                                                "k1"
                                                                "k2"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(first)
                                                              #((top))
                                                              #("jw"))
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e
                                                                r
                                                                w
                                                                s
                                                                rib
                                                                mod
                                                                for-car?)
                                                              #((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                              #("jm"
                                                                "jn"
                                                                "jo"
                                                                "jp"
                                                                "jq"
                                                                "jr"
                                                                "js"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                expand-lambda-case
                                                                lambda*-formals
                                                                expand-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                expand-void
                                                                eval-local-transformer
                                                                expand-local-syntax
                                                                expand-body
                                                                expand-macro
                                                                expand-application
                                                                expand-expr
                                                                expand
                                                                syntax-type
                                                                parse-when-list
                                                                expand-install-global
                                                                expand-top-sequence
                                                                expand-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                with-transformer-environment
                                                                transformer-environment
                                                                resolve-identifier
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("5k"
                                                               "5j"
                                                               "5i"
                                                               "5h"
                                                               "5g"
                                                               "5f"
                                                               "5e"
                                                               "5d"
                                                               "5c"
                                                               "5b"
                                                               "5a"
                                                               "59"
                                                               "58"
                                                               "57"
                                                               "56"
                                                               "55"
                                                               "54"
                                                               "53"
                                                               "52"
                                                               "51"
                                                               "50"
                                                               "4z"
                                                               "4y"
                                                               "4x"
                                                               "4w"
                                                               "4v"
                                                               "4u"
                                                               "4t"
                                                               "4s"
                                                               "4r"
                                                               "4q"
                                                               "4p"
                                                               "4o"
                                                               "4n"
                                                               "4m"
                                                               "4l"
                                                               "4k"
                                                               "4j"
                                                               "4i"
                                                               "4h"
                                                               "4g"
                                                               "4f"
                                                               "4e"
                                                               "4d"
                                                               "4c"
                                                               "4b"
                                                               "4a"
                                                               "49"
                                                               "48"
                                                               "47"
                                                               "46"
                                                               "45"
                                                               "44"
                                                               "43"
                                                               "42"
                                                               "41"
                                                               "40"
                                                               "3z"
                                                               "3y"
                                                               "3x"
                                                               "3w"
                                                               "3v"
                                                               "3u"
                                                               "3t"
                                                               "3s"
                                                               "3r"
                                                               "3q"
                                                               "3p"
                                                               "3o"
                                                               "3n"
                                                               "3m"
                                                               "3l"
                                                               "3k"
                                                               "3j"
                                                               "3i"
                                                               "3h"
                                                               "3g"
                                                               "3f"
                                                               "3e"
                                                               "3d"
                                                               "3c"
                                                               "3b"
                                                               "3a"
                                                               "39"
                                                               "38"
                                                               "37"
                                                               "36"
                                                               "35"
                                                               "34"
                                                               "33"
                                                               "32"
                                                               "31"
                                                               "30"
                                                               "2z"
                                                               "2y"
                                                               "2x"
                                                               "2w"
                                                               "2v"
                                                               "2u"
                                                               "2t"
                                                               "2s"
                                                               "2r"
                                                               "2q"
                                                               "2p"
                                                               "2o"
                                                               "2n"
                                                               "2m"
                                                               "2l"
                                                               "2k"
                                                               "2j"
                                                               "2i"
                                                               "2h"
                                                               "2g"
                                                               "2f"
                                                               "2e"
                                                               "2d"
                                                               "2c"
                                                               "2b"
                                                               "2a"
                                                               "29"
                                                               "28"
                                                               "27"
                                                               "26"
                                                               "25"
                                                               "24"
                                                               "23"
                                                               "22"
                                                               "21"
                                                               "20"
                                                               "1z"
                                                               "1y"
                                                               "1x"
                                                               "1w"
                                                               "1v"
                                                               "1u"
                                                               "1t"
                                                               "1s"
                                                               "1r"
                                                               "1q"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("8" "7" "6")))
                                                           (hygiene guile)))
                                                       '(())
                                                       #{s 17672}#
                                                       #{mod 17674}#))
                                                   #{tmp 18014}#)
                                                 (syntax-violation
                                                   #f
                                                   "source expression failed to match any pattern"
                                                   #{e 17669}#)))))))
                                     (if (eqv? #{ftype 17713}# 'define-syntax)
                                       (let ((#{tmp 18064}#
                                               ($sc-dispatch
                                                 #{e 17669}#
                                                 '(_ any any))))
                                         (if (if #{tmp 18064}#
                                               (@apply
                                                 (lambda (#{name 18068}#
                                                          #{val 18069}#)
                                                   (if (symbol? #{name 18068}#)
                                                     #t
                                                     (if (if (vector?
                                                               #{name 18068}#)
                                                           (if (= (vector-length
                                                                    #{name 18068}#)
                                                                  4)
                                                             (eq? (vector-ref
                                                                    #{name 18068}#
                                                                    0)
                                                                  'syntax-object)
                                                             #f)
                                                           #f)
                                                       (symbol?
                                                         (vector-ref
                                                           #{name 18068}#
                                                           1))
                                                       #f)))
                                                 #{tmp 18064}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 18096}#
                                                      #{val 18097}#)
                                               (values
                                                 'define-syntax-form
                                                 #{name 18096}#
                                                 #{val 18097}#
                                                 #{w 17671}#
                                                 #{s 17672}#
                                                 #{mod 17674}#))
                                             #{tmp 18064}#)
                                           (syntax-violation
                                             #f
                                             "source expression failed to match any pattern"
                                             #{e 17669}#)))
                                       (if (eqv? #{ftype 17713}#
                                                 'define-syntax-parameter)
                                         (let ((#{tmp 18108}#
                                                 ($sc-dispatch
                                                   #{e 17669}#
                                                   '(_ any any))))
                                           (if (if #{tmp 18108}#
                                                 (@apply
                                                   (lambda (#{name 18112}#
                                                            #{val 18113}#)
                                                     (if (symbol?
                                                           #{name 18112}#)
                                                       #t
                                                       (if (if (vector?
                                                                 #{name 18112}#)
                                                             (if (= (vector-length
                                                                      #{name 18112}#)
                                                                    4)
                                                               (eq? (vector-ref
                                                                      #{name 18112}#
                                                                      0)
                                                                    'syntax-object)
                                                               #f)
                                                             #f)
                                                         (symbol?
                                                           (vector-ref
                                                             #{name 18112}#
                                                             1))
                                                         #f)))
                                                   #{tmp 18108}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name 18140}#
                                                        #{val 18141}#)
                                                 (values
                                                   'define-syntax-parameter-form
                                                   #{name 18140}#
                                                   #{val 18141}#
                                                   #{w 17671}#
                                                   #{s 17672}#
                                                   #{mod 17674}#))
                                               #{tmp 18108}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{e 17669}#)))
                                         (values
                                           'call
                                           #f
                                           #{e 17669}#
                                           #{w 17671}#
                                           #{s 17672}#
                                           #{mod 17674}#)))))))))))))))
             (if (if (vector? #{e 17669}#)
                   (if (= (vector-length #{e 17669}#) 4)
                     (eq? (vector-ref #{e 17669}# 0) 'syntax-object)
                     #f)
                   #f)
               (#{syntax-type 2777}#
                 (vector-ref #{e 17669}# 1)
                 #{r 17670}#
                 (#{join-wraps 2759}#
                   #{w 17671}#
                   (vector-ref #{e 17669}# 2))
                 (let ((#{t 18168}#
                         (#{source-annotation 2736}# #{e 17669}#)))
                   (if #{t 18168}# #{t 18168}# #{s 17672}#))
                 #{rib 17673}#
                 (let ((#{t 18403}# (vector-ref #{e 17669}# 3)))
                   (if #{t 18403}# #{t 18403}# #{mod 17674}#))
                 #{for-car? 17675}#)
               (if (self-evaluating? #{e 17669}#)
                 (values
                   'constant
                   #f
                   #{e 17669}#
                   #{w 17671}#
                   #{s 17672}#
                   #{mod 17674}#)
                 (values
                   'other
                   #f
                   #{e 17669}#
                   #{w 17671}#
                   #{s 17672}#
                   #{mod 17674}#)))))))
     (#{expand 2778}#
       (lambda (#{e 18412}#
                #{r 18413}#
                #{w 18414}#
                #{mod 18415}#)
         (call-with-values
           (lambda ()
             (#{syntax-type 2777}#
               #{e 18412}#
               #{r 18413}#
               #{w 18414}#
               (#{source-annotation 2736}# #{e 18412}#)
               #f
               #{mod 18415}#
               #f))
           (lambda (#{type 18570}#
                    #{value 18571}#
                    #{e 18572}#
                    #{w 18573}#
                    #{s 18574}#
                    #{mod 18575}#)
             (#{expand-expr 2779}#
               #{type 18570}#
               #{value 18571}#
               #{e 18572}#
               #{r 18413}#
               #{w 18573}#
               #{s 18574}#
               #{mod 18575}#)))))
     (#{expand-expr 2779}#
       (lambda (#{type 18578}#
                #{value 18579}#
                #{e 18580}#
                #{r 18581}#
                #{w 18582}#
                #{s 18583}#
                #{mod 18584}#)
         (if (eqv? #{type 18578}# 'lexical)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 3)
             #{s 18583}#
             #{e 18580}#
             #{value 18579}#)
           (if (if (eqv? #{type 18578}# 'core)
                 #t
                 (eqv? #{type 18578}# 'core-form))
             (#{value 18579}#
               #{e 18580}#
               #{r 18581}#
               #{w 18582}#
               #{s 18583}#
               #{mod 18584}#)
             (if (eqv? #{type 18578}# 'module-ref)
               (call-with-values
                 (lambda ()
                   (#{value 18579}#
                     #{e 18580}#
                     #{r 18581}#
                     #{w 18582}#))
                 (lambda (#{e 18610}#
                          #{r 18611}#
                          #{w 18612}#
                          #{s 18613}#
                          #{mod 18614}#)
                   (#{expand 2778}#
                     #{e 18610}#
                     #{r 18611}#
                     #{w 18612}#
                     #{mod 18614}#)))
               (if (eqv? #{type 18578}# 'lexical-call)
                 (#{expand-application 2780}#
                   (let ((#{id 18689}# (car #{e 18580}#)))
                     (#{build-lexical-reference 2713}#
                       'fun
                       (#{source-annotation 2736}# #{id 18689}#)
                       (if (if (vector? #{id 18689}#)
                             (if (= (vector-length #{id 18689}#) 4)
                               (eq? (vector-ref #{id 18689}# 0) 'syntax-object)
                               #f)
                             #f)
                         (syntax->datum #{id 18689}#)
                         #{id 18689}#)
                       #{value 18579}#))
                   #{e 18580}#
                   #{r 18581}#
                   #{w 18582}#
                   #{s 18583}#
                   #{mod 18584}#)
                 (if (eqv? #{type 18578}# 'global-call)
                   (#{expand-application 2780}#
                     (#{build-global-reference 2716}#
                       (#{source-annotation 2736}# (car #{e 18580}#))
                       (if (if (vector? #{value 18579}#)
                             (if (= (vector-length #{value 18579}#) 4)
                               (eq? (vector-ref #{value 18579}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value 18579}# 1)
                         #{value 18579}#)
                       (if (if (vector? #{value 18579}#)
                             (if (= (vector-length #{value 18579}#) 4)
                               (eq? (vector-ref #{value 18579}# 0)
                                    'syntax-object)
                               #f)
                             #f)
                         (vector-ref #{value 18579}# 3)
                         #{mod 18584}#))
                     #{e 18580}#
                     #{r 18581}#
                     #{w 18582}#
                     #{s 18583}#
                     #{mod 18584}#)
                   (if (eqv? #{type 18578}# 'constant)
                     (let ((#{exp 19026}#
                             (#{strip 2791}#
                               (#{wrap 2771}#
                                 (begin
                                   (if (if (pair? #{e 18580}#) #{s 18583}# #f)
                                     (set-source-properties!
                                       #{e 18580}#
                                       #{s 18583}#))
                                   #{e 18580}#)
                                 #{w 18582}#
                                 #{mod 18584}#)
                               '(()))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #{s 18583}#
                         #{exp 19026}#))
                     (if (eqv? #{type 18578}# 'global)
                       (#{analyze-variable 2715}#
                         #{mod 18584}#
                         #{value 18579}#
                         (lambda (#{mod 19062}#
                                  #{var 19063}#
                                  #{public? 19064}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #{s 18583}#
                             #{mod 19062}#
                             #{var 19063}#
                             #{public? 19064}#))
                         (lambda (#{var 19073}#)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #{s 18583}#
                             #{var 19073}#)))
                       (if (eqv? #{type 18578}# 'call)
                         (#{expand-application 2780}#
                           (#{expand 2778}#
                             (car #{e 18580}#)
                             #{r 18581}#
                             #{w 18582}#
                             #{mod 18584}#)
                           #{e 18580}#
                           #{r 18581}#
                           #{w 18582}#
                           #{s 18583}#
                           #{mod 18584}#)
                         (if (eqv? #{type 18578}# 'begin-form)
                           (let ((#{tmp 19148}#
                                   ($sc-dispatch
                                     #{e 18580}#
                                     '(_ any . each-any))))
                             (if #{tmp 19148}#
                               (@apply
                                 (lambda (#{e1 19152}# #{e2 19153}#)
                                   (#{expand-sequence 2773}#
                                     (cons #{e1 19152}# #{e2 19153}#)
                                     #{r 18581}#
                                     #{w 18582}#
                                     #{s 18583}#
                                     #{mod 18584}#))
                                 #{tmp 19148}#)
                               (let ((#{tmp 19240}#
                                       ($sc-dispatch #{e 18580}# '(_))))
                                 (if #{tmp 19240}#
                                   (@apply
                                     (lambda ()
                                       (if (include-deprecated-features)
                                         (begin
                                           (issue-deprecation-warning
                                             "Sequences of zero expressions are deprecated.  Use *unspecified*.")
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))
                                         (syntax-violation
                                           #f
                                           "sequence of zero expressions"
                                           (#{wrap 2771}#
                                             (begin
                                               (if (if (pair? #{e 18580}#)
                                                     #{s 18583}#
                                                     #f)
                                                 (set-source-properties!
                                                   #{e 18580}#
                                                   #{s 18583}#))
                                               #{e 18580}#)
                                             #{w 18582}#
                                             #{mod 18584}#))))
                                     #{tmp 19240}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e 18580}#)))))
                           (if (eqv? #{type 18578}# 'local-syntax-form)
                             (#{expand-local-syntax 2783}#
                               #{value 18579}#
                               #{e 18580}#
                               #{r 18581}#
                               #{w 18582}#
                               #{s 18583}#
                               #{mod 18584}#
                               #{expand-sequence 2773}#)
                             (if (eqv? #{type 18578}# 'eval-when-form)
                               (let ((#{tmp 19351}#
                                       ($sc-dispatch
                                         #{e 18580}#
                                         '(_ each-any any . each-any))))
                                 (if #{tmp 19351}#
                                   (@apply
                                     (lambda (#{x 19355}#
                                              #{e1 19356}#
                                              #{e2 19357}#)
                                       (let ((#{when-list 19358}#
                                               (#{parse-when-list 2776}#
                                                 #{e 18580}#
                                                 #{x 19355}#)))
                                         (if (memq 'eval #{when-list 19358}#)
                                           (#{expand-sequence 2773}#
                                             (cons #{e1 19356}# #{e2 19357}#)
                                             #{r 18581}#
                                             #{w 18582}#
                                             #{s 18583}#
                                             #{mod 18584}#)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 0)
                                             #f))))
                                     #{tmp 19351}#)
                                   (syntax-violation
                                     #f
                                     "source expression failed to match any pattern"
                                     #{e 18580}#)))
                               (if (if (eqv? #{type 18578}# 'define-form)
                                     #t
                                     (if (eqv? #{type 18578}#
                                               'define-syntax-form)
                                       #t
                                       (eqv? #{type 18578}#
                                             'define-syntax-parameter-form)))
                                 (syntax-violation
                                   #f
                                   "definition in expression context"
                                   #{e 18580}#
                                   (#{wrap 2771}#
                                     #{value 18579}#
                                     #{w 18582}#
                                     #{mod 18584}#))
                                 (if (eqv? #{type 18578}# 'syntax)
                                   (syntax-violation
                                     #f
                                     "reference to pattern variable outside syntax form"
                                     (#{wrap 2771}#
                                       (begin
                                         (if (if (pair? #{e 18580}#)
                                               #{s 18583}#
                                               #f)
                                           (set-source-properties!
                                             #{e 18580}#
                                             #{s 18583}#))
                                         #{e 18580}#)
                                       #{w 18582}#
                                       #{mod 18584}#))
                                   (if (eqv? #{type 18578}# 'displaced-lexical)
                                     (syntax-violation
                                       #f
                                       "reference to identifier outside its scope"
                                       (#{wrap 2771}#
                                         (begin
                                           (if (if (pair? #{e 18580}#)
                                                 #{s 18583}#
                                                 #f)
                                             (set-source-properties!
                                               #{e 18580}#
                                               #{s 18583}#))
                                           #{e 18580}#)
                                         #{w 18582}#
                                         #{mod 18584}#))
                                     (syntax-violation
                                       #f
                                       "unexpected syntax"
                                       (#{wrap 2771}#
                                         (begin
                                           (if (if (pair? #{e 18580}#)
                                                 #{s 18583}#
                                                 #f)
                                             (set-source-properties!
                                               #{e 18580}#
                                               #{s 18583}#))
                                           #{e 18580}#)
                                         #{w 18582}#
                                         #{mod 18584}#))))))))))))))))))
     (#{expand-application 2780}#
       (lambda (#{x 19598}#
                #{e 19599}#
                #{r 19600}#
                #{w 19601}#
                #{s 19602}#
                #{mod 19603}#)
         (let ((#{tmp 19605}#
                 ($sc-dispatch #{e 19599}# '(any . each-any))))
           (if #{tmp 19605}#
             (@apply
               (lambda (#{e0 19609}# #{e1 19610}#)
                 (#{build-application 2710}#
                   #{s 19602}#
                   #{x 19598}#
                   (map (lambda (#{e 19690}#)
                          (#{expand 2778}#
                            #{e 19690}#
                            #{r 19600}#
                            #{w 19601}#
                            #{mod 19603}#))
                        #{e1 19610}#)))
               #{tmp 19605}#)
             (syntax-violation
               #f
               "source expression failed to match any pattern"
               #{e 19599}#)))))
     (#{expand-macro 2781}#
       (lambda (#{p 19766}#
                #{e 19767}#
                #{r 19768}#
                #{w 19769}#
                #{s 19770}#
                #{rib 19771}#
                #{mod 19772}#)
         (letrec*
           ((#{rebuild-macro-output 19773}#
              (lambda (#{x 19805}# #{m 19806}#)
                (if (pair? #{x 19805}#)
                  (let ((#{e 19810}#
                          (cons (#{rebuild-macro-output 19773}#
                                  (car #{x 19805}#)
                                  #{m 19806}#)
                                (#{rebuild-macro-output 19773}#
                                  (cdr #{x 19805}#)
                                  #{m 19806}#))))
                    (begin
                      (if (if (pair? #{e 19810}#) #{s 19770}# #f)
                        (set-source-properties! #{e 19810}# #{s 19770}#))
                      #{e 19810}#))
                  (if (if (vector? #{x 19805}#)
                        (if (= (vector-length #{x 19805}#) 4)
                          (eq? (vector-ref #{x 19805}# 0) 'syntax-object)
                          #f)
                        #f)
                    (let ((#{w 19826}# (vector-ref #{x 19805}# 2)))
                      (let ((#{ms 19827}# (car #{w 19826}#))
                            (#{s 19828}# (cdr #{w 19826}#)))
                        (if (if (pair? #{ms 19827}#)
                              (eq? (car #{ms 19827}#) #f)
                              #f)
                          (let ((#{expression 19836}#
                                  (vector-ref #{x 19805}# 1))
                                (#{wrap 19837}#
                                  (cons (cdr #{ms 19827}#)
                                        (if #{rib 19771}#
                                          (cons #{rib 19771}#
                                                (cdr #{s 19828}#))
                                          (cdr #{s 19828}#))))
                                (#{module 19838}# (vector-ref #{x 19805}# 3)))
                            (vector
                              'syntax-object
                              #{expression 19836}#
                              #{wrap 19837}#
                              #{module 19838}#))
                          (let ((#{expression 19848}#
                                  (let ((#{e 19853}#
                                          (vector-ref #{x 19805}# 1)))
                                    (begin
                                      (if (if (pair? #{e 19853}#)
                                            #{s 19828}#
                                            #f)
                                        (set-source-properties!
                                          #{e 19853}#
                                          #{s 19828}#))
                                      #{e 19853}#)))
                                (#{wrap 19849}#
                                  (cons (cons #{m 19806}# #{ms 19827}#)
                                        (if #{rib 19771}#
                                          (cons #{rib 19771}#
                                                (cons 'shift #{s 19828}#))
                                          (cons 'shift #{s 19828}#))))
                                (#{module 19850}# (vector-ref #{x 19805}# 3)))
                            (vector
                              'syntax-object
                              #{expression 19848}#
                              #{wrap 19849}#
                              #{module 19850}#)))))
                    (if (vector? #{x 19805}#)
                      (let ((#{n 19865}# (vector-length #{x 19805}#)))
                        (let ((#{v 19866}#
                                (let ((#{e 19874}# (make-vector #{n 19865}#)))
                                  (begin
                                    (if (if (pair? #{e 19874}#) #{x 19805}# #f)
                                      (set-source-properties!
                                        #{e 19874}#
                                        #{x 19805}#))
                                    #{e 19874}#))))
                          (letrec*
                            ((#{loop 19867}#
                               (lambda (#{i 19919}#)
                                 (if (= #{i 19919}# #{n 19865}#)
                                   #{v 19866}#
                                   (begin
                                     (vector-set!
                                       #{v 19866}#
                                       #{i 19919}#
                                       (#{rebuild-macro-output 19773}#
                                         (vector-ref #{x 19805}# #{i 19919}#)
                                         #{m 19806}#))
                                     (#{loop 19867}# (#{1+}# #{i 19919}#)))))))
                            (#{loop 19867}# 0))))
                      (if (symbol? #{x 19805}#)
                        (syntax-violation
                          #f
                          "encountered raw symbol in macro output"
                          (let ((#{s 19925}# (cdr #{w 19769}#)))
                            (#{wrap 2771}#
                              (begin
                                (if (if (pair? #{e 19767}#) #{s 19925}# #f)
                                  (set-source-properties!
                                    #{e 19767}#
                                    #{s 19925}#))
                                #{e 19767}#)
                              #{w 19769}#
                              #{mod 19772}#))
                          #{x 19805}#)
                        (begin
                          (if (if (pair? #{x 19805}#) #{s 19770}# #f)
                            (set-source-properties! #{x 19805}# #{s 19770}#))
                          #{x 19805}#))))))))
           (with-fluids
             ((#{transformer-environment 2764}#
                (lambda (#{k 19774}#)
                  (#{k 19774}#
                    #{e 19767}#
                    #{r 19768}#
                    #{w 19769}#
                    #{s 19770}#
                    #{rib 19771}#
                    #{mod 19772}#))))
             (#{rebuild-macro-output 19773}#
               (#{p 19766}#
                 (let ((#{w 19781}#
                         (cons (cons #f (car #{w 19769}#))
                               (cons 'shift (cdr #{w 19769}#)))))
                   (#{wrap 2771}#
                     (begin
                       (if (if (pair? #{e 19767}#) #{s 19770}# #f)
                         (set-source-properties! #{e 19767}# #{s 19770}#))
                       #{e 19767}#)
                     #{w 19781}#
                     #{mod 19772}#)))
               (gensym "m"))))))
     (#{expand-body 2782}#
       (lambda (#{body 19957}#
                #{outer-form 19958}#
                #{r 19959}#
                #{w 19960}#
                #{mod 19961}#)
         (let ((#{r 19962}#
                 (cons '("placeholder" placeholder) #{r 19959}#)))
           (let ((#{ribcage 19963}# (vector 'ribcage '() '() '())))
             (let ((#{w 19964}#
                     (cons (car #{w 19960}#)
                           (cons #{ribcage 19963}# (cdr #{w 19960}#)))))
               (letrec*
                 ((#{parse 19965}#
                    (lambda (#{body 19978}#
                             #{ids 19979}#
                             #{labels 19980}#
                             #{var-ids 19981}#
                             #{vars 19982}#
                             #{vals 19983}#
                             #{bindings 19984}#)
                      (if (null? #{body 19978}#)
                        (syntax-violation
                          #f
                          "no expressions in body"
                          #{outer-form 19958}#)
                        (let ((#{e 19985}# (cdr (car #{body 19978}#)))
                              (#{er 19986}# (car (car #{body 19978}#))))
                          (call-with-values
                            (lambda ()
                              (#{syntax-type 2777}#
                                #{e 19985}#
                                #{er 19986}#
                                '(())
                                (#{source-annotation 2736}# #{er 19986}#)
                                #{ribcage 19963}#
                                #{mod 19961}#
                                #f))
                            (lambda (#{type 20143}#
                                     #{value 20144}#
                                     #{e 20145}#
                                     #{w 20146}#
                                     #{s 20147}#
                                     #{mod 20148}#)
                              (if (eqv? #{type 20143}# 'define-form)
                                (let ((#{id 20152}#
                                        (#{wrap 2771}#
                                          #{value 20144}#
                                          #{w 20146}#
                                          #{mod 20148}#))
                                      (#{label 20153}# (#{gen-label 2745}#)))
                                  (let ((#{var 20154}#
                                          (let ((#{id 20212}#
                                                  (if (if (vector?
                                                            #{id 20152}#)
                                                        (if (= (vector-length
                                                                 #{id 20152}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{id 20152}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{id 20152}# 1)
                                                    #{id 20152}#)))
                                            (gensym
                                              (string-append
                                                (symbol->string #{id 20212}#)
                                                " ")))))
                                    (begin
                                      (let ((#{update 20202}#
                                              (cons (vector-ref #{id 20152}# 1)
                                                    (vector-ref
                                                      #{ribcage 19963}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 19963}#
                                          1
                                          #{update 20202}#))
                                      (let ((#{update 20204}#
                                              (cons (car (vector-ref
                                                           #{id 20152}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 19963}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 19963}#
                                          2
                                          #{update 20204}#))
                                      (let ((#{update 20206}#
                                              (cons #{label 20153}#
                                                    (vector-ref
                                                      #{ribcage 19963}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 19963}#
                                          3
                                          #{update 20206}#))
                                      (#{parse 19965}#
                                        (cdr #{body 19978}#)
                                        (cons #{id 20152}# #{ids 19979}#)
                                        (cons #{label 20153}# #{labels 19980}#)
                                        (cons #{id 20152}# #{var-ids 19981}#)
                                        (cons #{var 20154}# #{vars 19982}#)
                                        (cons (cons #{er 19986}#
                                                    (#{wrap 2771}#
                                                      #{e 20145}#
                                                      #{w 20146}#
                                                      #{mod 20148}#))
                                              #{vals 19983}#)
                                        (cons (cons 'lexical #{var 20154}#)
                                              #{bindings 19984}#)))))
                                (if (if (eqv? #{type 20143}#
                                              'define-syntax-form)
                                      #t
                                      (eqv? #{type 20143}#
                                            'define-syntax-parameter-form))
                                  (let ((#{id 20245}#
                                          (#{wrap 2771}#
                                            #{value 20144}#
                                            #{w 20146}#
                                            #{mod 20148}#))
                                        (#{label 20246}# (#{gen-label 2745}#)))
                                    (begin
                                      (let ((#{update 20294}#
                                              (cons (vector-ref #{id 20245}# 1)
                                                    (vector-ref
                                                      #{ribcage 19963}#
                                                      1))))
                                        (vector-set!
                                          #{ribcage 19963}#
                                          1
                                          #{update 20294}#))
                                      (let ((#{update 20296}#
                                              (cons (car (vector-ref
                                                           #{id 20245}#
                                                           2))
                                                    (vector-ref
                                                      #{ribcage 19963}#
                                                      2))))
                                        (vector-set!
                                          #{ribcage 19963}#
                                          2
                                          #{update 20296}#))
                                      (let ((#{update 20298}#
                                              (cons #{label 20246}#
                                                    (vector-ref
                                                      #{ribcage 19963}#
                                                      3))))
                                        (vector-set!
                                          #{ribcage 19963}#
                                          3
                                          #{update 20298}#))
                                      (#{parse 19965}#
                                        (cdr #{body 19978}#)
                                        (cons #{id 20245}# #{ids 19979}#)
                                        (cons #{label 20246}# #{labels 19980}#)
                                        #{var-ids 19981}#
                                        #{vars 19982}#
                                        #{vals 19983}#
                                        (cons (cons 'macro
                                                    (cons #{er 19986}#
                                                          (#{wrap 2771}#
                                                            #{e 20145}#
                                                            #{w 20146}#
                                                            #{mod 20148}#)))
                                              #{bindings 19984}#))))
                                  (if (eqv? #{type 20143}# 'begin-form)
                                    (let ((#{tmp 20306}#
                                            ($sc-dispatch
                                              #{e 20145}#
                                              '(_ . each-any))))
                                      (if #{tmp 20306}#
                                        (@apply
                                          (lambda (#{e1 20310}#)
                                            (#{parse 19965}#
                                              (letrec*
                                                ((#{f 20311}#
                                                   (lambda (#{forms 20374}#)
                                                     (if (null? #{forms 20374}#)
                                                       (cdr #{body 19978}#)
                                                       (cons (cons #{er 19986}#
                                                                   (#{wrap 2771}#
                                                                     (car #{forms 20374}#)
                                                                     #{w 20146}#
                                                                     #{mod 20148}#))
                                                             (#{f 20311}#
                                                               (cdr #{forms 20374}#)))))))
                                                (#{f 20311}# #{e1 20310}#))
                                              #{ids 19979}#
                                              #{labels 19980}#
                                              #{var-ids 19981}#
                                              #{vars 19982}#
                                              #{vals 19983}#
                                              #{bindings 19984}#))
                                          #{tmp 20306}#)
                                        (syntax-violation
                                          #f
                                          "source expression failed to match any pattern"
                                          #{e 20145}#)))
                                    (if (eqv? #{type 20143}#
                                              'local-syntax-form)
                                      (#{expand-local-syntax 2783}#
                                        #{value 20144}#
                                        #{e 20145}#
                                        #{er 19986}#
                                        #{w 20146}#
                                        #{s 20147}#
                                        #{mod 20148}#
                                        (lambda (#{forms 20388}#
                                                 #{er 20389}#
                                                 #{w 20390}#
                                                 #{s 20391}#
                                                 #{mod 20392}#)
                                          (#{parse 19965}#
                                            (letrec*
                                              ((#{f 20393}#
                                                 (lambda (#{forms 20456}#)
                                                   (if (null? #{forms 20456}#)
                                                     (cdr #{body 19978}#)
                                                     (cons (cons #{er 20389}#
                                                                 (#{wrap 2771}#
                                                                   (car #{forms 20456}#)
                                                                   #{w 20390}#
                                                                   #{mod 20392}#))
                                                           (#{f 20393}#
                                                             (cdr #{forms 20456}#)))))))
                                              (#{f 20393}# #{forms 20388}#))
                                            #{ids 19979}#
                                            #{labels 19980}#
                                            #{var-ids 19981}#
                                            #{vars 19982}#
                                            #{vals 19983}#
                                            #{bindings 19984}#)))
                                      (if (null? #{ids 19979}#)
                                        (#{build-sequence 2724}#
                                          #f
                                          (map (lambda (#{x 20521}#)
                                                 (let ((#{e 20525}#
                                                         (cdr #{x 20521}#))
                                                       (#{r 20526}#
                                                         (car #{x 20521}#)))
                                                   (call-with-values
                                                     (lambda ()
                                                       (#{syntax-type 2777}#
                                                         #{e 20525}#
                                                         #{r 20526}#
                                                         '(())
                                                         (#{source-annotation 2736}#
                                                           #{e 20525}#)
                                                         #f
                                                         #{mod 20148}#
                                                         #f))
                                                     (lambda (#{type 20530}#
                                                              #{value 20531}#
                                                              #{e 20532}#
                                                              #{w 20533}#
                                                              #{s 20534}#
                                                              #{mod 20535}#)
                                                       (#{expand-expr 2779}#
                                                         #{type 20530}#
                                                         #{value 20531}#
                                                         #{e 20532}#
                                                         #{r 20526}#
                                                         #{w 20533}#
                                                         #{s 20534}#
                                                         #{mod 20535}#)))))
                                               (cons (cons #{er 19986}#
                                                           (#{wrap 2771}#
                                                             (begin
                                                               (if (if (pair? #{e 20145}#)
                                                                     #{s 20147}#
                                                                     #f)
                                                                 (set-source-properties!
                                                                   #{e 20145}#
                                                                   #{s 20147}#))
                                                               #{e 20145}#)
                                                             #{w 20146}#
                                                             #{mod 20148}#))
                                                     (cdr #{body 19978}#))))
                                        (begin
                                          (if (not (#{valid-bound-ids? 2768}#
                                                     #{ids 19979}#))
                                            (syntax-violation
                                              #f
                                              "invalid or duplicate identifier in definition"
                                              #{outer-form 19958}#))
                                          (letrec*
                                            ((#{loop 20636}#
                                               (lambda (#{bs 20639}#
                                                        #{er-cache 20640}#
                                                        #{r-cache 20641}#)
                                                 (if (not (null? #{bs 20639}#))
                                                   (let ((#{b 20642}#
                                                           (car #{bs 20639}#)))
                                                     (if (eq? (car #{b 20642}#)
                                                              'macro)
                                                       (let ((#{er 20644}#
                                                               (car (cdr #{b 20642}#))))
                                                         (let ((#{r-cache 20645}#
                                                                 (if (eq? #{er 20644}#
                                                                          #{er-cache 20640}#)
                                                                   #{r-cache 20641}#
                                                                   (#{macros-only-env 2739}#
                                                                     #{er 20644}#))))
                                                           (begin
                                                             (set-cdr!
                                                               #{b 20642}#
                                                               (#{eval-local-transformer 2784}#
                                                                 (#{expand 2778}#
                                                                   (cdr (cdr #{b 20642}#))
                                                                   #{r-cache 20645}#
                                                                   '(())
                                                                   #{mod 20148}#)
                                                                 #{mod 20148}#))
                                                             (#{loop 20636}#
                                                               (cdr #{bs 20639}#)
                                                               #{er 20644}#
                                                               #{r-cache 20645}#))))
                                                       (#{loop 20636}#
                                                         (cdr #{bs 20639}#)
                                                         #{er-cache 20640}#
                                                         #{r-cache 20641}#)))))))
                                            (#{loop 20636}#
                                              #{bindings 19984}#
                                              #f
                                              #f))
                                          (set-cdr!
                                            #{r 19962}#
                                            (#{extend-env 2737}#
                                              #{labels 19980}#
                                              #{bindings 19984}#
                                              (cdr #{r 19962}#)))
                                          (#{build-letrec 2727}#
                                            #f
                                            #t
                                            (reverse
                                              (map syntax->datum
                                                   #{var-ids 19981}#))
                                            (reverse #{vars 19982}#)
                                            (map (lambda (#{x 20988}#)
                                                   (let ((#{e 20992}#
                                                           (cdr #{x 20988}#))
                                                         (#{r 20993}#
                                                           (car #{x 20988}#)))
                                                     (call-with-values
                                                       (lambda ()
                                                         (#{syntax-type 2777}#
                                                           #{e 20992}#
                                                           #{r 20993}#
                                                           '(())
                                                           (#{source-annotation 2736}#
                                                             #{e 20992}#)
                                                           #f
                                                           #{mod 20148}#
                                                           #f))
                                                       (lambda (#{type 20997}#
                                                                #{value 20998}#
                                                                #{e 20999}#
                                                                #{w 21000}#
                                                                #{s 21001}#
                                                                #{mod 21002}#)
                                                         (#{expand-expr 2779}#
                                                           #{type 20997}#
                                                           #{value 20998}#
                                                           #{e 20999}#
                                                           #{r 20993}#
                                                           #{w 21000}#
                                                           #{s 21001}#
                                                           #{mod 21002}#)))))
                                                 (reverse #{vals 19983}#))
                                            (let ((#{exps 21008}#
                                                    (map (lambda (#{x 21009}#)
                                                           (let ((#{e 21012}#
                                                                   (cdr #{x 21009}#))
                                                                 (#{r 21013}#
                                                                   (car #{x 21009}#)))
                                                             (call-with-values
                                                               (lambda ()
                                                                 (#{syntax-type 2777}#
                                                                   #{e 21012}#
                                                                   #{r 21013}#
                                                                   '(())
                                                                   (#{source-annotation 2736}#
                                                                     #{e 21012}#)
                                                                   #f
                                                                   #{mod 20148}#
                                                                   #f))
                                                               (lambda (#{type 21017}#
                                                                        #{value 21018}#
                                                                        #{e 21019}#
                                                                        #{w 21020}#
                                                                        #{s 21021}#
                                                                        #{mod 21022}#)
                                                                 (#{expand-expr 2779}#
                                                                   #{type 21017}#
                                                                   #{value 21018}#
                                                                   #{e 21019}#
                                                                   #{r 21013}#
                                                                   #{w 21020}#
                                                                   #{s 21021}#
                                                                   #{mod 21022}#)))))
                                                         (cons (cons #{er 19986}#
                                                                     (#{wrap 2771}#
                                                                       (begin
                                                                         (if (if (pair? #{e 20145}#)
                                                                               #{s 20147}#
                                                                               #f)
                                                                           (set-source-properties!
                                                                             #{e 20145}#
                                                                             #{s 20147}#))
                                                                         #{e 20145}#)
                                                                       #{w 20146}#
                                                                       #{mod 20148}#))
                                                               (cdr #{body 19978}#)))))
                                              (if (null? (cdr #{exps 21008}#))
                                                (car #{exps 21008}#)
                                                (make-struct/no-tail
                                                  (vector-ref
                                                    %expanded-vtables
                                                    12)
                                                  #f
                                                  #{exps 21008}#)))))))))))))))))
                 (#{parse 19965}#
                   (map (lambda (#{x 19968}#)
                          (cons #{r 19962}#
                                (#{wrap 2771}#
                                  #{x 19968}#
                                  #{w 19964}#
                                  #{mod 19961}#)))
                        #{body 19957}#)
                   '()
                   '()
                   '()
                   '()
                   '()
                   '())))))))
     (#{expand-local-syntax 2783}#
       (lambda (#{rec? 21048}#
                #{e 21049}#
                #{r 21050}#
                #{w 21051}#
                #{s 21052}#
                #{mod 21053}#
                #{k 21054}#)
         (let ((#{tmp 21056}#
                 ($sc-dispatch
                   #{e 21049}#
                   '(_ #(each (any any)) any . each-any))))
           (if #{tmp 21056}#
             (@apply
               (lambda (#{id 21060}#
                        #{val 21061}#
                        #{e1 21062}#
                        #{e2 21063}#)
                 (if (not (#{valid-bound-ids? 2768}# #{id 21060}#))
                   (syntax-violation
                     #f
                     "duplicate bound keyword"
                     #{e 21049}#)
                   (let ((#{labels 21153}#
                           (#{gen-labels 2746}# #{id 21060}#)))
                     (let ((#{new-w 21154}#
                             (#{make-binding-wrap 2757}#
                               #{id 21060}#
                               #{labels 21153}#
                               #{w 21051}#)))
                       (#{k 21054}#
                         (cons #{e1 21062}# #{e2 21063}#)
                         (#{extend-env 2737}#
                           #{labels 21153}#
                           (let ((#{trans-r 21186}#
                                   (#{macros-only-env 2739}# #{r 21050}#)))
                             (begin
                               (if #{rec? 21048}# #{new-w 21154}# #{w 21051}#)
                               (map (lambda (#{x 21187}#)
                                      (cons 'macro
                                            (#{eval-local-transformer 2784}#
                                              (#{expand 2778}#
                                                #{x 21187}#
                                                #{trans-r 21186}#
                                                (values
                                                  (if #{rec? 21048}#
                                                    #{new-w 21154}#
                                                    #{w 21051}#))
                                                #{mod 21053}#)
                                              #{mod 21053}#)))
                                    #{val 21061}#)))
                           #{r 21050}#)
                         #{new-w 21154}#
                         #{s 21052}#
                         #{mod 21053}#)))))
               #{tmp 21056}#)
             (syntax-violation
               #f
               "bad local syntax definition"
               (#{wrap 2771}#
                 (begin
                   (if (if (pair? #{e 21049}#) #{s 21052}# #f)
                     (set-source-properties! #{e 21049}# #{s 21052}#))
                   #{e 21049}#)
                 #{w 21051}#
                 #{mod 21053}#))))))
     (#{eval-local-transformer 2784}#
       (lambda (#{expanded 21463}# #{mod 21464}#)
         (let ((#{p 21465}# (primitive-eval #{expanded 21463}#)))
           (if (procedure? #{p 21465}#)
             #{p 21465}#
             (syntax-violation
               #f
               "nonprocedure transformer"
               #{p 21465}#)))))
     (#{ellipsis? 2786}#
       (lambda (#{x 3447}#)
         (if (if (if (vector? #{x 3447}#)
                   (if (= (vector-length #{x 3447}#) 4)
                     (eq? (vector-ref #{x 3447}# 0) 'syntax-object)
                     #f)
                   #f)
               (symbol? (vector-ref #{x 3447}# 1))
               #f)
           (if (eq? (if (if (vector? #{x 3447}#)
                          (if (= (vector-length #{x 3447}#) 4)
                            (eq? (vector-ref #{x 3447}# 0) 'syntax-object)
                            #f)
                          #f)
                      (vector-ref #{x 3447}# 1)
                      #{x 3447}#)
                    (if (if (= (vector-length
                                 '#(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("of"))
                                     #(ribcage
                                       (lambda-var-list
                                         gen-var
                                         strip
                                         expand-lambda-case
                                         lambda*-formals
                                         expand-simple-lambda
                                         lambda-formals
                                         ellipsis?
                                         expand-void
                                         eval-local-transformer
                                         expand-local-syntax
                                         expand-body
                                         expand-macro
                                         expand-application
                                         expand-expr
                                         expand
                                         syntax-type
                                         parse-when-list
                                         expand-install-global
                                         expand-top-sequence
                                         expand-sequence
                                         source-wrap
                                         wrap
                                         bound-id-member?
                                         distinct-bound-ids?
                                         valid-bound-ids?
                                         bound-id=?
                                         free-id=?
                                         with-transformer-environment
                                         transformer-environment
                                         resolve-identifier
                                         id-var-name
                                         same-marks?
                                         join-marks
                                         join-wraps
                                         smart-append
                                         make-binding-wrap
                                         extend-ribcage!
                                         make-empty-ribcage
                                         new-mark
                                         anti-mark
                                         the-anti-mark
                                         top-marked?
                                         top-wrap
                                         empty-wrap
                                         set-ribcage-labels!
                                         set-ribcage-marks!
                                         set-ribcage-symnames!
                                         ribcage-labels
                                         ribcage-marks
                                         ribcage-symnames
                                         ribcage?
                                         make-ribcage
                                         gen-labels
                                         gen-label
                                         make-rename
                                         rename-marks
                                         rename-new
                                         rename-old
                                         subst-rename?
                                         wrap-subst
                                         wrap-marks
                                         make-wrap
                                         id-sym-name&marks
                                         id-sym-name
                                         id?
                                         nonsymbol-id?
                                         global-extend
                                         lookup
                                         macros-only-env
                                         extend-var-env
                                         extend-env
                                         null-env
                                         binding-value
                                         binding-type
                                         make-binding
                                         arg-check
                                         source-annotation
                                         no-source
                                         set-syntax-object-module!
                                         set-syntax-object-wrap!
                                         set-syntax-object-expression!
                                         syntax-object-module
                                         syntax-object-wrap
                                         syntax-object-expression
                                         syntax-object?
                                         make-syntax-object
                                         build-lexical-var
                                         build-letrec
                                         build-named-let
                                         build-let
                                         build-sequence
                                         build-data
                                         build-primref
                                         build-lambda-case
                                         build-case-lambda
                                         build-simple-lambda
                                         build-global-definition
                                         build-global-assignment
                                         build-global-reference
                                         analyze-variable
                                         build-lexical-assignment
                                         build-lexical-reference
                                         build-dynlet
                                         build-conditional
                                         build-application
                                         build-void
                                         maybe-name-value!
                                         decorate-source
                                         get-global-definition-hook
                                         put-global-definition-hook
                                         gensym-hook
                                         local-eval-hook
                                         top-level-eval-hook
                                         fx<
                                         fx=
                                         fx-
                                         fx+
                                         set-lambda-meta!
                                         lambda-meta
                                         lambda?
                                         make-dynlet
                                         make-letrec
                                         make-let
                                         make-lambda-case
                                         make-lambda
                                         make-sequence
                                         make-application
                                         make-conditional
                                         make-toplevel-define
                                         make-toplevel-set
                                         make-toplevel-ref
                                         make-module-set
                                         make-module-ref
                                         make-lexical-set
                                         make-lexical-ref
                                         make-primitive-ref
                                         make-const
                                         make-void)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("5k"
                                        "5j"
                                        "5i"
                                        "5h"
                                        "5g"
                                        "5f"
                                        "5e"
                                        "5d"
                                        "5c"
                                        "5b"
                                        "5a"
                                        "59"
                                        "58"
                                        "57"
                                        "56"
                                        "55"
                                        "54"
                                        "53"
                                        "52"
                                        "51"
                                        "50"
                                        "4z"
                                        "4y"
                                        "4x"
                                        "4w"
                                        "4v"
                                        "4u"
                                        "4t"
                                        "4s"
                                        "4r"
                                        "4q"
                                        "4p"
                                        "4o"
                                        "4n"
                                        "4m"
                                        "4l"
                                        "4k"
                                        "4j"
                                        "4i"
                                        "4h"
                                        "4g"
                                        "4f"
                                        "4e"
                                        "4d"
                                        "4c"
                                        "4b"
                                        "4a"
                                        "49"
                                        "48"
                                        "47"
                                        "46"
                                        "45"
                                        "44"
                                        "43"
                                        "42"
                                        "41"
                                        "40"
                                        "3z"
                                        "3y"
                                        "3x"
                                        "3w"
                                        "3v"
                                        "3u"
                                        "3t"
                                        "3s"
                                        "3r"
                                        "3q"
                                        "3p"
                                        "3o"
                                        "3n"
                                        "3m"
                                        "3l"
                                        "3k"
                                        "3j"
                                        "3i"
                                        "3h"
                                        "3g"
                                        "3f"
                                        "3e"
                                        "3d"
                                        "3c"
                                        "3b"
                                        "3a"
                                        "39"
                                        "38"
                                        "37"
                                        "36"
                                        "35"
                                        "34"
                                        "33"
                                        "32"
                                        "31"
                                        "30"
                                        "2z"
                                        "2y"
                                        "2x"
                                        "2w"
                                        "2v"
                                        "2u"
                                        "2t"
                                        "2s"
                                        "2r"
                                        "2q"
                                        "2p"
                                        "2o"
                                        "2n"
                                        "2m"
                                        "2l"
                                        "2k"
                                        "2j"
                                        "2i"
                                        "2h"
                                        "2g"
                                        "2f"
                                        "2e"
                                        "2d"
                                        "2c"
                                        "2b"
                                        "2a"
                                        "29"
                                        "28"
                                        "27"
                                        "26"
                                        "25"
                                        "24"
                                        "23"
                                        "22"
                                        "21"
                                        "20"
                                        "1z"
                                        "1y"
                                        "1x"
                                        "1w"
                                        "1v"
                                        "1u"
                                        "1t"
                                        "1s"
                                        "1r"
                                        "1q"))
                                     #(ribcage
                                       (define-structure
                                         define-expansion-accessors
                                         define-expansion-constructors)
                                       ((top) (top) (top))
                                       ("8" "7" "6")))
                                    (hygiene guile)))
                               4)
                          #t
                          #f)
                      '...
                      '#(syntax-object
                         ...
                         ((top)
                          #(ribcage () () ())
                          #(ribcage () () ())
                          #(ribcage #(x) #((top)) #("of"))
                          #(ribcage
                            (lambda-var-list
                              gen-var
                              strip
                              expand-lambda-case
                              lambda*-formals
                              expand-simple-lambda
                              lambda-formals
                              ellipsis?
                              expand-void
                              eval-local-transformer
                              expand-local-syntax
                              expand-body
                              expand-macro
                              expand-application
                              expand-expr
                              expand
                              syntax-type
                              parse-when-list
                              expand-install-global
                              expand-top-sequence
                              expand-sequence
                              source-wrap
                              wrap
                              bound-id-member?
                              distinct-bound-ids?
                              valid-bound-ids?
                              bound-id=?
                              free-id=?
                              with-transformer-environment
                              transformer-environment
                              resolve-identifier
                              id-var-name
                              same-marks?
                              join-marks
                              join-wraps
                              smart-append
                              make-binding-wrap
                              extend-ribcage!
                              make-empty-ribcage
                              new-mark
                              anti-mark
                              the-anti-mark
                              top-marked?
                              top-wrap
                              empty-wrap
                              set-ribcage-labels!
                              set-ribcage-marks!
                              set-ribcage-symnames!
                              ribcage-labels
                              ribcage-marks
                              ribcage-symnames
                              ribcage?
                              make-ribcage
                              gen-labels
                              gen-label
                              make-rename
                              rename-marks
                              rename-new
                              rename-old
                              subst-rename?
                              wrap-subst
                              wrap-marks
                              make-wrap
                              id-sym-name&marks
                              id-sym-name
                              id?
                              nonsymbol-id?
                              global-extend
                              lookup
                              macros-only-env
                              extend-var-env
                              extend-env
                              null-env
                              binding-value
                              binding-type
                              make-binding
                              arg-check
                              source-annotation
                              no-source
                              set-syntax-object-module!
                              set-syntax-object-wrap!
                              set-syntax-object-expression!
                              syntax-object-module
                              syntax-object-wrap
                              syntax-object-expression
                              syntax-object?
                              make-syntax-object
                              build-lexical-var
                              build-letrec
                              build-named-let
                              build-let
                              build-sequence
                              build-data
                              build-primref
                              build-lambda-case
                              build-case-lambda
                              build-simple-lambda
                              build-global-definition
                              build-global-assignment
                              build-global-reference
                              analyze-variable
                              build-lexical-assignment
                              build-lexical-reference
                              build-dynlet
                              build-conditional
                              build-application
                              build-void
                              maybe-name-value!
                              decorate-source
                              get-global-definition-hook
                              put-global-definition-hook
                              gensym-hook
                              local-eval-hook
                              top-level-eval-hook
                              fx<
                              fx=
                              fx-
                              fx+
                              set-lambda-meta!
                              lambda-meta
                              lambda?
                              make-dynlet
                              make-letrec
                              make-let
                              make-lambda-case
                              make-lambda
                              make-sequence
                              make-application
                              make-conditional
                              make-toplevel-define
                              make-toplevel-set
                              make-toplevel-ref
                              make-module-set
                              make-module-ref
                              make-lexical-set
                              make-lexical-ref
                              make-primitive-ref
                              make-const
                              make-void)
                            ((top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top)
                             (top))
                            ("5k"
                             "5j"
                             "5i"
                             "5h"
                             "5g"
                             "5f"
                             "5e"
                             "5d"
                             "5c"
                             "5b"
                             "5a"
                             "59"
                             "58"
                             "57"
                             "56"
                             "55"
                             "54"
                             "53"
                             "52"
                             "51"
                             "50"
                             "4z"
                             "4y"
                             "4x"
                             "4w"
                             "4v"
                             "4u"
                             "4t"
                             "4s"
                             "4r"
                             "4q"
                             "4p"
                             "4o"
                             "4n"
                             "4m"
                             "4l"
                             "4k"
                             "4j"
                             "4i"
                             "4h"
                             "4g"
                             "4f"
                             "4e"
                             "4d"
                             "4c"
                             "4b"
                             "4a"
                             "49"
                             "48"
                             "47"
                             "46"
                             "45"
                             "44"
                             "43"
                             "42"
                             "41"
                             "40"
                             "3z"
                             "3y"
                             "3x"
                             "3w"
                             "3v"
                             "3u"
                             "3t"
                             "3s"
                             "3r"
                             "3q"
                             "3p"
                             "3o"
                             "3n"
                             "3m"
                             "3l"
                             "3k"
                             "3j"
                             "3i"
                             "3h"
                             "3g"
                             "3f"
                             "3e"
                             "3d"
                             "3c"
                             "3b"
                             "3a"
                             "39"
                             "38"
                             "37"
                             "36"
                             "35"
                             "34"
                             "33"
                             "32"
                             "31"
                             "30"
                             "2z"
                             "2y"
                             "2x"
                             "2w"
                             "2v"
                             "2u"
                             "2t"
                             "2s"
                             "2r"
                             "2q"
                             "2p"
                             "2o"
                             "2n"
                             "2m"
                             "2l"
                             "2k"
                             "2j"
                             "2i"
                             "2h"
                             "2g"
                             "2f"
                             "2e"
                             "2d"
                             "2c"
                             "2b"
                             "2a"
                             "29"
                             "28"
                             "27"
                             "26"
                             "25"
                             "24"
                             "23"
                             "22"
                             "21"
                             "20"
                             "1z"
                             "1y"
                             "1x"
                             "1w"
                             "1v"
                             "1u"
                             "1t"
                             "1s"
                             "1r"
                             "1q"))
                          #(ribcage
                            (define-structure
                              define-expansion-accessors
                              define-expansion-constructors)
                            ((top) (top) (top))
                            ("8" "7" "6")))
                         (hygiene guile))))
             (eq? (#{id-var-name 2762}# #{x 3447}# '(()))
                  (#{id-var-name 2762}#
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("of"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            expand-lambda-case
                            lambda*-formals
                            expand-simple-lambda
                            lambda-formals
                            ellipsis?
                            expand-void
                            eval-local-transformer
                            expand-local-syntax
                            expand-body
                            expand-macro
                            expand-application
                            expand-expr
                            expand
                            syntax-type
                            parse-when-list
                            expand-install-global
                            expand-top-sequence
                            expand-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            with-transformer-environment
                            transformer-environment
                            resolve-identifier
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("5k"
                           "5j"
                           "5i"
                           "5h"
                           "5g"
                           "5f"
                           "5e"
                           "5d"
                           "5c"
                           "5b"
                           "5a"
                           "59"
                           "58"
                           "57"
                           "56"
                           "55"
                           "54"
                           "53"
                           "52"
                           "51"
                           "50"
                           "4z"
                           "4y"
                           "4x"
                           "4w"
                           "4v"
                           "4u"
                           "4t"
                           "4s"
                           "4r"
                           "4q"
                           "4p"
                           "4o"
                           "4n"
                           "4m"
                           "4l"
                           "4k"
                           "4j"
                           "4i"
                           "4h"
                           "4g"
                           "4f"
                           "4e"
                           "4d"
                           "4c"
                           "4b"
                           "4a"
                           "49"
                           "48"
                           "47"
                           "46"
                           "45"
                           "44"
                           "43"
                           "42"
                           "41"
                           "40"
                           "3z"
                           "3y"
                           "3x"
                           "3w"
                           "3v"
                           "3u"
                           "3t"
                           "3s"
                           "3r"
                           "3q"
                           "3p"
                           "3o"
                           "3n"
                           "3m"
                           "3l"
                           "3k"
                           "3j"
                           "3i"
                           "3h"
                           "3g"
                           "3f"
                           "3e"
                           "3d"
                           "3c"
                           "3b"
                           "3a"
                           "39"
                           "38"
                           "37"
                           "36"
                           "35"
                           "34"
                           "33"
                           "32"
                           "31"
                           "30"
                           "2z"
                           "2y"
                           "2x"
                           "2w"
                           "2v"
                           "2u"
                           "2t"
                           "2s"
                           "2r"
                           "2q"
                           "2p"
                           "2o"
                           "2n"
                           "2m"
                           "2l"
                           "2k"
                           "2j"
                           "2i"
                           "2h"
                           "2g"
                           "2f"
                           "2e"
                           "2d"
                           "2c"
                           "2b"
                           "2a"
                           "29"
                           "28"
                           "27"
                           "26"
                           "25"
                           "24"
                           "23"
                           "22"
                           "21"
                           "20"
                           "1z"
                           "1y"
                           "1x"
                           "1w"
                           "1v"
                           "1u"
                           "1t"
                           "1s"
                           "1r"
                           "1q"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("8" "7" "6")))
                       (hygiene guile))
                    '(())))
             #f)
           #f)))
     (#{lambda-formals 2787}#
       (lambda (#{orig-args 21470}#)
         (letrec*
           ((#{req 21471}#
              (lambda (#{args 21475}# #{rreq 21476}#)
                (let ((#{tmp 21478}# ($sc-dispatch #{args 21475}# '())))
                  (if #{tmp 21478}#
                    (@apply
                      (lambda ()
                        (#{check 21472}# (reverse #{rreq 21476}#) #f))
                      #{tmp 21478}#)
                    (let ((#{tmp 21601}#
                            ($sc-dispatch #{args 21475}# '(any . any))))
                      (if (if #{tmp 21601}#
                            (@apply
                              (lambda (#{a 21605}# #{b 21606}#)
                                (if (symbol? #{a 21605}#)
                                  #t
                                  (if (if (vector? #{a 21605}#)
                                        (if (= (vector-length #{a 21605}#) 4)
                                          (eq? (vector-ref #{a 21605}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 21605}# 1))
                                    #f)))
                              #{tmp 21601}#)
                            #f)
                        (@apply
                          (lambda (#{a 21633}# #{b 21634}#)
                            (#{req 21471}#
                              #{b 21634}#
                              (cons #{a 21633}# #{rreq 21476}#)))
                          #{tmp 21601}#)
                        (let ((#{tmp 21635}# (list #{args 21475}#)))
                          (if (@apply
                                (lambda (#{r 21637}#)
                                  (if (symbol? #{r 21637}#)
                                    #t
                                    (if (if (vector? #{r 21637}#)
                                          (if (= (vector-length #{r 21637}#) 4)
                                            (eq? (vector-ref #{r 21637}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{r 21637}# 1))
                                      #f)))
                                #{tmp 21635}#)
                            (@apply
                              (lambda (#{r 21667}#)
                                (#{check 21472}#
                                  (reverse #{rreq 21476}#)
                                  #{r 21667}#))
                              #{tmp 21635}#)
                            (syntax-violation
                              'lambda
                              "invalid argument list"
                              #{orig-args 21470}#
                              #{args 21475}#)))))))))
            (#{check 21472}#
              (lambda (#{req 21798}# #{rest 21799}#)
                (if (#{distinct-bound-ids? 2769}#
                      (if #{rest 21799}#
                        (cons #{rest 21799}# #{req 21798}#)
                        #{req 21798}#))
                  (values #{req 21798}# #f #{rest 21799}# #f)
                  (syntax-violation
                    'lambda
                    "duplicate identifier in argument list"
                    #{orig-args 21470}#)))))
           (#{req 21471}# #{orig-args 21470}# '()))))
     (#{expand-simple-lambda 2788}#
       (lambda (#{e 21915}#
                #{r 21916}#
                #{w 21917}#
                #{s 21918}#
                #{mod 21919}#
                #{req 21920}#
                #{rest 21921}#
                #{meta 21922}#
                #{body 21923}#)
         (let ((#{ids 21924}#
                 (if #{rest 21921}#
                   (append #{req 21920}# (list #{rest 21921}#))
                   #{req 21920}#)))
           (let ((#{vars 21925}#
                   (map #{gen-var 2792}# #{ids 21924}#)))
             (let ((#{labels 21926}#
                     (#{gen-labels 2746}# #{ids 21924}#)))
               (#{build-simple-lambda 2719}#
                 #{s 21918}#
                 (map syntax->datum #{req 21920}#)
                 (if #{rest 21921}#
                   (syntax->datum #{rest 21921}#)
                   #f)
                 #{vars 21925}#
                 #{meta 21922}#
                 (#{expand-body 2782}#
                   #{body 21923}#
                   (#{wrap 2771}#
                     (begin
                       (if (if (pair? #{e 21915}#) #{s 21918}# #f)
                         (set-source-properties! #{e 21915}# #{s 21918}#))
                       #{e 21915}#)
                     #{w 21917}#
                     #{mod 21919}#)
                   (#{extend-var-env 2738}#
                     #{labels 21926}#
                     #{vars 21925}#
                     #{r 21916}#)
                   (#{make-binding-wrap 2757}#
                     #{ids 21924}#
                     #{labels 21926}#
                     #{w 21917}#)
                   #{mod 21919}#)))))))
     (#{lambda*-formals 2789}#
       (lambda (#{orig-args 22198}#)
         (letrec*
           ((#{req 22199}#
              (lambda (#{args 22206}# #{rreq 22207}#)
                (let ((#{tmp 22209}# ($sc-dispatch #{args 22206}# '())))
                  (if #{tmp 22209}#
                    (@apply
                      (lambda ()
                        (#{check 22203}#
                          (reverse #{rreq 22207}#)
                          '()
                          #f
                          '()))
                      #{tmp 22209}#)
                    (let ((#{tmp 22215}#
                            ($sc-dispatch #{args 22206}# '(any . any))))
                      (if (if #{tmp 22215}#
                            (@apply
                              (lambda (#{a 22219}# #{b 22220}#)
                                (if (symbol? #{a 22219}#)
                                  #t
                                  (if (if (vector? #{a 22219}#)
                                        (if (= (vector-length #{a 22219}#) 4)
                                          (eq? (vector-ref #{a 22219}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 22219}# 1))
                                    #f)))
                              #{tmp 22215}#)
                            #f)
                        (@apply
                          (lambda (#{a 22247}# #{b 22248}#)
                            (#{req 22199}#
                              #{b 22248}#
                              (cons #{a 22247}# #{rreq 22207}#)))
                          #{tmp 22215}#)
                        (let ((#{tmp 22249}#
                                ($sc-dispatch #{args 22206}# '(any . any))))
                          (if (if #{tmp 22249}#
                                (@apply
                                  (lambda (#{a 22253}# #{b 22254}#)
                                    (eq? (syntax->datum #{a 22253}#)
                                         #:optional))
                                  #{tmp 22249}#)
                                #f)
                            (@apply
                              (lambda (#{a 22255}# #{b 22256}#)
                                (#{opt 22200}#
                                  #{b 22256}#
                                  (reverse #{rreq 22207}#)
                                  '()))
                              #{tmp 22249}#)
                            (let ((#{tmp 22259}#
                                    ($sc-dispatch
                                      #{args 22206}#
                                      '(any . any))))
                              (if (if #{tmp 22259}#
                                    (@apply
                                      (lambda (#{a 22263}# #{b 22264}#)
                                        (eq? (syntax->datum #{a 22263}#)
                                             #:key))
                                      #{tmp 22259}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 22265}# #{b 22266}#)
                                    (#{key 22201}#
                                      #{b 22266}#
                                      (reverse #{rreq 22207}#)
                                      '()
                                      '()))
                                  #{tmp 22259}#)
                                (let ((#{tmp 22269}#
                                        ($sc-dispatch
                                          #{args 22206}#
                                          '(any any))))
                                  (if (if #{tmp 22269}#
                                        (@apply
                                          (lambda (#{a 22273}# #{b 22274}#)
                                            (eq? (syntax->datum #{a 22273}#)
                                                 #:rest))
                                          #{tmp 22269}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a 22275}# #{b 22276}#)
                                        (#{rest 22202}#
                                          #{b 22276}#
                                          (reverse #{rreq 22207}#)
                                          '()
                                          '()))
                                      #{tmp 22269}#)
                                    (let ((#{tmp 22279}#
                                            (list #{args 22206}#)))
                                      (if (@apply
                                            (lambda (#{r 22281}#)
                                              (if (symbol? #{r 22281}#)
                                                #t
                                                (if (if (vector? #{r 22281}#)
                                                      (if (= (vector-length
                                                               #{r 22281}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r 22281}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref #{r 22281}# 1))
                                                  #f)))
                                            #{tmp 22279}#)
                                        (@apply
                                          (lambda (#{r 22311}#)
                                            (#{rest 22202}#
                                              #{r 22311}#
                                              (reverse #{rreq 22207}#)
                                              '()
                                              '()))
                                          #{tmp 22279}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid argument list"
                                          #{orig-args 22198}#
                                          #{args 22206}#)))))))))))))))
            (#{opt 22200}#
              (lambda (#{args 22330}# #{req 22331}# #{ropt 22332}#)
                (let ((#{tmp 22334}# ($sc-dispatch #{args 22330}# '())))
                  (if #{tmp 22334}#
                    (@apply
                      (lambda ()
                        (#{check 22203}#
                          #{req 22331}#
                          (reverse #{ropt 22332}#)
                          #f
                          '()))
                      #{tmp 22334}#)
                    (let ((#{tmp 22340}#
                            ($sc-dispatch #{args 22330}# '(any . any))))
                      (if (if #{tmp 22340}#
                            (@apply
                              (lambda (#{a 22344}# #{b 22345}#)
                                (if (symbol? #{a 22344}#)
                                  #t
                                  (if (if (vector? #{a 22344}#)
                                        (if (= (vector-length #{a 22344}#) 4)
                                          (eq? (vector-ref #{a 22344}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 22344}# 1))
                                    #f)))
                              #{tmp 22340}#)
                            #f)
                        (@apply
                          (lambda (#{a 22372}# #{b 22373}#)
                            (#{opt 22200}#
                              #{b 22373}#
                              #{req 22331}#
                              (cons (cons #{a 22372}#
                                          '(#(syntax-object
                                              #f
                                              ((top)
                                               #(ribcage
                                                 #(a b)
                                                 #((top) (top))
                                                 #("q2" "q3"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(args req ropt)
                                                 #((top) (top) (top))
                                                 #("px" "py" "pz"))
                                               #(ribcage
                                                 (check rest key opt req)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("pb" "pa" "p9" "p8" "p7"))
                                               #(ribcage
                                                 #(orig-args)
                                                 #((top))
                                                 #("p6"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   expand-lambda-case
                                                   lambda*-formals
                                                   expand-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   expand-void
                                                   eval-local-transformer
                                                   expand-local-syntax
                                                   expand-body
                                                   expand-macro
                                                   expand-application
                                                   expand-expr
                                                   expand
                                                   syntax-type
                                                   parse-when-list
                                                   expand-install-global
                                                   expand-top-sequence
                                                   expand-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   with-transformer-environment
                                                   transformer-environment
                                                   resolve-identifier
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("5k"
                                                  "5j"
                                                  "5i"
                                                  "5h"
                                                  "5g"
                                                  "5f"
                                                  "5e"
                                                  "5d"
                                                  "5c"
                                                  "5b"
                                                  "5a"
                                                  "59"
                                                  "58"
                                                  "57"
                                                  "56"
                                                  "55"
                                                  "54"
                                                  "53"
                                                  "52"
                                                  "51"
                                                  "50"
                                                  "4z"
                                                  "4y"
                                                  "4x"
                                                  "4w"
                                                  "4v"
                                                  "4u"
                                                  "4t"
                                                  "4s"
                                                  "4r"
                                                  "4q"
                                                  "4p"
                                                  "4o"
                                                  "4n"
                                                  "4m"
                                                  "4l"
                                                  "4k"
                                                  "4j"
                                                  "4i"
                                                  "4h"
                                                  "4g"
                                                  "4f"
                                                  "4e"
                                                  "4d"
                                                  "4c"
                                                  "4b"
                                                  "4a"
                                                  "49"
                                                  "48"
                                                  "47"
                                                  "46"
                                                  "45"
                                                  "44"
                                                  "43"
                                                  "42"
                                                  "41"
                                                  "40"
                                                  "3z"
                                                  "3y"
                                                  "3x"
                                                  "3w"
                                                  "3v"
                                                  "3u"
                                                  "3t"
                                                  "3s"
                                                  "3r"
                                                  "3q"
                                                  "3p"
                                                  "3o"
                                                  "3n"
                                                  "3m"
                                                  "3l"
                                                  "3k"
                                                  "3j"
                                                  "3i"
                                                  "3h"
                                                  "3g"
                                                  "3f"
                                                  "3e"
                                                  "3d"
                                                  "3c"
                                                  "3b"
                                                  "3a"
                                                  "39"
                                                  "38"
                                                  "37"
                                                  "36"
                                                  "35"
                                                  "34"
                                                  "33"
                                                  "32"
                                                  "31"
                                                  "30"
                                                  "2z"
                                                  "2y"
                                                  "2x"
                                                  "2w"
                                                  "2v"
                                                  "2u"
                                                  "2t"
                                                  "2s"
                                                  "2r"
                                                  "2q"
                                                  "2p"
                                                  "2o"
                                                  "2n"
                                                  "2m"
                                                  "2l"
                                                  "2k"
                                                  "2j"
                                                  "2i"
                                                  "2h"
                                                  "2g"
                                                  "2f"
                                                  "2e"
                                                  "2d"
                                                  "2c"
                                                  "2b"
                                                  "2a"
                                                  "29"
                                                  "28"
                                                  "27"
                                                  "26"
                                                  "25"
                                                  "24"
                                                  "23"
                                                  "22"
                                                  "21"
                                                  "20"
                                                  "1z"
                                                  "1y"
                                                  "1x"
                                                  "1w"
                                                  "1v"
                                                  "1u"
                                                  "1t"
                                                  "1s"
                                                  "1r"
                                                  "1q"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("8" "7" "6")))
                                              (hygiene guile))))
                                    #{ropt 22332}#)))
                          #{tmp 22340}#)
                        (let ((#{tmp 22374}#
                                ($sc-dispatch
                                  #{args 22330}#
                                  '((any any) . any))))
                          (if (if #{tmp 22374}#
                                (@apply
                                  (lambda (#{a 22378}#
                                           #{init 22379}#
                                           #{b 22380}#)
                                    (if (symbol? #{a 22378}#)
                                      #t
                                      (if (if (vector? #{a 22378}#)
                                            (if (= (vector-length #{a 22378}#)
                                                   4)
                                              (eq? (vector-ref #{a 22378}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{a 22378}# 1))
                                        #f)))
                                  #{tmp 22374}#)
                                #f)
                            (@apply
                              (lambda (#{a 22407}# #{init 22408}# #{b 22409}#)
                                (#{opt 22200}#
                                  #{b 22409}#
                                  #{req 22331}#
                                  (cons (list #{a 22407}# #{init 22408}#)
                                        #{ropt 22332}#)))
                              #{tmp 22374}#)
                            (let ((#{tmp 22410}#
                                    ($sc-dispatch
                                      #{args 22330}#
                                      '(any . any))))
                              (if (if #{tmp 22410}#
                                    (@apply
                                      (lambda (#{a 22414}# #{b 22415}#)
                                        (eq? (syntax->datum #{a 22414}#)
                                             #:key))
                                      #{tmp 22410}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 22416}# #{b 22417}#)
                                    (#{key 22201}#
                                      #{b 22417}#
                                      #{req 22331}#
                                      (reverse #{ropt 22332}#)
                                      '()))
                                  #{tmp 22410}#)
                                (let ((#{tmp 22420}#
                                        ($sc-dispatch
                                          #{args 22330}#
                                          '(any any))))
                                  (if (if #{tmp 22420}#
                                        (@apply
                                          (lambda (#{a 22424}# #{b 22425}#)
                                            (eq? (syntax->datum #{a 22424}#)
                                                 #:rest))
                                          #{tmp 22420}#)
                                        #f)
                                    (@apply
                                      (lambda (#{a 22426}# #{b 22427}#)
                                        (#{rest 22202}#
                                          #{b 22427}#
                                          #{req 22331}#
                                          (reverse #{ropt 22332}#)
                                          '()))
                                      #{tmp 22420}#)
                                    (let ((#{tmp 22430}#
                                            (list #{args 22330}#)))
                                      (if (@apply
                                            (lambda (#{r 22432}#)
                                              (if (symbol? #{r 22432}#)
                                                #t
                                                (if (if (vector? #{r 22432}#)
                                                      (if (= (vector-length
                                                               #{r 22432}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{r 22432}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (symbol?
                                                    (vector-ref #{r 22432}# 1))
                                                  #f)))
                                            #{tmp 22430}#)
                                        (@apply
                                          (lambda (#{r 22462}#)
                                            (#{rest 22202}#
                                              #{r 22462}#
                                              #{req 22331}#
                                              (reverse #{ropt 22332}#)
                                              '()))
                                          #{tmp 22430}#)
                                        (syntax-violation
                                          'lambda*
                                          "invalid optional argument list"
                                          #{orig-args 22198}#
                                          #{args 22330}#)))))))))))))))
            (#{key 22201}#
              (lambda (#{args 22481}#
                       #{req 22482}#
                       #{opt 22483}#
                       #{rkey 22484}#)
                (let ((#{tmp 22486}# ($sc-dispatch #{args 22481}# '())))
                  (if #{tmp 22486}#
                    (@apply
                      (lambda ()
                        (#{check 22203}#
                          #{req 22482}#
                          #{opt 22483}#
                          #f
                          (cons #f (reverse #{rkey 22484}#))))
                      #{tmp 22486}#)
                    (let ((#{tmp 22492}#
                            ($sc-dispatch #{args 22481}# '(any . any))))
                      (if (if #{tmp 22492}#
                            (@apply
                              (lambda (#{a 22496}# #{b 22497}#)
                                (if (symbol? #{a 22496}#)
                                  #t
                                  (if (if (vector? #{a 22496}#)
                                        (if (= (vector-length #{a 22496}#) 4)
                                          (eq? (vector-ref #{a 22496}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{a 22496}# 1))
                                    #f)))
                              #{tmp 22492}#)
                            #f)
                        (@apply
                          (lambda (#{a 22524}# #{b 22525}#)
                            (let ((#{tmp 22526}#
                                    (symbol->keyword
                                      (syntax->datum #{a 22524}#))))
                              (#{key 22201}#
                                #{b 22525}#
                                #{req 22482}#
                                #{opt 22483}#
                                (cons (cons #{tmp 22526}#
                                            (cons #{a 22524}#
                                                  '(#(syntax-object
                                                      #f
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(k)
                                                         #((top))
                                                         #("qt"))
                                                       #(ribcage
                                                         #(a b)
                                                         #((top) (top))
                                                         #("qr" "qs"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(args req opt rkey)
                                                         #((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                         #("ql"
                                                           "qm"
                                                           "qn"
                                                           "qo"))
                                                       #(ribcage
                                                         (check rest
                                                                key
                                                                opt
                                                                req)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("pb"
                                                          "pa"
                                                          "p9"
                                                          "p8"
                                                          "p7"))
                                                       #(ribcage
                                                         #(orig-args)
                                                         #((top))
                                                         #("p6"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("5k"
                                                          "5j"
                                                          "5i"
                                                          "5h"
                                                          "5g"
                                                          "5f"
                                                          "5e"
                                                          "5d"
                                                          "5c"
                                                          "5b"
                                                          "5a"
                                                          "59"
                                                          "58"
                                                          "57"
                                                          "56"
                                                          "55"
                                                          "54"
                                                          "53"
                                                          "52"
                                                          "51"
                                                          "50"
                                                          "4z"
                                                          "4y"
                                                          "4x"
                                                          "4w"
                                                          "4v"
                                                          "4u"
                                                          "4t"
                                                          "4s"
                                                          "4r"
                                                          "4q"
                                                          "4p"
                                                          "4o"
                                                          "4n"
                                                          "4m"
                                                          "4l"
                                                          "4k"
                                                          "4j"
                                                          "4i"
                                                          "4h"
                                                          "4g"
                                                          "4f"
                                                          "4e"
                                                          "4d"
                                                          "4c"
                                                          "4b"
                                                          "4a"
                                                          "49"
                                                          "48"
                                                          "47"
                                                          "46"
                                                          "45"
                                                          "44"
                                                          "43"
                                                          "42"
                                                          "41"
                                                          "40"
                                                          "3z"
                                                          "3y"
                                                          "3x"
                                                          "3w"
                                                          "3v"
                                                          "3u"
                                                          "3t"
                                                          "3s"
                                                          "3r"
                                                          "3q"
                                                          "3p"
                                                          "3o"
                                                          "3n"
                                                          "3m"
                                                          "3l"
                                                          "3k"
                                                          "3j"
                                                          "3i"
                                                          "3h"
                                                          "3g"
                                                          "3f"
                                                          "3e"
                                                          "3d"
                                                          "3c"
                                                          "3b"
                                                          "3a"
                                                          "39"
                                                          "38"
                                                          "37"
                                                          "36"
                                                          "35"
                                                          "34"
                                                          "33"
                                                          "32"
                                                          "31"
                                                          "30"
                                                          "2z"
                                                          "2y"
                                                          "2x"
                                                          "2w"
                                                          "2v"
                                                          "2u"
                                                          "2t"
                                                          "2s"
                                                          "2r"
                                                          "2q"
                                                          "2p"
                                                          "2o"
                                                          "2n"
                                                          "2m"
                                                          "2l"
                                                          "2k"
                                                          "2j"
                                                          "2i"
                                                          "2h"
                                                          "2g"
                                                          "2f"
                                                          "2e"
                                                          "2d"
                                                          "2c"
                                                          "2b"
                                                          "2a"
                                                          "29"
                                                          "28"
                                                          "27"
                                                          "26"
                                                          "25"
                                                          "24"
                                                          "23"
                                                          "22"
                                                          "21"
                                                          "20"
                                                          "1z"
                                                          "1y"
                                                          "1x"
                                                          "1w"
                                                          "1v"
                                                          "1u"
                                                          "1t"
                                                          "1s"
                                                          "1r"
                                                          "1q"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("8" "7" "6")))
                                                      (hygiene guile)))))
                                      #{rkey 22484}#))))
                          #{tmp 22492}#)
                        (let ((#{tmp 22529}#
                                ($sc-dispatch
                                  #{args 22481}#
                                  '((any any) . any))))
                          (if (if #{tmp 22529}#
                                (@apply
                                  (lambda (#{a 22533}#
                                           #{init 22534}#
                                           #{b 22535}#)
                                    (if (symbol? #{a 22533}#)
                                      #t
                                      (if (if (vector? #{a 22533}#)
                                            (if (= (vector-length #{a 22533}#)
                                                   4)
                                              (eq? (vector-ref #{a 22533}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{a 22533}# 1))
                                        #f)))
                                  #{tmp 22529}#)
                                #f)
                            (@apply
                              (lambda (#{a 22562}# #{init 22563}# #{b 22564}#)
                                (let ((#{tmp 22565}#
                                        (symbol->keyword
                                          (syntax->datum #{a 22562}#))))
                                  (#{key 22201}#
                                    #{b 22564}#
                                    #{req 22482}#
                                    #{opt 22483}#
                                    (cons (list #{tmp 22565}#
                                                #{a 22562}#
                                                #{init 22563}#)
                                          #{rkey 22484}#))))
                              #{tmp 22529}#)
                            (let ((#{tmp 22568}#
                                    ($sc-dispatch
                                      #{args 22481}#
                                      '((any any any) . any))))
                              (if (if #{tmp 22568}#
                                    (@apply
                                      (lambda (#{a 22572}#
                                               #{init 22573}#
                                               #{k 22574}#
                                               #{b 22575}#)
                                        (if (if (symbol? #{a 22572}#)
                                              #t
                                              (if (if (vector? #{a 22572}#)
                                                    (if (= (vector-length
                                                             #{a 22572}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{a 22572}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{a 22572}# 1))
                                                #f))
                                          (keyword?
                                            (syntax->datum #{k 22574}#))
                                          #f))
                                      #{tmp 22568}#)
                                    #f)
                                (@apply
                                  (lambda (#{a 22602}#
                                           #{init 22603}#
                                           #{k 22604}#
                                           #{b 22605}#)
                                    (#{key 22201}#
                                      #{b 22605}#
                                      #{req 22482}#
                                      #{opt 22483}#
                                      (cons (list #{k 22604}#
                                                  #{a 22602}#
                                                  #{init 22603}#)
                                            #{rkey 22484}#)))
                                  #{tmp 22568}#)
                                (let ((#{tmp 22606}#
                                        ($sc-dispatch #{args 22481}# '(any))))
                                  (if (if #{tmp 22606}#
                                        (@apply
                                          (lambda (#{aok 22610}#)
                                            (eq? (syntax->datum #{aok 22610}#)
                                                 #:allow-other-keys))
                                          #{tmp 22606}#)
                                        #f)
                                    (@apply
                                      (lambda (#{aok 22611}#)
                                        (#{check 22203}#
                                          #{req 22482}#
                                          #{opt 22483}#
                                          #f
                                          (cons #t (reverse #{rkey 22484}#))))
                                      #{tmp 22606}#)
                                    (let ((#{tmp 22614}#
                                            ($sc-dispatch
                                              #{args 22481}#
                                              '(any any any))))
                                      (if (if #{tmp 22614}#
                                            (@apply
                                              (lambda (#{aok 22618}#
                                                       #{a 22619}#
                                                       #{b 22620}#)
                                                (if (eq? (syntax->datum
                                                           #{aok 22618}#)
                                                         #:allow-other-keys)
                                                  (eq? (syntax->datum
                                                         #{a 22619}#)
                                                       #:rest)
                                                  #f))
                                              #{tmp 22614}#)
                                            #f)
                                        (@apply
                                          (lambda (#{aok 22621}#
                                                   #{a 22622}#
                                                   #{b 22623}#)
                                            (#{rest 22202}#
                                              #{b 22623}#
                                              #{req 22482}#
                                              #{opt 22483}#
                                              (cons #t
                                                    (reverse #{rkey 22484}#))))
                                          #{tmp 22614}#)
                                        (let ((#{tmp 22626}#
                                                ($sc-dispatch
                                                  #{args 22481}#
                                                  '(any . any))))
                                          (if (if #{tmp 22626}#
                                                (@apply
                                                  (lambda (#{aok 22630}#
                                                           #{r 22631}#)
                                                    (if (eq? (syntax->datum
                                                               #{aok 22630}#)
                                                             #:allow-other-keys)
                                                      (if (symbol? #{r 22631}#)
                                                        #t
                                                        (if (if (vector?
                                                                  #{r 22631}#)
                                                              (if (= (vector-length
                                                                       #{r 22631}#)
                                                                     4)
                                                                (eq? (vector-ref
                                                                       #{r 22631}#
                                                                       0)
                                                                     'syntax-object)
                                                                #f)
                                                              #f)
                                                          (symbol?
                                                            (vector-ref
                                                              #{r 22631}#
                                                              1))
                                                          #f))
                                                      #f))
                                                  #{tmp 22626}#)
                                                #f)
                                            (@apply
                                              (lambda (#{aok 22658}#
                                                       #{r 22659}#)
                                                (#{rest 22202}#
                                                  #{r 22659}#
                                                  #{req 22482}#
                                                  #{opt 22483}#
                                                  (cons #t
                                                        (reverse
                                                          #{rkey 22484}#))))
                                              #{tmp 22626}#)
                                            (let ((#{tmp 22662}#
                                                    ($sc-dispatch
                                                      #{args 22481}#
                                                      '(any any))))
                                              (if (if #{tmp 22662}#
                                                    (@apply
                                                      (lambda (#{a 22666}#
                                                               #{b 22667}#)
                                                        (eq? (syntax->datum
                                                               #{a 22666}#)
                                                             #:rest))
                                                      #{tmp 22662}#)
                                                    #f)
                                                (@apply
                                                  (lambda (#{a 22668}#
                                                           #{b 22669}#)
                                                    (#{rest 22202}#
                                                      #{b 22669}#
                                                      #{req 22482}#
                                                      #{opt 22483}#
                                                      (cons #f
                                                            (reverse
                                                              #{rkey 22484}#))))
                                                  #{tmp 22662}#)
                                                (let ((#{tmp 22672}#
                                                        (list #{args 22481}#)))
                                                  (if (@apply
                                                        (lambda (#{r 22674}#)
                                                          (if (symbol?
                                                                #{r 22674}#)
                                                            #t
                                                            (if (if (vector?
                                                                      #{r 22674}#)
                                                                  (if (= (vector-length
                                                                           #{r 22674}#)
                                                                         4)
                                                                    (eq? (vector-ref
                                                                           #{r 22674}#
                                                                           0)
                                                                         'syntax-object)
                                                                    #f)
                                                                  #f)
                                                              (symbol?
                                                                (vector-ref
                                                                  #{r 22674}#
                                                                  1))
                                                              #f)))
                                                        #{tmp 22672}#)
                                                    (@apply
                                                      (lambda (#{r 22704}#)
                                                        (#{rest 22202}#
                                                          #{r 22704}#
                                                          #{req 22482}#
                                                          #{opt 22483}#
                                                          (cons #f
                                                                (reverse
                                                                  #{rkey 22484}#))))
                                                      #{tmp 22672}#)
                                                    (syntax-violation
                                                      'lambda*
                                                      "invalid keyword argument list"
                                                      #{orig-args 22198}#
                                                      #{args 22481}#)))))))))))))))))))))
            (#{rest 22202}#
              (lambda (#{args 22732}#
                       #{req 22733}#
                       #{opt 22734}#
                       #{kw 22735}#)
                (let ((#{tmp 22737}# (list #{args 22732}#)))
                  (if (@apply
                        (lambda (#{r 22739}#)
                          (if (symbol? #{r 22739}#)
                            #t
                            (if (if (vector? #{r 22739}#)
                                  (if (= (vector-length #{r 22739}#) 4)
                                    (eq? (vector-ref #{r 22739}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{r 22739}# 1))
                              #f)))
                        #{tmp 22737}#)
                    (@apply
                      (lambda (#{r 22769}#)
                        (#{check 22203}#
                          #{req 22733}#
                          #{opt 22734}#
                          #{r 22769}#
                          #{kw 22735}#))
                      #{tmp 22737}#)
                    (syntax-violation
                      'lambda*
                      "invalid rest argument"
                      #{orig-args 22198}#
                      #{args 22732}#)))))
            (#{check 22203}#
              (lambda (#{req 22773}#
                       #{opt 22774}#
                       #{rest 22775}#
                       #{kw 22776}#)
                (if (#{distinct-bound-ids? 2769}#
                      (append
                        #{req 22773}#
                        (map car #{opt 22774}#)
                        (if #{rest 22775}# (list #{rest 22775}#) '())
                        (if (pair? #{kw 22776}#)
                          (map cadr (cdr #{kw 22776}#))
                          '())))
                  (values
                    #{req 22773}#
                    #{opt 22774}#
                    #{rest 22775}#
                    #{kw 22776}#)
                  (syntax-violation
                    'lambda*
                    "duplicate identifier in argument list"
                    #{orig-args 22198}#)))))
           (#{req 22199}# #{orig-args 22198}# '()))))
     (#{expand-lambda-case 2790}#
       (lambda (#{e 22892}#
                #{r 22893}#
                #{w 22894}#
                #{s 22895}#
                #{mod 22896}#
                #{get-formals 22897}#
                #{clauses 22898}#)
         (letrec*
           ((#{parse-req 22899}#
              (lambda (#{req 23026}#
                       #{opt 23027}#
                       #{rest 23028}#
                       #{kw 23029}#
                       #{body 23030}#)
                (let ((#{vars 23031}#
                        (map #{gen-var 2792}# #{req 23026}#))
                      (#{labels 23032}#
                        (#{gen-labels 2746}# #{req 23026}#)))
                  (let ((#{r* 23033}#
                          (#{extend-var-env 2738}#
                            #{labels 23032}#
                            #{vars 23031}#
                            #{r 22893}#))
                        (#{w* 23034}#
                          (#{make-binding-wrap 2757}#
                            #{req 23026}#
                            #{labels 23032}#
                            #{w 22894}#)))
                    (#{parse-opt 22900}#
                      (map syntax->datum #{req 23026}#)
                      #{opt 23027}#
                      #{rest 23028}#
                      #{kw 23029}#
                      #{body 23030}#
                      (reverse #{vars 23031}#)
                      #{r* 23033}#
                      #{w* 23034}#
                      '()
                      '())))))
            (#{parse-opt 22900}#
              (lambda (#{req 23210}#
                       #{opt 23211}#
                       #{rest 23212}#
                       #{kw 23213}#
                       #{body 23214}#
                       #{vars 23215}#
                       #{r* 23216}#
                       #{w* 23217}#
                       #{out 23218}#
                       #{inits 23219}#)
                (if (pair? #{opt 23211}#)
                  (let ((#{tmp 23220}# (car #{opt 23211}#)))
                    (let ((#{tmp 23221}#
                            ($sc-dispatch #{tmp 23220}# '(any any))))
                      (if #{tmp 23221}#
                        (@apply
                          (lambda (#{id 23223}# #{i 23224}#)
                            (let ((#{v 23225}#
                                    (let ((#{id 23233}#
                                            (if (if (vector? #{id 23223}#)
                                                  (if (= (vector-length
                                                           #{id 23223}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id 23223}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{id 23223}# 1)
                                              #{id 23223}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string #{id 23233}#)
                                          " ")))))
                              (let ((#{l 23226}#
                                      (#{gen-labels 2746}#
                                        (list #{v 23225}#))))
                                (let ((#{r** 23227}#
                                        (#{extend-var-env 2738}#
                                          #{l 23226}#
                                          (list #{v 23225}#)
                                          #{r* 23216}#)))
                                  (let ((#{w** 23228}#
                                          (#{make-binding-wrap 2757}#
                                            (list #{id 23223}#)
                                            #{l 23226}#
                                            #{w* 23217}#)))
                                    (#{parse-opt 22900}#
                                      #{req 23210}#
                                      (cdr #{opt 23211}#)
                                      #{rest 23212}#
                                      #{kw 23213}#
                                      #{body 23214}#
                                      (cons #{v 23225}# #{vars 23215}#)
                                      #{r** 23227}#
                                      #{w** 23228}#
                                      (cons (syntax->datum #{id 23223}#)
                                            #{out 23218}#)
                                      (cons (#{expand 2778}#
                                              #{i 23224}#
                                              #{r* 23216}#
                                              #{w* 23217}#
                                              #{mod 22896}#)
                                            #{inits 23219}#)))))))
                          #{tmp 23221}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 23220}#))))
                  (if #{rest 23212}#
                    (let ((#{v 23462}#
                            (let ((#{id 23472}#
                                    (if (if (vector? #{rest 23212}#)
                                          (if (= (vector-length #{rest 23212}#)
                                                 4)
                                            (eq? (vector-ref #{rest 23212}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (vector-ref #{rest 23212}# 1)
                                      #{rest 23212}#)))
                              (gensym
                                (string-append
                                  (symbol->string #{id 23472}#)
                                  " ")))))
                      (let ((#{l 23463}#
                              (#{gen-labels 2746}# (list #{v 23462}#))))
                        (let ((#{r* 23464}#
                                (#{extend-var-env 2738}#
                                  #{l 23463}#
                                  (list #{v 23462}#)
                                  #{r* 23216}#)))
                          (let ((#{w* 23465}#
                                  (#{make-binding-wrap 2757}#
                                    (list #{rest 23212}#)
                                    #{l 23463}#
                                    #{w* 23217}#)))
                            (#{parse-kw 22901}#
                              #{req 23210}#
                              (if (pair? #{out 23218}#)
                                (reverse #{out 23218}#)
                                #f)
                              (syntax->datum #{rest 23212}#)
                              (if (pair? #{kw 23213}#)
                                (cdr #{kw 23213}#)
                                #{kw 23213}#)
                              #{body 23214}#
                              (cons #{v 23462}# #{vars 23215}#)
                              #{r* 23464}#
                              #{w* 23465}#
                              (if (pair? #{kw 23213}#) (car #{kw 23213}#) #f)
                              '()
                              #{inits 23219}#)))))
                    (#{parse-kw 22901}#
                      #{req 23210}#
                      (if (pair? #{out 23218}#)
                        (reverse #{out 23218}#)
                        #f)
                      #f
                      (if (pair? #{kw 23213}#)
                        (cdr #{kw 23213}#)
                        #{kw 23213}#)
                      #{body 23214}#
                      #{vars 23215}#
                      #{r* 23216}#
                      #{w* 23217}#
                      (if (pair? #{kw 23213}#) (car #{kw 23213}#) #f)
                      '()
                      #{inits 23219}#)))))
            (#{parse-kw 22901}#
              (lambda (#{req 23634}#
                       #{opt 23635}#
                       #{rest 23636}#
                       #{kw 23637}#
                       #{body 23638}#
                       #{vars 23639}#
                       #{r* 23640}#
                       #{w* 23641}#
                       #{aok 23642}#
                       #{out 23643}#
                       #{inits 23644}#)
                (if (pair? #{kw 23637}#)
                  (let ((#{tmp 23645}# (car #{kw 23637}#)))
                    (let ((#{tmp 23646}#
                            ($sc-dispatch #{tmp 23645}# '(any any any))))
                      (if #{tmp 23646}#
                        (@apply
                          (lambda (#{k 23648}# #{id 23649}# #{i 23650}#)
                            (let ((#{v 23651}#
                                    (let ((#{id 23659}#
                                            (if (if (vector? #{id 23649}#)
                                                  (if (= (vector-length
                                                           #{id 23649}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{id 23649}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{id 23649}# 1)
                                              #{id 23649}#)))
                                      (gensym
                                        (string-append
                                          (symbol->string #{id 23659}#)
                                          " ")))))
                              (let ((#{l 23652}#
                                      (#{gen-labels 2746}#
                                        (list #{v 23651}#))))
                                (let ((#{r** 23653}#
                                        (#{extend-var-env 2738}#
                                          #{l 23652}#
                                          (list #{v 23651}#)
                                          #{r* 23640}#)))
                                  (let ((#{w** 23654}#
                                          (#{make-binding-wrap 2757}#
                                            (list #{id 23649}#)
                                            #{l 23652}#
                                            #{w* 23641}#)))
                                    (#{parse-kw 22901}#
                                      #{req 23634}#
                                      #{opt 23635}#
                                      #{rest 23636}#
                                      (cdr #{kw 23637}#)
                                      #{body 23638}#
                                      (cons #{v 23651}# #{vars 23639}#)
                                      #{r** 23653}#
                                      #{w** 23654}#
                                      #{aok 23642}#
                                      (cons (list (syntax->datum #{k 23648}#)
                                                  (syntax->datum #{id 23649}#)
                                                  #{v 23651}#)
                                            #{out 23643}#)
                                      (cons (#{expand 2778}#
                                              #{i 23650}#
                                              #{r* 23640}#
                                              #{w* 23641}#
                                              #{mod 22896}#)
                                            #{inits 23644}#)))))))
                          #{tmp 23646}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 23645}#))))
                  (#{parse-body 22902}#
                    #{req 23634}#
                    #{opt 23635}#
                    #{rest 23636}#
                    (if (if #{aok 23642}#
                          #{aok 23642}#
                          (pair? #{out 23643}#))
                      (cons #{aok 23642}# (reverse #{out 23643}#))
                      #f)
                    #{body 23638}#
                    (reverse #{vars 23639}#)
                    #{r* 23640}#
                    #{w* 23641}#
                    (reverse #{inits 23644}#)
                    '()))))
            (#{parse-body 22902}#
              (lambda (#{req 23897}#
                       #{opt 23898}#
                       #{rest 23899}#
                       #{kw 23900}#
                       #{body 23901}#
                       #{vars 23902}#
                       #{r* 23903}#
                       #{w* 23904}#
                       #{inits 23905}#
                       #{meta 23906}#)
                (let ((#{tmp 23908}#
                        ($sc-dispatch
                          #{body 23901}#
                          '(any any . each-any))))
                  (if (if #{tmp 23908}#
                        (@apply
                          (lambda (#{docstring 23912}#
                                   #{e1 23913}#
                                   #{e2 23914}#)
                            (string? (syntax->datum #{docstring 23912}#)))
                          #{tmp 23908}#)
                        #f)
                    (@apply
                      (lambda (#{docstring 23915}# #{e1 23916}# #{e2 23917}#)
                        (#{parse-body 22902}#
                          #{req 23897}#
                          #{opt 23898}#
                          #{rest 23899}#
                          #{kw 23900}#
                          (cons #{e1 23916}# #{e2 23917}#)
                          #{vars 23902}#
                          #{r* 23903}#
                          #{w* 23904}#
                          #{inits 23905}#
                          (append
                            #{meta 23906}#
                            (list (cons 'documentation
                                        (syntax->datum
                                          #{docstring 23915}#))))))
                      #{tmp 23908}#)
                    (let ((#{tmp 23918}#
                            ($sc-dispatch
                              #{body 23901}#
                              '(#(vector #(each (any . any)))
                                any
                                .
                                each-any))))
                      (if #{tmp 23918}#
                        (@apply
                          (lambda (#{k 23922}#
                                   #{v 23923}#
                                   #{e1 23924}#
                                   #{e2 23925}#)
                            (#{parse-body 22902}#
                              #{req 23897}#
                              #{opt 23898}#
                              #{rest 23899}#
                              #{kw 23900}#
                              (cons #{e1 23924}# #{e2 23925}#)
                              #{vars 23902}#
                              #{r* 23903}#
                              #{w* 23904}#
                              #{inits 23905}#
                              (append
                                #{meta 23906}#
                                (syntax->datum
                                  (map cons #{k 23922}# #{v 23923}#)))))
                          #{tmp 23918}#)
                        (let ((#{tmp 23926}#
                                ($sc-dispatch
                                  #{body 23901}#
                                  '(any . each-any))))
                          (if #{tmp 23926}#
                            (@apply
                              (lambda (#{e1 23930}# #{e2 23931}#)
                                (values
                                  #{meta 23906}#
                                  #{req 23897}#
                                  #{opt 23898}#
                                  #{rest 23899}#
                                  #{kw 23900}#
                                  #{inits 23905}#
                                  #{vars 23902}#
                                  (#{expand-body 2782}#
                                    (cons #{e1 23930}# #{e2 23931}#)
                                    (#{wrap 2771}#
                                      (begin
                                        (if (if (pair? #{e 22892}#)
                                              #{s 22895}#
                                              #f)
                                          (set-source-properties!
                                            #{e 22892}#
                                            #{s 22895}#))
                                        #{e 22892}#)
                                      #{w 22894}#
                                      #{mod 22896}#)
                                    #{r* 23903}#
                                    #{w* 23904}#
                                    #{mod 22896}#)))
                              #{tmp 23926}#)
                            (syntax-violation
                              #f
                              "source expression failed to match any pattern"
                              #{body 23901}#))))))))))
           (let ((#{tmp 22904}#
                   ($sc-dispatch #{clauses 22898}# '())))
             (if #{tmp 22904}#
               (@apply
                 (lambda () (values '() #f))
                 #{tmp 22904}#)
               (let ((#{tmp 22908}#
                       ($sc-dispatch
                         #{clauses 22898}#
                         '((any any . each-any)
                           .
                           #(each (any any . each-any))))))
                 (if #{tmp 22908}#
                   (@apply
                     (lambda (#{args 22912}#
                              #{e1 22913}#
                              #{e2 22914}#
                              #{args* 22915}#
                              #{e1* 22916}#
                              #{e2* 22917}#)
                       (call-with-values
                         (lambda ()
                           (#{get-formals 22897}# #{args 22912}#))
                         (lambda (#{req 22918}#
                                  #{opt 22919}#
                                  #{rest 22920}#
                                  #{kw 22921}#)
                           (call-with-values
                             (lambda ()
                               (#{parse-req 22899}#
                                 #{req 22918}#
                                 #{opt 22919}#
                                 #{rest 22920}#
                                 #{kw 22921}#
                                 (cons #{e1 22913}# #{e2 22914}#)))
                             (lambda (#{meta 22982}#
                                      #{req 22983}#
                                      #{opt 22984}#
                                      #{rest 22985}#
                                      #{kw 22986}#
                                      #{inits 22987}#
                                      #{vars 22988}#
                                      #{body 22989}#)
                               (call-with-values
                                 (lambda ()
                                   (#{expand-lambda-case 2790}#
                                     #{e 22892}#
                                     #{r 22893}#
                                     #{w 22894}#
                                     #{s 22895}#
                                     #{mod 22896}#
                                     #{get-formals 22897}#
                                     (map (lambda (#{tmp 1727 22990}#
                                                   #{tmp 1726 22991}#
                                                   #{tmp 1725 22992}#)
                                            (cons #{tmp 1725 22992}#
                                                  (cons #{tmp 1726 22991}#
                                                        #{tmp 1727 22990}#)))
                                          #{e2* 22917}#
                                          #{e1* 22916}#
                                          #{args* 22915}#)))
                                 (lambda (#{meta* 22993}# #{else* 22994}#)
                                   (values
                                     (append #{meta 22982}# #{meta* 22993}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #{s 22895}#
                                       #{req 22983}#
                                       #{opt 22984}#
                                       #{rest 22985}#
                                       #{kw 22986}#
                                       #{inits 22987}#
                                       #{vars 22988}#
                                       #{body 22989}#
                                       #{else* 22994}#)))))))))
                     #{tmp 22908}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{clauses 22898}#))))))))
     (#{strip 2791}#
       (lambda (#{x 23968}# #{w 23969}#)
         (if (memq 'top (car #{w 23969}#))
           #{x 23968}#
           (letrec*
             ((#{f 23970}#
                (lambda (#{x 23973}#)
                  (if (if (vector? #{x 23973}#)
                        (if (= (vector-length #{x 23973}#) 4)
                          (eq? (vector-ref #{x 23973}# 0) 'syntax-object)
                          #f)
                        #f)
                    (#{strip 2791}#
                      (vector-ref #{x 23973}# 1)
                      (vector-ref #{x 23973}# 2))
                    (if (pair? #{x 23973}#)
                      (let ((#{a 23992}# (#{f 23970}# (car #{x 23973}#)))
                            (#{d 23993}# (#{f 23970}# (cdr #{x 23973}#))))
                        (if (if (eq? #{a 23992}# (car #{x 23973}#))
                              (eq? #{d 23993}# (cdr #{x 23973}#))
                              #f)
                          #{x 23973}#
                          (cons #{a 23992}# #{d 23993}#)))
                      (if (vector? #{x 23973}#)
                        (let ((#{old 23996}# (vector->list #{x 23973}#)))
                          (let ((#{new 23997}#
                                  (map #{f 23970}# #{old 23996}#)))
                            (letrec*
                              ((#{lp 23998}#
                                 (lambda (#{l1 24074}# #{l2 24075}#)
                                   (if (null? #{l1 24074}#)
                                     #{x 23973}#
                                     (if (eq? (car #{l1 24074}#)
                                              (car #{l2 24075}#))
                                       (#{lp 23998}#
                                         (cdr #{l1 24074}#)
                                         (cdr #{l2 24075}#))
                                       (list->vector #{new 23997}#))))))
                              (#{lp 23998}# #{old 23996}# #{new 23997}#))))
                        #{x 23973}#))))))
             (#{f 23970}# #{x 23968}#)))))
     (#{gen-var 2792}#
       (lambda (#{id 23038}#)
         (let ((#{id 23039}#
                 (if (if (vector? #{id 23038}#)
                       (if (= (vector-length #{id 23038}#) 4)
                         (eq? (vector-ref #{id 23038}# 0) 'syntax-object)
                         #f)
                       #f)
                   (vector-ref #{id 23038}# 1)
                   #{id 23038}#)))
           (gensym
             (string-append (symbol->string #{id 23039}#) " "))))))
    (begin
      (set! #{gen-label 2745}#
        (let ((#{i 13949}# 0))
          (lambda ()
            (let ((#{n 13950}# #{i 13949}#))
              (begin
                (set! #{i 13949}# (#{1+}# #{n 13950}#))
                (number->string #{n 13950}# 36))))))
      (set! #{transformer-environment 2764}#
        (make-fluid
          (lambda (#{k 12327}#)
            (error "called outside the dynamic extent of a syntax transformer"))))
      (module-define!
        (current-module)
        'letrec-syntax
        (make-syntax-transformer
          'letrec-syntax
          'local-syntax
          #t))
      (module-define!
        (current-module)
        'let-syntax
        (make-syntax-transformer
          'let-syntax
          'local-syntax
          #f))
      (#{global-extend 2741}#
        'core
        'syntax-parameterize
        (lambda (#{e 2913}#
                 #{r 2914}#
                 #{w 2915}#
                 #{s 2916}#
                 #{mod 2917}#)
          (let ((#{tmp 2919}#
                  ($sc-dispatch
                    #{e 2913}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 2919}#
                  (@apply
                    (lambda (#{var 2923}#
                             #{val 2924}#
                             #{e1 2925}#
                             #{e2 2926}#)
                      (#{valid-bound-ids? 2768}# #{var 2923}#))
                    #{tmp 2919}#)
                  #f)
              (@apply
                (lambda (#{var 3004}#
                         #{val 3005}#
                         #{e1 3006}#
                         #{e2 3007}#)
                  (let ((#{names 3008}#
                          (map (lambda (#{x 3058}#)
                                 (#{id-var-name 2762}# #{x 3058}# #{w 2915}#))
                               #{var 3004}#)))
                    (begin
                      (for-each
                        (lambda (#{id 3009}# #{n 3010}#)
                          (let ((#{atom-key 3011}#
                                  (car (let ((#{t 3018}#
                                               (assq #{n 3010}# #{r 2914}#)))
                                         (if #{t 3018}#
                                           (cdr #{t 3018}#)
                                           (if (symbol? #{n 3010}#)
                                             (let ((#{t 3023}#
                                                     (#{get-global-definition-hook 2706}#
                                                       #{n 3010}#
                                                       #{mod 2917}#)))
                                               (if #{t 3023}#
                                                 #{t 3023}#
                                                 '(global)))
                                             '(displaced-lexical)))))))
                            (if (eqv? #{atom-key 3011}# 'displaced-lexical)
                              (syntax-violation
                                'syntax-parameterize
                                "identifier out of context"
                                #{e 2913}#
                                (#{wrap 2771}#
                                  (begin
                                    (if (if (pair? #{id 3009}#) #{s 2916}# #f)
                                      (set-source-properties!
                                        #{id 3009}#
                                        #{s 2916}#))
                                    #{id 3009}#)
                                  #{w 2915}#
                                  #{mod 2917}#)))))
                        #{var 3004}#
                        #{names 3008}#)
                      (#{expand-body 2782}#
                        (cons #{e1 3006}# #{e2 3007}#)
                        (#{wrap 2771}#
                          (begin
                            (if (if (pair? #{e 2913}#) #{s 2916}# #f)
                              (set-source-properties! #{e 2913}# #{s 2916}#))
                            #{e 2913}#)
                          #{w 2915}#
                          #{mod 2917}#)
                        (#{extend-env 2737}#
                          #{names 3008}#
                          (let ((#{trans-r 3144}#
                                  (#{macros-only-env 2739}# #{r 2914}#)))
                            (map (lambda (#{x 3145}#)
                                   (cons 'macro
                                         (#{eval-local-transformer 2784}#
                                           (#{expand 2778}#
                                             #{x 3145}#
                                             #{trans-r 3144}#
                                             #{w 2915}#
                                             #{mod 2917}#)
                                           #{mod 2917}#)))
                                 #{val 3005}#))
                          #{r 2914}#)
                        #{w 2915}#
                        #{mod 2917}#))))
                #{tmp 2919}#)
              (syntax-violation
                'syntax-parameterize
                "bad syntax"
                (#{wrap 2771}#
                  (begin
                    (if (if (pair? #{e 2913}#) #{s 2916}# #f)
                      (set-source-properties! #{e 2913}# #{s 2916}#))
                    #{e 2913}#)
                  #{w 2915}#
                  #{mod 2917}#))))))
      (module-define!
        (current-module)
        'quote
        (make-syntax-transformer
          'quote
          'core
          (lambda (#{e 3354}#
                   #{r 3355}#
                   #{w 3356}#
                   #{s 3357}#
                   #{mod 3358}#)
            (let ((#{tmp 3360}# ($sc-dispatch #{e 3354}# '(_ any))))
              (if #{tmp 3360}#
                (@apply
                  (lambda (#{e 3363}#)
                    (let ((#{exp 3367}#
                            (#{strip 2791}# #{e 3363}# #{w 3356}#)))
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 1)
                        #{s 3357}#
                        #{exp 3367}#)))
                  #{tmp 3360}#)
                (syntax-violation
                  'quote
                  "bad syntax"
                  (#{wrap 2771}#
                    (begin
                      (if (if (pair? #{e 3354}#) #{s 3357}# #f)
                        (set-source-properties! #{e 3354}# #{s 3357}#))
                      #{e 3354}#)
                    #{w 3356}#
                    #{mod 3358}#)))))))
      (#{global-extend 2741}#
        'core
        'syntax
        (letrec*
          ((#{gen-syntax 3587}#
             (lambda (#{src 3689}#
                      #{e 3690}#
                      #{r 3691}#
                      #{maps 3692}#
                      #{ellipsis? 3693}#
                      #{mod 3694}#)
               (if (if (symbol? #{e 3690}#)
                     #t
                     (if (if (vector? #{e 3690}#)
                           (if (= (vector-length #{e 3690}#) 4)
                             (eq? (vector-ref #{e 3690}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{e 3690}# 1))
                       #f))
                 (let ((#{label 3721}#
                         (#{id-var-name 2762}# #{e 3690}# '(()))))
                   (let ((#{b 3722}#
                           (let ((#{t 3729}# (assq #{label 3721}# #{r 3691}#)))
                             (if #{t 3729}#
                               (cdr #{t 3729}#)
                               (if (symbol? #{label 3721}#)
                                 (let ((#{t 3735}#
                                         (#{get-global-definition-hook 2706}#
                                           #{label 3721}#
                                           #{mod 3694}#)))
                                   (if #{t 3735}# #{t 3735}# '(global)))
                                 '(displaced-lexical))))))
                     (if (eq? (car #{b 3722}#) 'syntax)
                       (call-with-values
                         (lambda ()
                           (let ((#{var.lev 3744}# (cdr #{b 3722}#)))
                             (#{gen-ref 3588}#
                               #{src 3689}#
                               (car #{var.lev 3744}#)
                               (cdr #{var.lev 3744}#)
                               #{maps 3692}#)))
                         (lambda (#{var 3748}# #{maps 3749}#)
                           (values (list 'ref #{var 3748}#) #{maps 3749}#)))
                       (if (#{ellipsis? 3693}# #{e 3690}#)
                         (syntax-violation
                           'syntax
                           "misplaced ellipsis"
                           #{src 3689}#)
                         (values (list 'quote #{e 3690}#) #{maps 3692}#)))))
                 (let ((#{tmp 3751}#
                         ($sc-dispatch #{e 3690}# '(any any))))
                   (if (if #{tmp 3751}#
                         (@apply
                           (lambda (#{dots 3755}# #{e 3756}#)
                             (#{ellipsis? 3693}# #{dots 3755}#))
                           #{tmp 3751}#)
                         #f)
                     (@apply
                       (lambda (#{dots 3757}# #{e 3758}#)
                         (#{gen-syntax 3587}#
                           #{src 3689}#
                           #{e 3758}#
                           #{r 3691}#
                           #{maps 3692}#
                           (lambda (#{x 3759}#) #f)
                           #{mod 3694}#))
                       #{tmp 3751}#)
                     (let ((#{tmp 3760}#
                             ($sc-dispatch #{e 3690}# '(any any . any))))
                       (if (if #{tmp 3760}#
                             (@apply
                               (lambda (#{x 3764}# #{dots 3765}# #{y 3766}#)
                                 (#{ellipsis? 3693}# #{dots 3765}#))
                               #{tmp 3760}#)
                             #f)
                         (@apply
                           (lambda (#{x 3767}# #{dots 3768}# #{y 3769}#)
                             (letrec*
                               ((#{f 3770}#
                                  (lambda (#{y 3778}# #{k 3779}#)
                                    (let ((#{tmp 3781}#
                                            ($sc-dispatch
                                              #{y 3778}#
                                              '(any . any))))
                                      (if (if #{tmp 3781}#
                                            (@apply
                                              (lambda (#{dots 3785}#
                                                       #{y 3786}#)
                                                (#{ellipsis? 3693}#
                                                  #{dots 3785}#))
                                              #{tmp 3781}#)
                                            #f)
                                        (@apply
                                          (lambda (#{dots 3787}# #{y 3788}#)
                                            (#{f 3770}#
                                              #{y 3788}#
                                              (lambda (#{maps 3789}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{k 3779}#
                                                      (cons '()
                                                            #{maps 3789}#)))
                                                  (lambda (#{x 3790}#
                                                           #{maps 3791}#)
                                                    (if (null? (car #{maps 3791}#))
                                                      (syntax-violation
                                                        'syntax
                                                        "extra ellipsis"
                                                        #{src 3689}#)
                                                      (values
                                                        (let ((#{map-env 3795}#
                                                                (car #{maps 3791}#)))
                                                          (list 'apply
                                                                '(primitive
                                                                   append)
                                                                (#{gen-map 3590}#
                                                                  #{x 3790}#
                                                                  #{map-env 3795}#)))
                                                        (cdr #{maps 3791}#))))))))
                                          #{tmp 3781}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{gen-syntax 3587}#
                                              #{src 3689}#
                                              #{y 3778}#
                                              #{r 3691}#
                                              #{maps 3692}#
                                              #{ellipsis? 3693}#
                                              #{mod 3694}#))
                                          (lambda (#{y 3798}# #{maps 3799}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{k 3779}# #{maps 3799}#))
                                              (lambda (#{x 3800}#
                                                       #{maps 3801}#)
                                                (values
                                                  (if (equal? #{y 3798}# ''())
                                                    #{x 3800}#
                                                    (list 'append
                                                          #{x 3800}#
                                                          #{y 3798}#))
                                                  #{maps 3801}#))))))))))
                               (#{f 3770}#
                                 #{y 3769}#
                                 (lambda (#{maps 3773}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 3587}#
                                         #{src 3689}#
                                         #{x 3767}#
                                         #{r 3691}#
                                         (cons '() #{maps 3773}#)
                                         #{ellipsis? 3693}#
                                         #{mod 3694}#))
                                     (lambda (#{x 3774}# #{maps 3775}#)
                                       (if (null? (car #{maps 3775}#))
                                         (syntax-violation
                                           'syntax
                                           "extra ellipsis"
                                           #{src 3689}#)
                                         (values
                                           (#{gen-map 3590}#
                                             #{x 3774}#
                                             (car #{maps 3775}#))
                                           (cdr #{maps 3775}#)))))))))
                           #{tmp 3760}#)
                         (let ((#{tmp 3817}#
                                 ($sc-dispatch #{e 3690}# '(any . any))))
                           (if #{tmp 3817}#
                             (@apply
                               (lambda (#{x 3821}# #{y 3822}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 3587}#
                                       #{src 3689}#
                                       #{x 3821}#
                                       #{r 3691}#
                                       #{maps 3692}#
                                       #{ellipsis? 3693}#
                                       #{mod 3694}#))
                                   (lambda (#{x 3823}# #{maps 3824}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax 3587}#
                                           #{src 3689}#
                                           #{y 3822}#
                                           #{r 3691}#
                                           #{maps 3824}#
                                           #{ellipsis? 3693}#
                                           #{mod 3694}#))
                                       (lambda (#{y 3825}# #{maps 3826}#)
                                         (values
                                           (let ((#{atom-key 3831}#
                                                   (car #{y 3825}#)))
                                             (if (eqv? #{atom-key 3831}#
                                                       'quote)
                                               (if (eq? (car #{x 3823}#)
                                                        'quote)
                                                 (list 'quote
                                                       (cons (car (cdr #{x 3823}#))
                                                             (car (cdr #{y 3825}#))))
                                                 (if (eq? (car (cdr #{y 3825}#))
                                                          '())
                                                   (list 'list #{x 3823}#)
                                                   (list 'cons
                                                         #{x 3823}#
                                                         #{y 3825}#)))
                                               (if (eqv? #{atom-key 3831}#
                                                         'list)
                                                 (cons 'list
                                                       (cons #{x 3823}#
                                                             (cdr #{y 3825}#)))
                                                 (list 'cons
                                                       #{x 3823}#
                                                       #{y 3825}#))))
                                           #{maps 3826}#))))))
                               #{tmp 3817}#)
                             (let ((#{tmp 3860}#
                                     ($sc-dispatch
                                       #{e 3690}#
                                       '#(vector (any . each-any)))))
                               (if #{tmp 3860}#
                                 (@apply
                                   (lambda (#{e1 3864}# #{e2 3865}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{gen-syntax 3587}#
                                           #{src 3689}#
                                           (cons #{e1 3864}# #{e2 3865}#)
                                           #{r 3691}#
                                           #{maps 3692}#
                                           #{ellipsis? 3693}#
                                           #{mod 3694}#))
                                       (lambda (#{e 3866}# #{maps 3867}#)
                                         (values
                                           (if (eq? (car #{e 3866}#) 'list)
                                             (cons 'vector (cdr #{e 3866}#))
                                             (if (eq? (car #{e 3866}#) 'quote)
                                               (list 'quote
                                                     (list->vector
                                                       (car (cdr #{e 3866}#))))
                                               (list 'list->vector
                                                     #{e 3866}#)))
                                           #{maps 3867}#))))
                                   #{tmp 3860}#)
                                 (values
                                   (list 'quote #{e 3690}#)
                                   #{maps 3692}#))))))))))))
           (#{gen-ref 3588}#
             (lambda (#{src 3894}#
                      #{var 3895}#
                      #{level 3896}#
                      #{maps 3897}#)
               (if (= #{level 3896}# 0)
                 (values #{var 3895}# #{maps 3897}#)
                 (if (null? #{maps 3897}#)
                   (syntax-violation
                     'syntax
                     "missing ellipsis"
                     #{src 3894}#)
                   (call-with-values
                     (lambda ()
                       (#{gen-ref 3588}#
                         #{src 3894}#
                         #{var 3895}#
                         (#{1-}# #{level 3896}#)
                         (cdr #{maps 3897}#)))
                     (lambda (#{outer-var 3898}# #{outer-maps 3899}#)
                       (let ((#{b 3900}#
                               (assq #{outer-var 3898}# (car #{maps 3897}#))))
                         (if #{b 3900}#
                           (values (cdr #{b 3900}#) #{maps 3897}#)
                           (let ((#{inner-var 3902}#
                                   (gensym
                                     (string-append
                                       (symbol->string 'tmp)
                                       " "))))
                             (values
                               #{inner-var 3902}#
                               (cons (cons (cons #{outer-var 3898}#
                                                 #{inner-var 3902}#)
                                           (car #{maps 3897}#))
                                     #{outer-maps 3899}#)))))))))))
           (#{gen-map 3590}#
             (lambda (#{e 3916}# #{map-env 3917}#)
               (let ((#{formals 3918}# (map cdr #{map-env 3917}#))
                     (#{actuals 3919}#
                       (map (lambda (#{x 3921}#)
                              (list 'ref (car #{x 3921}#)))
                            #{map-env 3917}#)))
                 (if (eq? (car #{e 3916}#) 'ref)
                   (car #{actuals 3919}#)
                   (if (and-map
                         (lambda (#{x 3922}#)
                           (if (eq? (car #{x 3922}#) 'ref)
                             (memq (car (cdr #{x 3922}#)) #{formals 3918}#)
                             #f))
                         (cdr #{e 3916}#))
                     (cons 'map
                           (cons (list 'primitive (car #{e 3916}#))
                                 (map (let ((#{r 3924}#
                                              (map cons
                                                   #{formals 3918}#
                                                   #{actuals 3919}#)))
                                        (lambda (#{x 3925}#)
                                          (cdr (assq (car (cdr #{x 3925}#))
                                                     #{r 3924}#))))
                                      (cdr #{e 3916}#))))
                     (cons 'map
                           (cons (list 'lambda #{formals 3918}# #{e 3916}#)
                                 #{actuals 3919}#)))))))
           (#{regen 3594}#
             (lambda (#{x 3927}#)
               (let ((#{atom-key 3928}# (car #{x 3927}#)))
                 (if (eqv? #{atom-key 3928}# 'ref)
                   (let ((#{name 3938}# (car (cdr #{x 3927}#)))
                         (#{var 3939}# (car (cdr #{x 3927}#))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 3)
                       #f
                       #{name 3938}#
                       #{var 3939}#))
                   (if (eqv? #{atom-key 3928}# 'primitive)
                     (let ((#{name 3951}# (car (cdr #{x 3927}#))))
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           #{name 3951}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           #{name 3951}#
                           #f)))
                     (if (eqv? #{atom-key 3928}# 'quote)
                       (let ((#{exp 3969}# (car (cdr #{x 3927}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 1)
                           #f
                           #{exp 3969}#))
                       (if (eqv? #{atom-key 3928}# 'lambda)
                         (if (list? (car (cdr #{x 3927}#)))
                           (let ((#{req 3980}# (car (cdr #{x 3927}#)))
                                 (#{vars 3982}# (car (cdr #{x 3927}#)))
                                 (#{exp 3984}#
                                   (#{regen 3594}#
                                     (car (cdr (cdr #{x 3927}#))))))
                             (let ((#{body 3989}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req 3980}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars 3982}#
                                       #{exp 3984}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body 3989}#)))
                           (error "how did we get here" #{x 3927}#))
                         (let ((#{fun-exp 4005}#
                                 (let ((#{name 4014}# (car #{x 3927}#)))
                                   (if (equal?
                                         (module-name (current-module))
                                         '(guile))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 7)
                                       #f
                                       #{name 4014}#)
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 5)
                                       #f
                                       '(guile)
                                       #{name 4014}#
                                       #f))))
                               (#{arg-exps 4006}#
                                 (map #{regen 3594}# (cdr #{x 3927}#))))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 11)
                             #f
                             #{fun-exp 4005}#
                             #{arg-exps 4006}#))))))))))
          (lambda (#{e 3595}#
                   #{r 3596}#
                   #{w 3597}#
                   #{s 3598}#
                   #{mod 3599}#)
            (let ((#{e 3600}#
                    (#{wrap 2771}#
                      (begin
                        (if (if (pair? #{e 3595}#) #{s 3598}# #f)
                          (set-source-properties! #{e 3595}# #{s 3598}#))
                        #{e 3595}#)
                      #{w 3597}#
                      #{mod 3599}#)))
              (let ((#{tmp 3602}# ($sc-dispatch #{e 3600}# '(_ any))))
                (if #{tmp 3602}#
                  (@apply
                    (lambda (#{x 3627}#)
                      (call-with-values
                        (lambda ()
                          (#{gen-syntax 3587}#
                            #{e 3600}#
                            #{x 3627}#
                            #{r 3596}#
                            '()
                            #{ellipsis? 2786}#
                            #{mod 3599}#))
                        (lambda (#{e 3681}# #{maps 3682}#)
                          (#{regen 3594}# #{e 3681}#))))
                    #{tmp 3602}#)
                  (syntax-violation
                    'syntax
                    "bad `syntax' form"
                    #{e 3600}#)))))))
      (#{global-extend 2741}#
        'core
        'lambda
        (lambda (#{e 4203}#
                 #{r 4204}#
                 #{w 4205}#
                 #{s 4206}#
                 #{mod 4207}#)
          (let ((#{tmp 4209}#
                  ($sc-dispatch #{e 4203}# '(_ any any . each-any))))
            (if #{tmp 4209}#
              (@apply
                (lambda (#{args 4213}# #{e1 4214}# #{e2 4215}#)
                  (call-with-values
                    (lambda ()
                      (#{lambda-formals 2787}# #{args 4213}#))
                    (lambda (#{req 4218}#
                             #{opt 4219}#
                             #{rest 4220}#
                             #{kw 4221}#)
                      (letrec*
                        ((#{lp 4222}#
                           (lambda (#{body 4225}# #{meta 4226}#)
                             (let ((#{tmp 4228}#
                                     ($sc-dispatch
                                       #{body 4225}#
                                       '(any any . each-any))))
                               (if (if #{tmp 4228}#
                                     (@apply
                                       (lambda (#{docstring 4232}#
                                                #{e1 4233}#
                                                #{e2 4234}#)
                                         (string?
                                           (syntax->datum #{docstring 4232}#)))
                                       #{tmp 4228}#)
                                     #f)
                                 (@apply
                                   (lambda (#{docstring 4235}#
                                            #{e1 4236}#
                                            #{e2 4237}#)
                                     (#{lp 4222}#
                                       (cons #{e1 4236}# #{e2 4237}#)
                                       (append
                                         #{meta 4226}#
                                         (list (cons 'documentation
                                                     (syntax->datum
                                                       #{docstring 4235}#))))))
                                   #{tmp 4228}#)
                                 (let ((#{tmp 4238}#
                                         ($sc-dispatch
                                           #{body 4225}#
                                           '(#(vector #(each (any . any)))
                                             any
                                             .
                                             each-any))))
                                   (if #{tmp 4238}#
                                     (@apply
                                       (lambda (#{k 4242}#
                                                #{v 4243}#
                                                #{e1 4244}#
                                                #{e2 4245}#)
                                         (#{lp 4222}#
                                           (cons #{e1 4244}# #{e2 4245}#)
                                           (append
                                             #{meta 4226}#
                                             (syntax->datum
                                               (map cons
                                                    #{k 4242}#
                                                    #{v 4243}#)))))
                                       #{tmp 4238}#)
                                     (#{expand-simple-lambda 2788}#
                                       #{e 4203}#
                                       #{r 4204}#
                                       #{w 4205}#
                                       #{s 4206}#
                                       #{mod 4207}#
                                       #{req 4218}#
                                       #{rest 4220}#
                                       #{meta 4226}#
                                       #{body 4225}#))))))))
                        (#{lp 4222}# (cons #{e1 4214}# #{e2 4215}#) '())))))
                #{tmp 4209}#)
              (syntax-violation
                'lambda
                "bad lambda"
                #{e 4203}#)))))
      (#{global-extend 2741}#
        'core
        'lambda*
        (lambda (#{e 4530}#
                 #{r 4531}#
                 #{w 4532}#
                 #{s 4533}#
                 #{mod 4534}#)
          (let ((#{tmp 4536}#
                  ($sc-dispatch #{e 4530}# '(_ any any . each-any))))
            (if #{tmp 4536}#
              (@apply
                (lambda (#{args 4540}# #{e1 4541}# #{e2 4542}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case 2790}#
                        #{e 4530}#
                        #{r 4531}#
                        #{w 4532}#
                        #{s 4533}#
                        #{mod 4534}#
                        #{lambda*-formals 2789}#
                        (list (cons #{args 4540}#
                                    (cons #{e1 4541}# #{e2 4542}#)))))
                    (lambda (#{meta 4545}# #{lcase 4546}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s 4533}#
                        #{meta 4545}#
                        #{lcase 4546}#))))
                #{tmp 4536}#)
              (syntax-violation
                'lambda
                "bad lambda*"
                #{e 4530}#)))))
      (#{global-extend 2741}#
        'core
        'case-lambda
        (lambda (#{e 4716}#
                 #{r 4717}#
                 #{w 4718}#
                 #{s 4719}#
                 #{mod 4720}#)
          (let ((#{tmp 4722}#
                  ($sc-dispatch
                    #{e 4716}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp 4722}#
              (@apply
                (lambda (#{args 4726}#
                         #{e1 4727}#
                         #{e2 4728}#
                         #{args* 4729}#
                         #{e1* 4730}#
                         #{e2* 4731}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case 2790}#
                        #{e 4716}#
                        #{r 4717}#
                        #{w 4718}#
                        #{s 4719}#
                        #{mod 4720}#
                        #{lambda-formals 2787}#
                        (cons (cons #{args 4726}#
                                    (cons #{e1 4727}# #{e2 4728}#))
                              (map (lambda (#{tmp 2034 4734}#
                                            #{tmp 2033 4735}#
                                            #{tmp 2032 4736}#)
                                     (cons #{tmp 2032 4736}#
                                           (cons #{tmp 2033 4735}#
                                                 #{tmp 2034 4734}#)))
                                   #{e2* 4731}#
                                   #{e1* 4730}#
                                   #{args* 4729}#))))
                    (lambda (#{meta 4737}# #{lcase 4738}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s 4719}#
                        #{meta 4737}#
                        #{lcase 4738}#))))
                #{tmp 4722}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda"
                #{e 4716}#)))))
      (#{global-extend 2741}#
        'core
        'case-lambda*
        (lambda (#{e 4900}#
                 #{r 4901}#
                 #{w 4902}#
                 #{s 4903}#
                 #{mod 4904}#)
          (let ((#{tmp 4906}#
                  ($sc-dispatch
                    #{e 4900}#
                    '(_ (any any . each-any)
                        .
                        #(each (any any . each-any))))))
            (if #{tmp 4906}#
              (@apply
                (lambda (#{args 4910}#
                         #{e1 4911}#
                         #{e2 4912}#
                         #{args* 4913}#
                         #{e1* 4914}#
                         #{e2* 4915}#)
                  (call-with-values
                    (lambda ()
                      (#{expand-lambda-case 2790}#
                        #{e 4900}#
                        #{r 4901}#
                        #{w 4902}#
                        #{s 4903}#
                        #{mod 4904}#
                        #{lambda*-formals 2789}#
                        (cons (cons #{args 4910}#
                                    (cons #{e1 4911}# #{e2 4912}#))
                              (map (lambda (#{tmp 2055 4918}#
                                            #{tmp 2054 4919}#
                                            #{tmp 2053 4920}#)
                                     (cons #{tmp 2053 4920}#
                                           (cons #{tmp 2054 4919}#
                                                 #{tmp 2055 4918}#)))
                                   #{e2* 4915}#
                                   #{e1* 4914}#
                                   #{args* 4913}#))))
                    (lambda (#{meta 4921}# #{lcase 4922}#)
                      (make-struct/no-tail
                        (vector-ref %expanded-vtables 13)
                        #{s 4903}#
                        #{meta 4921}#
                        #{lcase 4922}#))))
                #{tmp 4906}#)
              (syntax-violation
                'case-lambda
                "bad case-lambda*"
                #{e 4900}#)))))
      (#{global-extend 2741}#
        'core
        'let
        (letrec*
          ((#{expand-let 5113}#
             (lambda (#{e 5262}#
                      #{r 5263}#
                      #{w 5264}#
                      #{s 5265}#
                      #{mod 5266}#
                      #{constructor 5267}#
                      #{ids 5268}#
                      #{vals 5269}#
                      #{exps 5270}#)
               (if (not (#{valid-bound-ids? 2768}# #{ids 5268}#))
                 (syntax-violation
                   'let
                   "duplicate bound variable"
                   #{e 5262}#)
                 (let ((#{labels 5348}#
                         (#{gen-labels 2746}# #{ids 5268}#))
                       (#{new-vars 5349}#
                         (map #{gen-var 2792}# #{ids 5268}#)))
                   (let ((#{nw 5350}#
                           (#{make-binding-wrap 2757}#
                             #{ids 5268}#
                             #{labels 5348}#
                             #{w 5264}#))
                         (#{nr 5351}#
                           (#{extend-var-env 2738}#
                             #{labels 5348}#
                             #{new-vars 5349}#
                             #{r 5263}#)))
                     (#{constructor 5267}#
                       #{s 5265}#
                       (map syntax->datum #{ids 5268}#)
                       #{new-vars 5349}#
                       (map (lambda (#{x 5368}#)
                              (#{expand 2778}#
                                #{x 5368}#
                                #{r 5263}#
                                #{w 5264}#
                                #{mod 5266}#))
                            #{vals 5269}#)
                       (#{expand-body 2782}#
                         #{exps 5270}#
                         (#{source-wrap 2772}#
                           #{e 5262}#
                           #{nw 5350}#
                           #{s 5265}#
                           #{mod 5266}#)
                         #{nr 5351}#
                         #{nw 5350}#
                         #{mod 5266}#))))))))
          (lambda (#{e 5114}#
                   #{r 5115}#
                   #{w 5116}#
                   #{s 5117}#
                   #{mod 5118}#)
            (let ((#{tmp 5120}#
                    ($sc-dispatch
                      #{e 5114}#
                      '(_ #(each (any any)) any . each-any))))
              (if (if #{tmp 5120}#
                    (@apply
                      (lambda (#{id 5124}#
                               #{val 5125}#
                               #{e1 5126}#
                               #{e2 5127}#)
                        (and-map #{id? 2743}# #{id 5124}#))
                      #{tmp 5120}#)
                    #f)
                (@apply
                  (lambda (#{id 5143}#
                           #{val 5144}#
                           #{e1 5145}#
                           #{e2 5146}#)
                    (#{expand-let 5113}#
                      #{e 5114}#
                      #{r 5115}#
                      #{w 5116}#
                      #{s 5117}#
                      #{mod 5118}#
                      #{build-let 2725}#
                      #{id 5143}#
                      #{val 5144}#
                      (cons #{e1 5145}# #{e2 5146}#)))
                  #{tmp 5120}#)
                (let ((#{tmp 5176}#
                        ($sc-dispatch
                          #{e 5114}#
                          '(_ any #(each (any any)) any . each-any))))
                  (if (if #{tmp 5176}#
                        (@apply
                          (lambda (#{f 5180}#
                                   #{id 5181}#
                                   #{val 5182}#
                                   #{e1 5183}#
                                   #{e2 5184}#)
                            (if (if (symbol? #{f 5180}#)
                                  #t
                                  (if (if (vector? #{f 5180}#)
                                        (if (= (vector-length #{f 5180}#) 4)
                                          (eq? (vector-ref #{f 5180}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{f 5180}# 1))
                                    #f))
                              (and-map #{id? 2743}# #{id 5181}#)
                              #f))
                          #{tmp 5176}#)
                        #f)
                    (@apply
                      (lambda (#{f 5226}#
                               #{id 5227}#
                               #{val 5228}#
                               #{e1 5229}#
                               #{e2 5230}#)
                        (#{expand-let 5113}#
                          #{e 5114}#
                          #{r 5115}#
                          #{w 5116}#
                          #{s 5117}#
                          #{mod 5118}#
                          #{build-named-let 2726}#
                          (cons #{f 5226}# #{id 5227}#)
                          #{val 5228}#
                          (cons #{e1 5229}# #{e2 5230}#)))
                      #{tmp 5176}#)
                    (syntax-violation
                      'let
                      "bad let"
                      (#{wrap 2771}#
                        (begin
                          (if (if (pair? #{e 5114}#) #{s 5117}# #f)
                            (set-source-properties! #{e 5114}# #{s 5117}#))
                          #{e 5114}#)
                        #{w 5116}#
                        #{mod 5118}#)))))))))
      (#{global-extend 2741}#
        'core
        'letrec
        (lambda (#{e 5766}#
                 #{r 5767}#
                 #{w 5768}#
                 #{s 5769}#
                 #{mod 5770}#)
          (let ((#{tmp 5772}#
                  ($sc-dispatch
                    #{e 5766}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 5772}#
                  (@apply
                    (lambda (#{id 5776}#
                             #{val 5777}#
                             #{e1 5778}#
                             #{e2 5779}#)
                      (and-map #{id? 2743}# #{id 5776}#))
                    #{tmp 5772}#)
                  #f)
              (@apply
                (lambda (#{id 5795}#
                         #{val 5796}#
                         #{e1 5797}#
                         #{e2 5798}#)
                  (if (not (#{valid-bound-ids? 2768}# #{id 5795}#))
                    (syntax-violation
                      'letrec
                      "duplicate bound variable"
                      #{e 5766}#)
                    (let ((#{labels 5888}#
                            (#{gen-labels 2746}# #{id 5795}#))
                          (#{new-vars 5889}#
                            (map #{gen-var 2792}# #{id 5795}#)))
                      (let ((#{w 5890}#
                              (#{make-binding-wrap 2757}#
                                #{id 5795}#
                                #{labels 5888}#
                                #{w 5768}#))
                            (#{r 5891}#
                              (#{extend-var-env 2738}#
                                #{labels 5888}#
                                #{new-vars 5889}#
                                #{r 5767}#)))
                        (#{build-letrec 2727}#
                          #{s 5769}#
                          #f
                          (map syntax->datum #{id 5795}#)
                          #{new-vars 5889}#
                          (map (lambda (#{x 5972}#)
                                 (#{expand 2778}#
                                   #{x 5972}#
                                   #{r 5891}#
                                   #{w 5890}#
                                   #{mod 5770}#))
                               #{val 5796}#)
                          (#{expand-body 2782}#
                            (cons #{e1 5797}# #{e2 5798}#)
                            (#{wrap 2771}#
                              (begin
                                (if (if (pair? #{e 5766}#) #{s 5769}# #f)
                                  (set-source-properties!
                                    #{e 5766}#
                                    #{s 5769}#))
                                #{e 5766}#)
                              #{w 5890}#
                              #{mod 5770}#)
                            #{r 5891}#
                            #{w 5890}#
                            #{mod 5770}#))))))
                #{tmp 5772}#)
              (syntax-violation
                'letrec
                "bad letrec"
                (#{wrap 2771}#
                  (begin
                    (if (if (pair? #{e 5766}#) #{s 5769}# #f)
                      (set-source-properties! #{e 5766}# #{s 5769}#))
                    #{e 5766}#)
                  #{w 5768}#
                  #{mod 5770}#))))))
      (#{global-extend 2741}#
        'core
        'letrec*
        (lambda (#{e 6359}#
                 #{r 6360}#
                 #{w 6361}#
                 #{s 6362}#
                 #{mod 6363}#)
          (let ((#{tmp 6365}#
                  ($sc-dispatch
                    #{e 6359}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 6365}#
                  (@apply
                    (lambda (#{id 6369}#
                             #{val 6370}#
                             #{e1 6371}#
                             #{e2 6372}#)
                      (and-map #{id? 2743}# #{id 6369}#))
                    #{tmp 6365}#)
                  #f)
              (@apply
                (lambda (#{id 6388}#
                         #{val 6389}#
                         #{e1 6390}#
                         #{e2 6391}#)
                  (if (not (#{valid-bound-ids? 2768}# #{id 6388}#))
                    (syntax-violation
                      'letrec*
                      "duplicate bound variable"
                      #{e 6359}#)
                    (let ((#{labels 6481}#
                            (#{gen-labels 2746}# #{id 6388}#))
                          (#{new-vars 6482}#
                            (map #{gen-var 2792}# #{id 6388}#)))
                      (let ((#{w 6483}#
                              (#{make-binding-wrap 2757}#
                                #{id 6388}#
                                #{labels 6481}#
                                #{w 6361}#))
                            (#{r 6484}#
                              (#{extend-var-env 2738}#
                                #{labels 6481}#
                                #{new-vars 6482}#
                                #{r 6360}#)))
                        (#{build-letrec 2727}#
                          #{s 6362}#
                          #t
                          (map syntax->datum #{id 6388}#)
                          #{new-vars 6482}#
                          (map (lambda (#{x 6565}#)
                                 (#{expand 2778}#
                                   #{x 6565}#
                                   #{r 6484}#
                                   #{w 6483}#
                                   #{mod 6363}#))
                               #{val 6389}#)
                          (#{expand-body 2782}#
                            (cons #{e1 6390}# #{e2 6391}#)
                            (#{wrap 2771}#
                              (begin
                                (if (if (pair? #{e 6359}#) #{s 6362}# #f)
                                  (set-source-properties!
                                    #{e 6359}#
                                    #{s 6362}#))
                                #{e 6359}#)
                              #{w 6483}#
                              #{mod 6363}#)
                            #{r 6484}#
                            #{w 6483}#
                            #{mod 6363}#))))))
                #{tmp 6365}#)
              (syntax-violation
                'letrec*
                "bad letrec*"
                (#{wrap 2771}#
                  (begin
                    (if (if (pair? #{e 6359}#) #{s 6362}# #f)
                      (set-source-properties! #{e 6359}# #{s 6362}#))
                    #{e 6359}#)
                  #{w 6361}#
                  #{mod 6363}#))))))
      (#{global-extend 2741}#
        'core
        'set!
        (lambda (#{e 6991}#
                 #{r 6992}#
                 #{w 6993}#
                 #{s 6994}#
                 #{mod 6995}#)
          (let ((#{tmp 6997}#
                  ($sc-dispatch #{e 6991}# '(_ any any))))
            (if (if #{tmp 6997}#
                  (@apply
                    (lambda (#{id 7001}# #{val 7002}#)
                      (if (symbol? #{id 7001}#)
                        #t
                        (if (if (vector? #{id 7001}#)
                              (if (= (vector-length #{id 7001}#) 4)
                                (eq? (vector-ref #{id 7001}# 0) 'syntax-object)
                                #f)
                              #f)
                          (symbol? (vector-ref #{id 7001}# 1))
                          #f)))
                    #{tmp 6997}#)
                  #f)
              (@apply
                (lambda (#{id 7029}# #{val 7030}#)
                  (let ((#{n 7031}#
                          (#{id-var-name 2762}# #{id 7029}# #{w 6993}#))
                        (#{id-mod 7032}#
                          (if (if (vector? #{id 7029}#)
                                (if (= (vector-length #{id 7029}#) 4)
                                  (eq? (vector-ref #{id 7029}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (vector-ref #{id 7029}# 3)
                            #{mod 6995}#)))
                    (let ((#{b 7033}#
                            (let ((#{t 7074}# (assq #{n 7031}# #{r 6992}#)))
                              (if #{t 7074}#
                                (cdr #{t 7074}#)
                                (if (symbol? #{n 7031}#)
                                  (let ((#{t 7079}#
                                          (#{get-global-definition-hook 2706}#
                                            #{n 7031}#
                                            #{id-mod 7032}#)))
                                    (if #{t 7079}# #{t 7079}# '(global)))
                                  '(displaced-lexical))))))
                      (let ((#{atom-key 7034}# (car #{b 7033}#)))
                        (if (eqv? #{atom-key 7034}# 'lexical)
                          (#{build-lexical-assignment 2714}#
                            #{s 6994}#
                            (syntax->datum #{id 7029}#)
                            (cdr #{b 7033}#)
                            (#{expand 2778}#
                              #{val 7030}#
                              #{r 6992}#
                              #{w 6993}#
                              #{mod 6995}#))
                          (if (eqv? #{atom-key 7034}# 'global)
                            (#{build-global-assignment 2717}#
                              #{s 6994}#
                              #{n 7031}#
                              (#{expand 2778}#
                                #{val 7030}#
                                #{r 6992}#
                                #{w 6993}#
                                #{mod 6995}#)
                              #{id-mod 7032}#)
                            (if (eqv? #{atom-key 7034}# 'macro)
                              (let ((#{p 7393}# (cdr #{b 7033}#)))
                                (if (procedure-property
                                      #{p 7393}#
                                      'variable-transformer)
                                  (#{expand 2778}#
                                    (#{expand-macro 2781}#
                                      #{p 7393}#
                                      #{e 6991}#
                                      #{r 6992}#
                                      #{w 6993}#
                                      #{s 6994}#
                                      #f
                                      #{mod 6995}#)
                                    #{r 6992}#
                                    '(())
                                    #{mod 6995}#)
                                  (syntax-violation
                                    'set!
                                    "not a variable transformer"
                                    (#{wrap 2771}#
                                      #{e 6991}#
                                      #{w 6993}#
                                      #{mod 6995}#)
                                    (#{wrap 2771}#
                                      #{id 7029}#
                                      #{w 6993}#
                                      #{id-mod 7032}#))))
                              (if (eqv? #{atom-key 7034}# 'displaced-lexical)
                                (syntax-violation
                                  'set!
                                  "identifier out of context"
                                  (#{wrap 2771}#
                                    #{id 7029}#
                                    #{w 6993}#
                                    #{mod 6995}#))
                                (syntax-violation
                                  'set!
                                  "bad set!"
                                  (#{wrap 2771}#
                                    (begin
                                      (if (if (pair? #{e 6991}#) #{s 6994}# #f)
                                        (set-source-properties!
                                          #{e 6991}#
                                          #{s 6994}#))
                                      #{e 6991}#)
                                    #{w 6993}#
                                    #{mod 6995}#))))))))))
                #{tmp 6997}#)
              (let ((#{tmp 7488}#
                      ($sc-dispatch
                        #{e 6991}#
                        '(_ (any . each-any) any))))
                (if #{tmp 7488}#
                  (@apply
                    (lambda (#{head 7492}# #{tail 7493}# #{val 7494}#)
                      (call-with-values
                        (lambda ()
                          (#{syntax-type 2777}#
                            #{head 7492}#
                            #{r 6992}#
                            '(())
                            #f
                            #f
                            #{mod 6995}#
                            #t))
                        (lambda (#{type 7497}#
                                 #{value 7498}#
                                 #{ee 7499}#
                                 #{ww 7500}#
                                 #{ss 7501}#
                                 #{modmod 7502}#)
                          (if (eqv? #{type 7497}# 'module-ref)
                            (let ((#{val 7506}#
                                    (#{expand 2778}#
                                      #{val 7494}#
                                      #{r 6992}#
                                      #{w 6993}#
                                      #{mod 6995}#)))
                              (call-with-values
                                (lambda ()
                                  (#{value 7498}#
                                    (cons #{head 7492}# #{tail 7493}#)
                                    #{r 6992}#
                                    #{w 6993}#))
                                (lambda (#{e 7507}#
                                         #{r 7508}#
                                         #{w 7509}#
                                         #{s* 7510}#
                                         #{mod 7511}#)
                                  (let ((#{tmp 7513}# (list #{e 7507}#)))
                                    (if (@apply
                                          (lambda (#{e 7515}#)
                                            (if (symbol? #{e 7515}#)
                                              #t
                                              (if (if (vector? #{e 7515}#)
                                                    (if (= (vector-length
                                                             #{e 7515}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{e 7515}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{e 7515}# 1))
                                                #f)))
                                          #{tmp 7513}#)
                                      (@apply
                                        (lambda (#{e 7545}#)
                                          (#{build-global-assignment 2717}#
                                            #{s 6994}#
                                            (syntax->datum #{e 7545}#)
                                            #{val 7506}#
                                            #{mod 7511}#))
                                        #{tmp 7513}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 7507}#))))))
                            (#{build-application 2710}#
                              #{s 6994}#
                              (let ((#{e 7770}#
                                      (list '#(syntax-object
                                               setter
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(type value ee ww ss modmod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("13b"
                                                    "13c"
                                                    "13d"
                                                    "13e"
                                                    "13f"
                                                    "13g"))
                                                #(ribcage
                                                  #(head tail val)
                                                  #((top) (top) (top))
                                                  #("138" "139" "13a"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(e r w s mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("12u"
                                                    "12v"
                                                    "12w"
                                                    "12x"
                                                    "12y"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("5k"
                                                   "5j"
                                                   "5i"
                                                   "5h"
                                                   "5g"
                                                   "5f"
                                                   "5e"
                                                   "5d"
                                                   "5c"
                                                   "5b"
                                                   "5a"
                                                   "59"
                                                   "58"
                                                   "57"
                                                   "56"
                                                   "55"
                                                   "54"
                                                   "53"
                                                   "52"
                                                   "51"
                                                   "50"
                                                   "4z"
                                                   "4y"
                                                   "4x"
                                                   "4w"
                                                   "4v"
                                                   "4u"
                                                   "4t"
                                                   "4s"
                                                   "4r"
                                                   "4q"
                                                   "4p"
                                                   "4o"
                                                   "4n"
                                                   "4m"
                                                   "4l"
                                                   "4k"
                                                   "4j"
                                                   "4i"
                                                   "4h"
                                                   "4g"
                                                   "4f"
                                                   "4e"
                                                   "4d"
                                                   "4c"
                                                   "4b"
                                                   "4a"
                                                   "49"
                                                   "48"
                                                   "47"
                                                   "46"
                                                   "45"
                                                   "44"
                                                   "43"
                                                   "42"
                                                   "41"
                                                   "40"
                                                   "3z"
                                                   "3y"
                                                   "3x"
                                                   "3w"
                                                   "3v"
                                                   "3u"
                                                   "3t"
                                                   "3s"
                                                   "3r"
                                                   "3q"
                                                   "3p"
                                                   "3o"
                                                   "3n"
                                                   "3m"
                                                   "3l"
                                                   "3k"
                                                   "3j"
                                                   "3i"
                                                   "3h"
                                                   "3g"
                                                   "3f"
                                                   "3e"
                                                   "3d"
                                                   "3c"
                                                   "3b"
                                                   "3a"
                                                   "39"
                                                   "38"
                                                   "37"
                                                   "36"
                                                   "35"
                                                   "34"
                                                   "33"
                                                   "32"
                                                   "31"
                                                   "30"
                                                   "2z"
                                                   "2y"
                                                   "2x"
                                                   "2w"
                                                   "2v"
                                                   "2u"
                                                   "2t"
                                                   "2s"
                                                   "2r"
                                                   "2q"
                                                   "2p"
                                                   "2o"
                                                   "2n"
                                                   "2m"
                                                   "2l"
                                                   "2k"
                                                   "2j"
                                                   "2i"
                                                   "2h"
                                                   "2g"
                                                   "2f"
                                                   "2e"
                                                   "2d"
                                                   "2c"
                                                   "2b"
                                                   "2a"
                                                   "29"
                                                   "28"
                                                   "27"
                                                   "26"
                                                   "25"
                                                   "24"
                                                   "23"
                                                   "22"
                                                   "21"
                                                   "20"
                                                   "1z"
                                                   "1y"
                                                   "1x"
                                                   "1w"
                                                   "1v"
                                                   "1u"
                                                   "1t"
                                                   "1s"
                                                   "1r"
                                                   "1q"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("8" "7" "6")))
                                               (hygiene guile))
                                            #{head 7492}#)))
                                (call-with-values
                                  (lambda ()
                                    (#{syntax-type 2777}#
                                      #{e 7770}#
                                      #{r 6992}#
                                      #{w 6993}#
                                      (#{source-annotation 2736}# #{e 7770}#)
                                      #f
                                      #{mod 6995}#
                                      #f))
                                  (lambda (#{type 7777}#
                                           #{value 7778}#
                                           #{e 7779}#
                                           #{w 7780}#
                                           #{s 7781}#
                                           #{mod 7782}#)
                                    (#{expand-expr 2779}#
                                      #{type 7777}#
                                      #{value 7778}#
                                      #{e 7779}#
                                      #{r 6992}#
                                      #{w 7780}#
                                      #{s 7781}#
                                      #{mod 7782}#))))
                              (map (lambda (#{e 7786}#)
                                     (call-with-values
                                       (lambda ()
                                         (#{syntax-type 2777}#
                                           #{e 7786}#
                                           #{r 6992}#
                                           #{w 6993}#
                                           (#{source-annotation 2736}#
                                             #{e 7786}#)
                                           #f
                                           #{mod 6995}#
                                           #f))
                                       (lambda (#{type 7801}#
                                                #{value 7802}#
                                                #{e 7803}#
                                                #{w 7804}#
                                                #{s 7805}#
                                                #{mod 7806}#)
                                         (#{expand-expr 2779}#
                                           #{type 7801}#
                                           #{value 7802}#
                                           #{e 7803}#
                                           #{r 6992}#
                                           #{w 7804}#
                                           #{s 7805}#
                                           #{mod 7806}#))))
                                   (append
                                     #{tail 7493}#
                                     (list #{val 7494}#))))))))
                    #{tmp 7488}#)
                  (syntax-violation
                    'set!
                    "bad set!"
                    (#{wrap 2771}#
                      (begin
                        (if (if (pair? #{e 6991}#) #{s 6994}# #f)
                          (set-source-properties! #{e 6991}# #{s 6994}#))
                        #{e 6991}#)
                      #{w 6993}#
                      #{mod 6995}#))))))))
      (module-define!
        (current-module)
        '@
        (make-syntax-transformer
          '@
          'module-ref
          (lambda (#{e 7849}# #{r 7850}# #{w 7851}#)
            (let ((#{tmp 7853}#
                    ($sc-dispatch #{e 7849}# '(_ each-any any))))
              (if (if #{tmp 7853}#
                    (@apply
                      (lambda (#{mod 7856}# #{id 7857}#)
                        (if (and-map #{id? 2743}# #{mod 7856}#)
                          (if (symbol? #{id 7857}#)
                            #t
                            (if (if (vector? #{id 7857}#)
                                  (if (= (vector-length #{id 7857}#) 4)
                                    (eq? (vector-ref #{id 7857}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{id 7857}# 1))
                              #f))
                          #f))
                      #{tmp 7853}#)
                    #f)
                (@apply
                  (lambda (#{mod 7897}# #{id 7898}#)
                    (values
                      (syntax->datum #{id 7898}#)
                      #{r 7850}#
                      #{w 7851}#
                      #f
                      (syntax->datum
                        (cons '#(syntax-object
                                 public
                                 ((top)
                                  #(ribcage
                                    #(mod id)
                                    #((top) (top))
                                    #("13w" "13x"))
                                  #(ribcage () () ())
                                  #(ribcage
                                    #(e r w)
                                    #((top) (top) (top))
                                    #("13r" "13s" "13t"))
                                  #(ribcage
                                    (lambda-var-list
                                      gen-var
                                      strip
                                      expand-lambda-case
                                      lambda*-formals
                                      expand-simple-lambda
                                      lambda-formals
                                      ellipsis?
                                      expand-void
                                      eval-local-transformer
                                      expand-local-syntax
                                      expand-body
                                      expand-macro
                                      expand-application
                                      expand-expr
                                      expand
                                      syntax-type
                                      parse-when-list
                                      expand-install-global
                                      expand-top-sequence
                                      expand-sequence
                                      source-wrap
                                      wrap
                                      bound-id-member?
                                      distinct-bound-ids?
                                      valid-bound-ids?
                                      bound-id=?
                                      free-id=?
                                      with-transformer-environment
                                      transformer-environment
                                      resolve-identifier
                                      id-var-name
                                      same-marks?
                                      join-marks
                                      join-wraps
                                      smart-append
                                      make-binding-wrap
                                      extend-ribcage!
                                      make-empty-ribcage
                                      new-mark
                                      anti-mark
                                      the-anti-mark
                                      top-marked?
                                      top-wrap
                                      empty-wrap
                                      set-ribcage-labels!
                                      set-ribcage-marks!
                                      set-ribcage-symnames!
                                      ribcage-labels
                                      ribcage-marks
                                      ribcage-symnames
                                      ribcage?
                                      make-ribcage
                                      gen-labels
                                      gen-label
                                      make-rename
                                      rename-marks
                                      rename-new
                                      rename-old
                                      subst-rename?
                                      wrap-subst
                                      wrap-marks
                                      make-wrap
                                      id-sym-name&marks
                                      id-sym-name
                                      id?
                                      nonsymbol-id?
                                      global-extend
                                      lookup
                                      macros-only-env
                                      extend-var-env
                                      extend-env
                                      null-env
                                      binding-value
                                      binding-type
                                      make-binding
                                      arg-check
                                      source-annotation
                                      no-source
                                      set-syntax-object-module!
                                      set-syntax-object-wrap!
                                      set-syntax-object-expression!
                                      syntax-object-module
                                      syntax-object-wrap
                                      syntax-object-expression
                                      syntax-object?
                                      make-syntax-object
                                      build-lexical-var
                                      build-letrec
                                      build-named-let
                                      build-let
                                      build-sequence
                                      build-data
                                      build-primref
                                      build-lambda-case
                                      build-case-lambda
                                      build-simple-lambda
                                      build-global-definition
                                      build-global-assignment
                                      build-global-reference
                                      analyze-variable
                                      build-lexical-assignment
                                      build-lexical-reference
                                      build-dynlet
                                      build-conditional
                                      build-application
                                      build-void
                                      maybe-name-value!
                                      decorate-source
                                      get-global-definition-hook
                                      put-global-definition-hook
                                      gensym-hook
                                      local-eval-hook
                                      top-level-eval-hook
                                      fx<
                                      fx=
                                      fx-
                                      fx+
                                      set-lambda-meta!
                                      lambda-meta
                                      lambda?
                                      make-dynlet
                                      make-letrec
                                      make-let
                                      make-lambda-case
                                      make-lambda
                                      make-sequence
                                      make-application
                                      make-conditional
                                      make-toplevel-define
                                      make-toplevel-set
                                      make-toplevel-ref
                                      make-module-set
                                      make-module-ref
                                      make-lexical-set
                                      make-lexical-ref
                                      make-primitive-ref
                                      make-const
                                      make-void)
                                    ((top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top)
                                     (top))
                                    ("5k"
                                     "5j"
                                     "5i"
                                     "5h"
                                     "5g"
                                     "5f"
                                     "5e"
                                     "5d"
                                     "5c"
                                     "5b"
                                     "5a"
                                     "59"
                                     "58"
                                     "57"
                                     "56"
                                     "55"
                                     "54"
                                     "53"
                                     "52"
                                     "51"
                                     "50"
                                     "4z"
                                     "4y"
                                     "4x"
                                     "4w"
                                     "4v"
                                     "4u"
                                     "4t"
                                     "4s"
                                     "4r"
                                     "4q"
                                     "4p"
                                     "4o"
                                     "4n"
                                     "4m"
                                     "4l"
                                     "4k"
                                     "4j"
                                     "4i"
                                     "4h"
                                     "4g"
                                     "4f"
                                     "4e"
                                     "4d"
                                     "4c"
                                     "4b"
                                     "4a"
                                     "49"
                                     "48"
                                     "47"
                                     "46"
                                     "45"
                                     "44"
                                     "43"
                                     "42"
                                     "41"
                                     "40"
                                     "3z"
                                     "3y"
                                     "3x"
                                     "3w"
                                     "3v"
                                     "3u"
                                     "3t"
                                     "3s"
                                     "3r"
                                     "3q"
                                     "3p"
                                     "3o"
                                     "3n"
                                     "3m"
                                     "3l"
                                     "3k"
                                     "3j"
                                     "3i"
                                     "3h"
                                     "3g"
                                     "3f"
                                     "3e"
                                     "3d"
                                     "3c"
                                     "3b"
                                     "3a"
                                     "39"
                                     "38"
                                     "37"
                                     "36"
                                     "35"
                                     "34"
                                     "33"
                                     "32"
                                     "31"
                                     "30"
                                     "2z"
                                     "2y"
                                     "2x"
                                     "2w"
                                     "2v"
                                     "2u"
                                     "2t"
                                     "2s"
                                     "2r"
                                     "2q"
                                     "2p"
                                     "2o"
                                     "2n"
                                     "2m"
                                     "2l"
                                     "2k"
                                     "2j"
                                     "2i"
                                     "2h"
                                     "2g"
                                     "2f"
                                     "2e"
                                     "2d"
                                     "2c"
                                     "2b"
                                     "2a"
                                     "29"
                                     "28"
                                     "27"
                                     "26"
                                     "25"
                                     "24"
                                     "23"
                                     "22"
                                     "21"
                                     "20"
                                     "1z"
                                     "1y"
                                     "1x"
                                     "1w"
                                     "1v"
                                     "1u"
                                     "1t"
                                     "1s"
                                     "1r"
                                     "1q"))
                                  #(ribcage
                                    (define-structure
                                      define-expansion-accessors
                                      define-expansion-constructors)
                                    ((top) (top) (top))
                                    ("8" "7" "6")))
                                 (hygiene guile))
                              #{mod 7897}#))))
                  #{tmp 7853}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 7849}#))))))
      (#{global-extend 2741}#
        'module-ref
        '@@
        (lambda (#{e 7990}# #{r 7991}# #{w 7992}#)
          (letrec*
            ((#{remodulate 7993}#
               (lambda (#{x 8028}# #{mod 8029}#)
                 (if (pair? #{x 8028}#)
                   (cons (#{remodulate 7993}#
                           (car #{x 8028}#)
                           #{mod 8029}#)
                         (#{remodulate 7993}#
                           (cdr #{x 8028}#)
                           #{mod 8029}#))
                   (if (if (vector? #{x 8028}#)
                         (if (= (vector-length #{x 8028}#) 4)
                           (eq? (vector-ref #{x 8028}# 0) 'syntax-object)
                           #f)
                         #f)
                     (let ((#{expression 8043}#
                             (#{remodulate 7993}#
                               (vector-ref #{x 8028}# 1)
                               #{mod 8029}#))
                           (#{wrap 8044}# (vector-ref #{x 8028}# 2)))
                       (vector
                         'syntax-object
                         #{expression 8043}#
                         #{wrap 8044}#
                         #{mod 8029}#))
                     (if (vector? #{x 8028}#)
                       (let ((#{n 8052}# (vector-length #{x 8028}#)))
                         (let ((#{v 8053}# (make-vector #{n 8052}#)))
                           (letrec*
                             ((#{loop 8054}#
                                (lambda (#{i 8101}#)
                                  (if (= #{i 8101}# #{n 8052}#)
                                    #{v 8053}#
                                    (begin
                                      (vector-set!
                                        #{v 8053}#
                                        #{i 8101}#
                                        (#{remodulate 7993}#
                                          (vector-ref #{x 8028}# #{i 8101}#)
                                          #{mod 8029}#))
                                      (#{loop 8054}# (#{1+}# #{i 8101}#)))))))
                             (#{loop 8054}# 0))))
                       #{x 8028}#))))))
            (let ((#{tmp 7995}#
                    ($sc-dispatch #{e 7990}# '(_ each-any any))))
              (if (if #{tmp 7995}#
                    (@apply
                      (lambda (#{mod 7999}# #{exp 8000}#)
                        (and-map #{id? 2743}# #{mod 7999}#))
                      #{tmp 7995}#)
                    #f)
                (@apply
                  (lambda (#{mod 8016}# #{exp 8017}#)
                    (let ((#{mod 8018}#
                            (syntax->datum
                              (cons '#(syntax-object
                                       private
                                       ((top)
                                        #(ribcage
                                          #(mod exp)
                                          #((top) (top))
                                          #("14a" "14b"))
                                        #(ribcage (remodulate) ((top)) ("141"))
                                        #(ribcage
                                          #(e r w)
                                          #((top) (top) (top))
                                          #("13y" "13z" "140"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            expand-lambda-case
                                            lambda*-formals
                                            expand-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            expand-void
                                            eval-local-transformer
                                            expand-local-syntax
                                            expand-body
                                            expand-macro
                                            expand-application
                                            expand-expr
                                            expand
                                            syntax-type
                                            parse-when-list
                                            expand-install-global
                                            expand-top-sequence
                                            expand-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            with-transformer-environment
                                            transformer-environment
                                            resolve-identifier
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("5k"
                                           "5j"
                                           "5i"
                                           "5h"
                                           "5g"
                                           "5f"
                                           "5e"
                                           "5d"
                                           "5c"
                                           "5b"
                                           "5a"
                                           "59"
                                           "58"
                                           "57"
                                           "56"
                                           "55"
                                           "54"
                                           "53"
                                           "52"
                                           "51"
                                           "50"
                                           "4z"
                                           "4y"
                                           "4x"
                                           "4w"
                                           "4v"
                                           "4u"
                                           "4t"
                                           "4s"
                                           "4r"
                                           "4q"
                                           "4p"
                                           "4o"
                                           "4n"
                                           "4m"
                                           "4l"
                                           "4k"
                                           "4j"
                                           "4i"
                                           "4h"
                                           "4g"
                                           "4f"
                                           "4e"
                                           "4d"
                                           "4c"
                                           "4b"
                                           "4a"
                                           "49"
                                           "48"
                                           "47"
                                           "46"
                                           "45"
                                           "44"
                                           "43"
                                           "42"
                                           "41"
                                           "40"
                                           "3z"
                                           "3y"
                                           "3x"
                                           "3w"
                                           "3v"
                                           "3u"
                                           "3t"
                                           "3s"
                                           "3r"
                                           "3q"
                                           "3p"
                                           "3o"
                                           "3n"
                                           "3m"
                                           "3l"
                                           "3k"
                                           "3j"
                                           "3i"
                                           "3h"
                                           "3g"
                                           "3f"
                                           "3e"
                                           "3d"
                                           "3c"
                                           "3b"
                                           "3a"
                                           "39"
                                           "38"
                                           "37"
                                           "36"
                                           "35"
                                           "34"
                                           "33"
                                           "32"
                                           "31"
                                           "30"
                                           "2z"
                                           "2y"
                                           "2x"
                                           "2w"
                                           "2v"
                                           "2u"
                                           "2t"
                                           "2s"
                                           "2r"
                                           "2q"
                                           "2p"
                                           "2o"
                                           "2n"
                                           "2m"
                                           "2l"
                                           "2k"
                                           "2j"
                                           "2i"
                                           "2h"
                                           "2g"
                                           "2f"
                                           "2e"
                                           "2d"
                                           "2c"
                                           "2b"
                                           "2a"
                                           "29"
                                           "28"
                                           "27"
                                           "26"
                                           "25"
                                           "24"
                                           "23"
                                           "22"
                                           "21"
                                           "20"
                                           "1z"
                                           "1y"
                                           "1x"
                                           "1w"
                                           "1v"
                                           "1u"
                                           "1t"
                                           "1s"
                                           "1r"
                                           "1q"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("8" "7" "6")))
                                       (hygiene guile))
                                    #{mod 8016}#))))
                      (values
                        (#{remodulate 7993}# #{exp 8017}# #{mod 8018}#)
                        #{r 7991}#
                        #{w 7992}#
                        (#{source-annotation 2736}# #{exp 8017}#)
                        #{mod 8018}#)))
                  #{tmp 7995}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 7990}#))))))
      (#{global-extend 2741}#
        'core
        'if
        (lambda (#{e 8202}#
                 #{r 8203}#
                 #{w 8204}#
                 #{s 8205}#
                 #{mod 8206}#)
          (let ((#{tmp 8208}#
                  ($sc-dispatch #{e 8202}# '(_ any any))))
            (if #{tmp 8208}#
              (@apply
                (lambda (#{test 8212}# #{then 8213}#)
                  (#{build-conditional 2711}#
                    #{s 8205}#
                    (#{expand 2778}#
                      #{test 8212}#
                      #{r 8203}#
                      #{w 8204}#
                      #{mod 8206}#)
                    (#{expand 2778}#
                      #{then 8213}#
                      #{r 8203}#
                      #{w 8204}#
                      #{mod 8206}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 0)
                      #f)))
                #{tmp 8208}#)
              (let ((#{tmp 8438}#
                      ($sc-dispatch #{e 8202}# '(_ any any any))))
                (if #{tmp 8438}#
                  (@apply
                    (lambda (#{test 8442}# #{then 8443}# #{else 8444}#)
                      (#{build-conditional 2711}#
                        #{s 8205}#
                        (#{expand 2778}#
                          #{test 8442}#
                          #{r 8203}#
                          #{w 8204}#
                          #{mod 8206}#)
                        (#{expand 2778}#
                          #{then 8443}#
                          #{r 8203}#
                          #{w 8204}#
                          #{mod 8206}#)
                        (#{expand 2778}#
                          #{else 8444}#
                          #{r 8203}#
                          #{w 8204}#
                          #{mod 8206}#)))
                    #{tmp 8438}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e 8202}#)))))))
      (#{global-extend 2741}#
        'core
        'with-fluids
        (lambda (#{e 8843}#
                 #{r 8844}#
                 #{w 8845}#
                 #{s 8846}#
                 #{mod 8847}#)
          (let ((#{tmp 8849}#
                  ($sc-dispatch
                    #{e 8843}#
                    '(_ #(each (any any)) any . each-any))))
            (if #{tmp 8849}#
              (@apply
                (lambda (#{fluid 8853}#
                         #{val 8854}#
                         #{b 8855}#
                         #{b* 8856}#)
                  (#{build-dynlet 2712}#
                    #{s 8846}#
                    (map (lambda (#{x 8937}#)
                           (#{expand 2778}#
                             #{x 8937}#
                             #{r 8844}#
                             #{w 8845}#
                             #{mod 8847}#))
                         #{fluid 8853}#)
                    (map (lambda (#{x 9007}#)
                           (#{expand 2778}#
                             #{x 9007}#
                             #{r 8844}#
                             #{w 8845}#
                             #{mod 8847}#))
                         #{val 8854}#)
                    (#{expand-body 2782}#
                      (cons #{b 8855}# #{b* 8856}#)
                      (#{wrap 2771}#
                        (begin
                          (if (if (pair? #{e 8843}#) #{s 8846}# #f)
                            (set-source-properties! #{e 8843}# #{s 8846}#))
                          #{e 8843}#)
                        #{w 8845}#
                        #{mod 8847}#)
                      #{r 8844}#
                      #{w 8845}#
                      #{mod 8847}#)))
                #{tmp 8849}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 8843}#)))))
      (module-define!
        (current-module)
        'begin
        (make-syntax-transformer 'begin 'begin '()))
      (module-define!
        (current-module)
        'define
        (make-syntax-transformer 'define 'define '()))
      (module-define!
        (current-module)
        'define-syntax
        (make-syntax-transformer
          'define-syntax
          'define-syntax
          '()))
      (module-define!
        (current-module)
        'define-syntax-parameter
        (make-syntax-transformer
          'define-syntax-parameter
          'define-syntax-parameter
          '()))
      (module-define!
        (current-module)
        'eval-when
        (make-syntax-transformer
          'eval-when
          'eval-when
          '()))
      (#{global-extend 2741}#
        'core
        'syntax-case
        (letrec*
          ((#{convert-pattern 9375}#
             (lambda (#{pattern 10970}# #{keys 10971}#)
               (letrec*
                 ((#{cvt* 10972}#
                    (lambda (#{p* 11596}# #{n 11597}# #{ids 11598}#)
                      (if (not (pair? #{p* 11596}#))
                        (#{cvt 10974}#
                          #{p* 11596}#
                          #{n 11597}#
                          #{ids 11598}#)
                        (call-with-values
                          (lambda ()
                            (#{cvt* 10972}#
                              (cdr #{p* 11596}#)
                              #{n 11597}#
                              #{ids 11598}#))
                          (lambda (#{y 11601}# #{ids 11602}#)
                            (call-with-values
                              (lambda ()
                                (#{cvt 10974}#
                                  (car #{p* 11596}#)
                                  #{n 11597}#
                                  #{ids 11602}#))
                              (lambda (#{x 11605}# #{ids 11606}#)
                                (values
                                  (cons #{x 11605}# #{y 11601}#)
                                  #{ids 11606}#))))))))
                  (#{v-reverse 10973}#
                    (lambda (#{x 11607}#)
                      (letrec*
                        ((#{loop 11608}#
                           (lambda (#{r 11688}# #{x 11689}#)
                             (if (not (pair? #{x 11689}#))
                               (values #{r 11688}# #{x 11689}#)
                               (#{loop 11608}#
                                 (cons (car #{x 11689}#) #{r 11688}#)
                                 (cdr #{x 11689}#))))))
                        (#{loop 11608}# '() #{x 11607}#))))
                  (#{cvt 10974}#
                    (lambda (#{p 10977}# #{n 10978}# #{ids 10979}#)
                      (if (if (symbol? #{p 10977}#)
                            #t
                            (if (if (vector? #{p 10977}#)
                                  (if (= (vector-length #{p 10977}#) 4)
                                    (eq? (vector-ref #{p 10977}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{p 10977}# 1))
                              #f))
                        (if (#{bound-id-member? 2770}#
                              #{p 10977}#
                              #{keys 10971}#)
                          (values
                            (vector 'free-id #{p 10977}#)
                            #{ids 10979}#)
                          (if (if (eq? (if (if (vector? #{p 10977}#)
                                             (if (= (vector-length #{p 10977}#)
                                                    4)
                                               (eq? (vector-ref #{p 10977}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref #{p 10977}# 1)
                                         #{p 10977}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       _
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p n ids)
                                                          #((top) (top) (top))
                                                          #("15i" "15j" "15k"))
                                                        #(ribcage
                                                          (cvt v-reverse cvt*)
                                                          ((top) (top) (top))
                                                          ("156" "155" "154"))
                                                        #(ribcage
                                                          #(pattern keys)
                                                          #((top) (top))
                                                          #("152" "153"))
                                                        #(ribcage
                                                          (gen-syntax-case
                                                            gen-clause
                                                            build-dispatch-call
                                                            convert-pattern)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("151"
                                                           "150"
                                                           "14z"
                                                           "14y"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("5k"
                                                           "5j"
                                                           "5i"
                                                           "5h"
                                                           "5g"
                                                           "5f"
                                                           "5e"
                                                           "5d"
                                                           "5c"
                                                           "5b"
                                                           "5a"
                                                           "59"
                                                           "58"
                                                           "57"
                                                           "56"
                                                           "55"
                                                           "54"
                                                           "53"
                                                           "52"
                                                           "51"
                                                           "50"
                                                           "4z"
                                                           "4y"
                                                           "4x"
                                                           "4w"
                                                           "4v"
                                                           "4u"
                                                           "4t"
                                                           "4s"
                                                           "4r"
                                                           "4q"
                                                           "4p"
                                                           "4o"
                                                           "4n"
                                                           "4m"
                                                           "4l"
                                                           "4k"
                                                           "4j"
                                                           "4i"
                                                           "4h"
                                                           "4g"
                                                           "4f"
                                                           "4e"
                                                           "4d"
                                                           "4c"
                                                           "4b"
                                                           "4a"
                                                           "49"
                                                           "48"
                                                           "47"
                                                           "46"
                                                           "45"
                                                           "44"
                                                           "43"
                                                           "42"
                                                           "41"
                                                           "40"
                                                           "3z"
                                                           "3y"
                                                           "3x"
                                                           "3w"
                                                           "3v"
                                                           "3u"
                                                           "3t"
                                                           "3s"
                                                           "3r"
                                                           "3q"
                                                           "3p"
                                                           "3o"
                                                           "3n"
                                                           "3m"
                                                           "3l"
                                                           "3k"
                                                           "3j"
                                                           "3i"
                                                           "3h"
                                                           "3g"
                                                           "3f"
                                                           "3e"
                                                           "3d"
                                                           "3c"
                                                           "3b"
                                                           "3a"
                                                           "39"
                                                           "38"
                                                           "37"
                                                           "36"
                                                           "35"
                                                           "34"
                                                           "33"
                                                           "32"
                                                           "31"
                                                           "30"
                                                           "2z"
                                                           "2y"
                                                           "2x"
                                                           "2w"
                                                           "2v"
                                                           "2u"
                                                           "2t"
                                                           "2s"
                                                           "2r"
                                                           "2q"
                                                           "2p"
                                                           "2o"
                                                           "2n"
                                                           "2m"
                                                           "2l"
                                                           "2k"
                                                           "2j"
                                                           "2i"
                                                           "2h"
                                                           "2g"
                                                           "2f"
                                                           "2e"
                                                           "2d"
                                                           "2c"
                                                           "2b"
                                                           "2a"
                                                           "29"
                                                           "28"
                                                           "27"
                                                           "26"
                                                           "25"
                                                           "24"
                                                           "23"
                                                           "22"
                                                           "21"
                                                           "20"
                                                           "1z"
                                                           "1y"
                                                           "1x"
                                                           "1w"
                                                           "1v"
                                                           "1u"
                                                           "1t"
                                                           "1s"
                                                           "1r"
                                                           "1q"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("8" "7" "6")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         '_
                                         '#(syntax-object
                                            _
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(p n ids)
                                               #((top) (top) (top))
                                               #("15i" "15j" "15k"))
                                             #(ribcage
                                               (cvt v-reverse cvt*)
                                               ((top) (top) (top))
                                               ("156" "155" "154"))
                                             #(ribcage
                                               #(pattern keys)
                                               #((top) (top))
                                               #("152" "153"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("151" "150" "14z" "14y"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("5k"
                                                "5j"
                                                "5i"
                                                "5h"
                                                "5g"
                                                "5f"
                                                "5e"
                                                "5d"
                                                "5c"
                                                "5b"
                                                "5a"
                                                "59"
                                                "58"
                                                "57"
                                                "56"
                                                "55"
                                                "54"
                                                "53"
                                                "52"
                                                "51"
                                                "50"
                                                "4z"
                                                "4y"
                                                "4x"
                                                "4w"
                                                "4v"
                                                "4u"
                                                "4t"
                                                "4s"
                                                "4r"
                                                "4q"
                                                "4p"
                                                "4o"
                                                "4n"
                                                "4m"
                                                "4l"
                                                "4k"
                                                "4j"
                                                "4i"
                                                "4h"
                                                "4g"
                                                "4f"
                                                "4e"
                                                "4d"
                                                "4c"
                                                "4b"
                                                "4a"
                                                "49"
                                                "48"
                                                "47"
                                                "46"
                                                "45"
                                                "44"
                                                "43"
                                                "42"
                                                "41"
                                                "40"
                                                "3z"
                                                "3y"
                                                "3x"
                                                "3w"
                                                "3v"
                                                "3u"
                                                "3t"
                                                "3s"
                                                "3r"
                                                "3q"
                                                "3p"
                                                "3o"
                                                "3n"
                                                "3m"
                                                "3l"
                                                "3k"
                                                "3j"
                                                "3i"
                                                "3h"
                                                "3g"
                                                "3f"
                                                "3e"
                                                "3d"
                                                "3c"
                                                "3b"
                                                "3a"
                                                "39"
                                                "38"
                                                "37"
                                                "36"
                                                "35"
                                                "34"
                                                "33"
                                                "32"
                                                "31"
                                                "30"
                                                "2z"
                                                "2y"
                                                "2x"
                                                "2w"
                                                "2v"
                                                "2u"
                                                "2t"
                                                "2s"
                                                "2r"
                                                "2q"
                                                "2p"
                                                "2o"
                                                "2n"
                                                "2m"
                                                "2l"
                                                "2k"
                                                "2j"
                                                "2i"
                                                "2h"
                                                "2g"
                                                "2f"
                                                "2e"
                                                "2d"
                                                "2c"
                                                "2b"
                                                "2a"
                                                "29"
                                                "28"
                                                "27"
                                                "26"
                                                "25"
                                                "24"
                                                "23"
                                                "22"
                                                "21"
                                                "20"
                                                "1z"
                                                "1y"
                                                "1x"
                                                "1w"
                                                "1v"
                                                "1u"
                                                "1t"
                                                "1s"
                                                "1r"
                                                "1q"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("8" "7" "6")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name 2762}# #{p 10977}# '(()))
                                     (#{id-var-name 2762}#
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("15i" "15j" "15k"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("156" "155" "154"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("152" "153"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("151" "150" "14z" "14y"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               expand-lambda-case
                                               lambda*-formals
                                               expand-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               expand-void
                                               eval-local-transformer
                                               expand-local-syntax
                                               expand-body
                                               expand-macro
                                               expand-application
                                               expand-expr
                                               expand
                                               syntax-type
                                               parse-when-list
                                               expand-install-global
                                               expand-top-sequence
                                               expand-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               with-transformer-environment
                                               transformer-environment
                                               resolve-identifier
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("5k"
                                              "5j"
                                              "5i"
                                              "5h"
                                              "5g"
                                              "5f"
                                              "5e"
                                              "5d"
                                              "5c"
                                              "5b"
                                              "5a"
                                              "59"
                                              "58"
                                              "57"
                                              "56"
                                              "55"
                                              "54"
                                              "53"
                                              "52"
                                              "51"
                                              "50"
                                              "4z"
                                              "4y"
                                              "4x"
                                              "4w"
                                              "4v"
                                              "4u"
                                              "4t"
                                              "4s"
                                              "4r"
                                              "4q"
                                              "4p"
                                              "4o"
                                              "4n"
                                              "4m"
                                              "4l"
                                              "4k"
                                              "4j"
                                              "4i"
                                              "4h"
                                              "4g"
                                              "4f"
                                              "4e"
                                              "4d"
                                              "4c"
                                              "4b"
                                              "4a"
                                              "49"
                                              "48"
                                              "47"
                                              "46"
                                              "45"
                                              "44"
                                              "43"
                                              "42"
                                              "41"
                                              "40"
                                              "3z"
                                              "3y"
                                              "3x"
                                              "3w"
                                              "3v"
                                              "3u"
                                              "3t"
                                              "3s"
                                              "3r"
                                              "3q"
                                              "3p"
                                              "3o"
                                              "3n"
                                              "3m"
                                              "3l"
                                              "3k"
                                              "3j"
                                              "3i"
                                              "3h"
                                              "3g"
                                              "3f"
                                              "3e"
                                              "3d"
                                              "3c"
                                              "3b"
                                              "3a"
                                              "39"
                                              "38"
                                              "37"
                                              "36"
                                              "35"
                                              "34"
                                              "33"
                                              "32"
                                              "31"
                                              "30"
                                              "2z"
                                              "2y"
                                              "2x"
                                              "2w"
                                              "2v"
                                              "2u"
                                              "2t"
                                              "2s"
                                              "2r"
                                              "2q"
                                              "2p"
                                              "2o"
                                              "2n"
                                              "2m"
                                              "2l"
                                              "2k"
                                              "2j"
                                              "2i"
                                              "2h"
                                              "2g"
                                              "2f"
                                              "2e"
                                              "2d"
                                              "2c"
                                              "2b"
                                              "2a"
                                              "29"
                                              "28"
                                              "27"
                                              "26"
                                              "25"
                                              "24"
                                              "23"
                                              "22"
                                              "21"
                                              "20"
                                              "1z"
                                              "1y"
                                              "1x"
                                              "1w"
                                              "1v"
                                              "1u"
                                              "1t"
                                              "1s"
                                              "1r"
                                              "1q"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("8" "7" "6")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            (values '_ #{ids 10979}#)
                            (values
                              'any
                              (cons (cons #{p 10977}# #{n 10978}#)
                                    #{ids 10979}#))))
                        (let ((#{tmp 11299}#
                                ($sc-dispatch #{p 10977}# '(any any))))
                          (if (if #{tmp 11299}#
                                (@apply
                                  (lambda (#{x 11303}# #{dots 11304}#)
                                    (if (if (if (vector? #{dots 11304}#)
                                              (if (= (vector-length
                                                       #{dots 11304}#)
                                                     4)
                                                (eq? (vector-ref
                                                       #{dots 11304}#
                                                       0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (symbol?
                                            (vector-ref #{dots 11304}# 1))
                                          #f)
                                      (if (eq? (if (if (vector? #{dots 11304}#)
                                                     (if (= (vector-length
                                                              #{dots 11304}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{dots 11304}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref #{dots 11304}# 1)
                                                 #{dots 11304}#)
                                               (if (if (= (vector-length
                                                            '#(syntax-object
                                                               ...
                                                               ((top)
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  ()
                                                                  ()
                                                                  ())
                                                                #(ribcage
                                                                  #(x)
                                                                  #((top))
                                                                  #("of"))
                                                                #(ribcage
                                                                  (lambda-var-list
                                                                    gen-var
                                                                    strip
                                                                    expand-lambda-case
                                                                    lambda*-formals
                                                                    expand-simple-lambda
                                                                    lambda-formals
                                                                    ellipsis?
                                                                    expand-void
                                                                    eval-local-transformer
                                                                    expand-local-syntax
                                                                    expand-body
                                                                    expand-macro
                                                                    expand-application
                                                                    expand-expr
                                                                    expand
                                                                    syntax-type
                                                                    parse-when-list
                                                                    expand-install-global
                                                                    expand-top-sequence
                                                                    expand-sequence
                                                                    source-wrap
                                                                    wrap
                                                                    bound-id-member?
                                                                    distinct-bound-ids?
                                                                    valid-bound-ids?
                                                                    bound-id=?
                                                                    free-id=?
                                                                    with-transformer-environment
                                                                    transformer-environment
                                                                    resolve-identifier
                                                                    id-var-name
                                                                    same-marks?
                                                                    join-marks
                                                                    join-wraps
                                                                    smart-append
                                                                    make-binding-wrap
                                                                    extend-ribcage!
                                                                    make-empty-ribcage
                                                                    new-mark
                                                                    anti-mark
                                                                    the-anti-mark
                                                                    top-marked?
                                                                    top-wrap
                                                                    empty-wrap
                                                                    set-ribcage-labels!
                                                                    set-ribcage-marks!
                                                                    set-ribcage-symnames!
                                                                    ribcage-labels
                                                                    ribcage-marks
                                                                    ribcage-symnames
                                                                    ribcage?
                                                                    make-ribcage
                                                                    gen-labels
                                                                    gen-label
                                                                    make-rename
                                                                    rename-marks
                                                                    rename-new
                                                                    rename-old
                                                                    subst-rename?
                                                                    wrap-subst
                                                                    wrap-marks
                                                                    make-wrap
                                                                    id-sym-name&marks
                                                                    id-sym-name
                                                                    id?
                                                                    nonsymbol-id?
                                                                    global-extend
                                                                    lookup
                                                                    macros-only-env
                                                                    extend-var-env
                                                                    extend-env
                                                                    null-env
                                                                    binding-value
                                                                    binding-type
                                                                    make-binding
                                                                    arg-check
                                                                    source-annotation
                                                                    no-source
                                                                    set-syntax-object-module!
                                                                    set-syntax-object-wrap!
                                                                    set-syntax-object-expression!
                                                                    syntax-object-module
                                                                    syntax-object-wrap
                                                                    syntax-object-expression
                                                                    syntax-object?
                                                                    make-syntax-object
                                                                    build-lexical-var
                                                                    build-letrec
                                                                    build-named-let
                                                                    build-let
                                                                    build-sequence
                                                                    build-data
                                                                    build-primref
                                                                    build-lambda-case
                                                                    build-case-lambda
                                                                    build-simple-lambda
                                                                    build-global-definition
                                                                    build-global-assignment
                                                                    build-global-reference
                                                                    analyze-variable
                                                                    build-lexical-assignment
                                                                    build-lexical-reference
                                                                    build-dynlet
                                                                    build-conditional
                                                                    build-application
                                                                    build-void
                                                                    maybe-name-value!
                                                                    decorate-source
                                                                    get-global-definition-hook
                                                                    put-global-definition-hook
                                                                    gensym-hook
                                                                    local-eval-hook
                                                                    top-level-eval-hook
                                                                    fx<
                                                                    fx=
                                                                    fx-
                                                                    fx+
                                                                    set-lambda-meta!
                                                                    lambda-meta
                                                                    lambda?
                                                                    make-dynlet
                                                                    make-letrec
                                                                    make-let
                                                                    make-lambda-case
                                                                    make-lambda
                                                                    make-sequence
                                                                    make-application
                                                                    make-conditional
                                                                    make-toplevel-define
                                                                    make-toplevel-set
                                                                    make-toplevel-ref
                                                                    make-module-set
                                                                    make-module-ref
                                                                    make-lexical-set
                                                                    make-lexical-ref
                                                                    make-primitive-ref
                                                                    make-const
                                                                    make-void)
                                                                  ((top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top)
                                                                   (top))
                                                                  ("5k"
                                                                   "5j"
                                                                   "5i"
                                                                   "5h"
                                                                   "5g"
                                                                   "5f"
                                                                   "5e"
                                                                   "5d"
                                                                   "5c"
                                                                   "5b"
                                                                   "5a"
                                                                   "59"
                                                                   "58"
                                                                   "57"
                                                                   "56"
                                                                   "55"
                                                                   "54"
                                                                   "53"
                                                                   "52"
                                                                   "51"
                                                                   "50"
                                                                   "4z"
                                                                   "4y"
                                                                   "4x"
                                                                   "4w"
                                                                   "4v"
                                                                   "4u"
                                                                   "4t"
                                                                   "4s"
                                                                   "4r"
                                                                   "4q"
                                                                   "4p"
                                                                   "4o"
                                                                   "4n"
                                                                   "4m"
                                                                   "4l"
                                                                   "4k"
                                                                   "4j"
                                                                   "4i"
                                                                   "4h"
                                                                   "4g"
                                                                   "4f"
                                                                   "4e"
                                                                   "4d"
                                                                   "4c"
                                                                   "4b"
                                                                   "4a"
                                                                   "49"
                                                                   "48"
                                                                   "47"
                                                                   "46"
                                                                   "45"
                                                                   "44"
                                                                   "43"
                                                                   "42"
                                                                   "41"
                                                                   "40"
                                                                   "3z"
                                                                   "3y"
                                                                   "3x"
                                                                   "3w"
                                                                   "3v"
                                                                   "3u"
                                                                   "3t"
                                                                   "3s"
                                                                   "3r"
                                                                   "3q"
                                                                   "3p"
                                                                   "3o"
                                                                   "3n"
                                                                   "3m"
                                                                   "3l"
                                                                   "3k"
                                                                   "3j"
                                                                   "3i"
                                                                   "3h"
                                                                   "3g"
                                                                   "3f"
                                                                   "3e"
                                                                   "3d"
                                                                   "3c"
                                                                   "3b"
                                                                   "3a"
                                                                   "39"
                                                                   "38"
                                                                   "37"
                                                                   "36"
                                                                   "35"
                                                                   "34"
                                                                   "33"
                                                                   "32"
                                                                   "31"
                                                                   "30"
                                                                   "2z"
                                                                   "2y"
                                                                   "2x"
                                                                   "2w"
                                                                   "2v"
                                                                   "2u"
                                                                   "2t"
                                                                   "2s"
                                                                   "2r"
                                                                   "2q"
                                                                   "2p"
                                                                   "2o"
                                                                   "2n"
                                                                   "2m"
                                                                   "2l"
                                                                   "2k"
                                                                   "2j"
                                                                   "2i"
                                                                   "2h"
                                                                   "2g"
                                                                   "2f"
                                                                   "2e"
                                                                   "2d"
                                                                   "2c"
                                                                   "2b"
                                                                   "2a"
                                                                   "29"
                                                                   "28"
                                                                   "27"
                                                                   "26"
                                                                   "25"
                                                                   "24"
                                                                   "23"
                                                                   "22"
                                                                   "21"
                                                                   "20"
                                                                   "1z"
                                                                   "1y"
                                                                   "1x"
                                                                   "1w"
                                                                   "1v"
                                                                   "1u"
                                                                   "1t"
                                                                   "1s"
                                                                   "1r"
                                                                   "1q"))
                                                                #(ribcage
                                                                  (define-structure
                                                                    define-expansion-accessors
                                                                    define-expansion-constructors)
                                                                  ((top)
                                                                   (top)
                                                                   (top))
                                                                  ("8"
                                                                   "7"
                                                                   "6")))
                                                               (hygiene
                                                                 guile)))
                                                          4)
                                                     #t
                                                     #f)
                                                 '...
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("of"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         expand-lambda-case
                                                         lambda*-formals
                                                         expand-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         expand-void
                                                         eval-local-transformer
                                                         expand-local-syntax
                                                         expand-body
                                                         expand-macro
                                                         expand-application
                                                         expand-expr
                                                         expand
                                                         syntax-type
                                                         parse-when-list
                                                         expand-install-global
                                                         expand-top-sequence
                                                         expand-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         with-transformer-environment
                                                         transformer-environment
                                                         resolve-identifier
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("5k"
                                                        "5j"
                                                        "5i"
                                                        "5h"
                                                        "5g"
                                                        "5f"
                                                        "5e"
                                                        "5d"
                                                        "5c"
                                                        "5b"
                                                        "5a"
                                                        "59"
                                                        "58"
                                                        "57"
                                                        "56"
                                                        "55"
                                                        "54"
                                                        "53"
                                                        "52"
                                                        "51"
                                                        "50"
                                                        "4z"
                                                        "4y"
                                                        "4x"
                                                        "4w"
                                                        "4v"
                                                        "4u"
                                                        "4t"
                                                        "4s"
                                                        "4r"
                                                        "4q"
                                                        "4p"
                                                        "4o"
                                                        "4n"
                                                        "4m"
                                                        "4l"
                                                        "4k"
                                                        "4j"
                                                        "4i"
                                                        "4h"
                                                        "4g"
                                                        "4f"
                                                        "4e"
                                                        "4d"
                                                        "4c"
                                                        "4b"
                                                        "4a"
                                                        "49"
                                                        "48"
                                                        "47"
                                                        "46"
                                                        "45"
                                                        "44"
                                                        "43"
                                                        "42"
                                                        "41"
                                                        "40"
                                                        "3z"
                                                        "3y"
                                                        "3x"
                                                        "3w"
                                                        "3v"
                                                        "3u"
                                                        "3t"
                                                        "3s"
                                                        "3r"
                                                        "3q"
                                                        "3p"
                                                        "3o"
                                                        "3n"
                                                        "3m"
                                                        "3l"
                                                        "3k"
                                                        "3j"
                                                        "3i"
                                                        "3h"
                                                        "3g"
                                                        "3f"
                                                        "3e"
                                                        "3d"
                                                        "3c"
                                                        "3b"
                                                        "3a"
                                                        "39"
                                                        "38"
                                                        "37"
                                                        "36"
                                                        "35"
                                                        "34"
                                                        "33"
                                                        "32"
                                                        "31"
                                                        "30"
                                                        "2z"
                                                        "2y"
                                                        "2x"
                                                        "2w"
                                                        "2v"
                                                        "2u"
                                                        "2t"
                                                        "2s"
                                                        "2r"
                                                        "2q"
                                                        "2p"
                                                        "2o"
                                                        "2n"
                                                        "2m"
                                                        "2l"
                                                        "2k"
                                                        "2j"
                                                        "2i"
                                                        "2h"
                                                        "2g"
                                                        "2f"
                                                        "2e"
                                                        "2d"
                                                        "2c"
                                                        "2b"
                                                        "2a"
                                                        "29"
                                                        "28"
                                                        "27"
                                                        "26"
                                                        "25"
                                                        "24"
                                                        "23"
                                                        "22"
                                                        "21"
                                                        "20"
                                                        "1z"
                                                        "1y"
                                                        "1x"
                                                        "1w"
                                                        "1v"
                                                        "1u"
                                                        "1t"
                                                        "1s"
                                                        "1r"
                                                        "1q"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("8" "7" "6")))
                                                    (hygiene guile))))
                                        (eq? (#{id-var-name 2762}#
                                               #{dots 11304}#
                                               '(()))
                                             (#{id-var-name 2762}#
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("of"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       expand-lambda-case
                                                       lambda*-formals
                                                       expand-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       expand-void
                                                       eval-local-transformer
                                                       expand-local-syntax
                                                       expand-body
                                                       expand-macro
                                                       expand-application
                                                       expand-expr
                                                       expand
                                                       syntax-type
                                                       parse-when-list
                                                       expand-install-global
                                                       expand-top-sequence
                                                       expand-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       with-transformer-environment
                                                       transformer-environment
                                                       resolve-identifier
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("5k"
                                                      "5j"
                                                      "5i"
                                                      "5h"
                                                      "5g"
                                                      "5f"
                                                      "5e"
                                                      "5d"
                                                      "5c"
                                                      "5b"
                                                      "5a"
                                                      "59"
                                                      "58"
                                                      "57"
                                                      "56"
                                                      "55"
                                                      "54"
                                                      "53"
                                                      "52"
                                                      "51"
                                                      "50"
                                                      "4z"
                                                      "4y"
                                                      "4x"
                                                      "4w"
                                                      "4v"
                                                      "4u"
                                                      "4t"
                                                      "4s"
                                                      "4r"
                                                      "4q"
                                                      "4p"
                                                      "4o"
                                                      "4n"
                                                      "4m"
                                                      "4l"
                                                      "4k"
                                                      "4j"
                                                      "4i"
                                                      "4h"
                                                      "4g"
                                                      "4f"
                                                      "4e"
                                                      "4d"
                                                      "4c"
                                                      "4b"
                                                      "4a"
                                                      "49"
                                                      "48"
                                                      "47"
                                                      "46"
                                                      "45"
                                                      "44"
                                                      "43"
                                                      "42"
                                                      "41"
                                                      "40"
                                                      "3z"
                                                      "3y"
                                                      "3x"
                                                      "3w"
                                                      "3v"
                                                      "3u"
                                                      "3t"
                                                      "3s"
                                                      "3r"
                                                      "3q"
                                                      "3p"
                                                      "3o"
                                                      "3n"
                                                      "3m"
                                                      "3l"
                                                      "3k"
                                                      "3j"
                                                      "3i"
                                                      "3h"
                                                      "3g"
                                                      "3f"
                                                      "3e"
                                                      "3d"
                                                      "3c"
                                                      "3b"
                                                      "3a"
                                                      "39"
                                                      "38"
                                                      "37"
                                                      "36"
                                                      "35"
                                                      "34"
                                                      "33"
                                                      "32"
                                                      "31"
                                                      "30"
                                                      "2z"
                                                      "2y"
                                                      "2x"
                                                      "2w"
                                                      "2v"
                                                      "2u"
                                                      "2t"
                                                      "2s"
                                                      "2r"
                                                      "2q"
                                                      "2p"
                                                      "2o"
                                                      "2n"
                                                      "2m"
                                                      "2l"
                                                      "2k"
                                                      "2j"
                                                      "2i"
                                                      "2h"
                                                      "2g"
                                                      "2f"
                                                      "2e"
                                                      "2d"
                                                      "2c"
                                                      "2b"
                                                      "2a"
                                                      "29"
                                                      "28"
                                                      "27"
                                                      "26"
                                                      "25"
                                                      "24"
                                                      "23"
                                                      "22"
                                                      "21"
                                                      "20"
                                                      "1z"
                                                      "1y"
                                                      "1x"
                                                      "1w"
                                                      "1v"
                                                      "1u"
                                                      "1t"
                                                      "1s"
                                                      "1r"
                                                      "1q"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("8" "7" "6")))
                                                  (hygiene guile))
                                               '(())))
                                        #f)
                                      #f))
                                  #{tmp 11299}#)
                                #f)
                            (@apply
                              (lambda (#{x 11404}# #{dots 11405}#)
                                (call-with-values
                                  (lambda ()
                                    (#{cvt 10974}#
                                      #{x 11404}#
                                      (#{1+}# #{n 10978}#)
                                      #{ids 10979}#))
                                  (lambda (#{p 11406}# #{ids 11407}#)
                                    (values
                                      (if (eq? #{p 11406}# 'any)
                                        'each-any
                                        (vector 'each #{p 11406}#))
                                      #{ids 11407}#))))
                              #{tmp 11299}#)
                            (let ((#{tmp 11408}#
                                    ($sc-dispatch
                                      #{p 10977}#
                                      '(any any . any))))
                              (if (if #{tmp 11408}#
                                    (@apply
                                      (lambda (#{x 11412}#
                                               #{dots 11413}#
                                               #{ys 11414}#)
                                        (if (if (if (vector? #{dots 11413}#)
                                                  (if (= (vector-length
                                                           #{dots 11413}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{dots 11413}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{dots 11413}# 1))
                                              #f)
                                          (if (eq? (if (if (vector?
                                                             #{dots 11413}#)
                                                         (if (= (vector-length
                                                                  #{dots 11413}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{dots 11413}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{dots 11413}#
                                                       1)
                                                     #{dots 11413}#)
                                                   (if (if (= (vector-length
                                                                '#(syntax-object
                                                                   ...
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(x)
                                                                      #((top))
                                                                      #("of"))
                                                                    #(ribcage
                                                                      (lambda-var-list
                                                                        gen-var
                                                                        strip
                                                                        expand-lambda-case
                                                                        lambda*-formals
                                                                        expand-simple-lambda
                                                                        lambda-formals
                                                                        ellipsis?
                                                                        expand-void
                                                                        eval-local-transformer
                                                                        expand-local-syntax
                                                                        expand-body
                                                                        expand-macro
                                                                        expand-application
                                                                        expand-expr
                                                                        expand
                                                                        syntax-type
                                                                        parse-when-list
                                                                        expand-install-global
                                                                        expand-top-sequence
                                                                        expand-sequence
                                                                        source-wrap
                                                                        wrap
                                                                        bound-id-member?
                                                                        distinct-bound-ids?
                                                                        valid-bound-ids?
                                                                        bound-id=?
                                                                        free-id=?
                                                                        with-transformer-environment
                                                                        transformer-environment
                                                                        resolve-identifier
                                                                        id-var-name
                                                                        same-marks?
                                                                        join-marks
                                                                        join-wraps
                                                                        smart-append
                                                                        make-binding-wrap
                                                                        extend-ribcage!
                                                                        make-empty-ribcage
                                                                        new-mark
                                                                        anti-mark
                                                                        the-anti-mark
                                                                        top-marked?
                                                                        top-wrap
                                                                        empty-wrap
                                                                        set-ribcage-labels!
                                                                        set-ribcage-marks!
                                                                        set-ribcage-symnames!
                                                                        ribcage-labels
                                                                        ribcage-marks
                                                                        ribcage-symnames
                                                                        ribcage?
                                                                        make-ribcage
                                                                        gen-labels
                                                                        gen-label
                                                                        make-rename
                                                                        rename-marks
                                                                        rename-new
                                                                        rename-old
                                                                        subst-rename?
                                                                        wrap-subst
                                                                        wrap-marks
                                                                        make-wrap
                                                                        id-sym-name&marks
                                                                        id-sym-name
                                                                        id?
                                                                        nonsymbol-id?
                                                                        global-extend
                                                                        lookup
                                                                        macros-only-env
                                                                        extend-var-env
                                                                        extend-env
                                                                        null-env
                                                                        binding-value
                                                                        binding-type
                                                                        make-binding
                                                                        arg-check
                                                                        source-annotation
                                                                        no-source
                                                                        set-syntax-object-module!
                                                                        set-syntax-object-wrap!
                                                                        set-syntax-object-expression!
                                                                        syntax-object-module
                                                                        syntax-object-wrap
                                                                        syntax-object-expression
                                                                        syntax-object?
                                                                        make-syntax-object
                                                                        build-lexical-var
                                                                        build-letrec
                                                                        build-named-let
                                                                        build-let
                                                                        build-sequence
                                                                        build-data
                                                                        build-primref
                                                                        build-lambda-case
                                                                        build-case-lambda
                                                                        build-simple-lambda
                                                                        build-global-definition
                                                                        build-global-assignment
                                                                        build-global-reference
                                                                        analyze-variable
                                                                        build-lexical-assignment
                                                                        build-lexical-reference
                                                                        build-dynlet
                                                                        build-conditional
                                                                        build-application
                                                                        build-void
                                                                        maybe-name-value!
                                                                        decorate-source
                                                                        get-global-definition-hook
                                                                        put-global-definition-hook
                                                                        gensym-hook
                                                                        local-eval-hook
                                                                        top-level-eval-hook
                                                                        fx<
                                                                        fx=
                                                                        fx-
                                                                        fx+
                                                                        set-lambda-meta!
                                                                        lambda-meta
                                                                        lambda?
                                                                        make-dynlet
                                                                        make-letrec
                                                                        make-let
                                                                        make-lambda-case
                                                                        make-lambda
                                                                        make-sequence
                                                                        make-application
                                                                        make-conditional
                                                                        make-toplevel-define
                                                                        make-toplevel-set
                                                                        make-toplevel-ref
                                                                        make-module-set
                                                                        make-module-ref
                                                                        make-lexical-set
                                                                        make-lexical-ref
                                                                        make-primitive-ref
                                                                        make-const
                                                                        make-void)
                                                                      ((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                      ("5k"
                                                                       "5j"
                                                                       "5i"
                                                                       "5h"
                                                                       "5g"
                                                                       "5f"
                                                                       "5e"
                                                                       "5d"
                                                                       "5c"
                                                                       "5b"
                                                                       "5a"
                                                                       "59"
                                                                       "58"
                                                                       "57"
                                                                       "56"
                                                                       "55"
                                                                       "54"
                                                                       "53"
                                                                       "52"
                                                                       "51"
                                                                       "50"
                                                                       "4z"
                                                                       "4y"
                                                                       "4x"
                                                                       "4w"
                                                                       "4v"
                                                                       "4u"
                                                                       "4t"
                                                                       "4s"
                                                                       "4r"
                                                                       "4q"
                                                                       "4p"
                                                                       "4o"
                                                                       "4n"
                                                                       "4m"
                                                                       "4l"
                                                                       "4k"
                                                                       "4j"
                                                                       "4i"
                                                                       "4h"
                                                                       "4g"
                                                                       "4f"
                                                                       "4e"
                                                                       "4d"
                                                                       "4c"
                                                                       "4b"
                                                                       "4a"
                                                                       "49"
                                                                       "48"
                                                                       "47"
                                                                       "46"
                                                                       "45"
                                                                       "44"
                                                                       "43"
                                                                       "42"
                                                                       "41"
                                                                       "40"
                                                                       "3z"
                                                                       "3y"
                                                                       "3x"
                                                                       "3w"
                                                                       "3v"
                                                                       "3u"
                                                                       "3t"
                                                                       "3s"
                                                                       "3r"
                                                                       "3q"
                                                                       "3p"
                                                                       "3o"
                                                                       "3n"
                                                                       "3m"
                                                                       "3l"
                                                                       "3k"
                                                                       "3j"
                                                                       "3i"
                                                                       "3h"
                                                                       "3g"
                                                                       "3f"
                                                                       "3e"
                                                                       "3d"
                                                                       "3c"
                                                                       "3b"
                                                                       "3a"
                                                                       "39"
                                                                       "38"
                                                                       "37"
                                                                       "36"
                                                                       "35"
                                                                       "34"
                                                                       "33"
                                                                       "32"
                                                                       "31"
                                                                       "30"
                                                                       "2z"
                                                                       "2y"
                                                                       "2x"
                                                                       "2w"
                                                                       "2v"
                                                                       "2u"
                                                                       "2t"
                                                                       "2s"
                                                                       "2r"
                                                                       "2q"
                                                                       "2p"
                                                                       "2o"
                                                                       "2n"
                                                                       "2m"
                                                                       "2l"
                                                                       "2k"
                                                                       "2j"
                                                                       "2i"
                                                                       "2h"
                                                                       "2g"
                                                                       "2f"
                                                                       "2e"
                                                                       "2d"
                                                                       "2c"
                                                                       "2b"
                                                                       "2a"
                                                                       "29"
                                                                       "28"
                                                                       "27"
                                                                       "26"
                                                                       "25"
                                                                       "24"
                                                                       "23"
                                                                       "22"
                                                                       "21"
                                                                       "20"
                                                                       "1z"
                                                                       "1y"
                                                                       "1x"
                                                                       "1w"
                                                                       "1v"
                                                                       "1u"
                                                                       "1t"
                                                                       "1s"
                                                                       "1r"
                                                                       "1q"))
                                                                    #(ribcage
                                                                      (define-structure
                                                                        define-expansion-accessors
                                                                        define-expansion-constructors)
                                                                      ((top)
                                                                       (top)
                                                                       (top))
                                                                      ("8"
                                                                       "7"
                                                                       "6")))
                                                                   (hygiene
                                                                     guile)))
                                                              4)
                                                         #t
                                                         #f)
                                                     '...
                                                     '#(syntax-object
                                                        ...
                                                        ((top)
                                                         #(ribcage () () ())
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("of"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             expand-lambda-case
                                                             lambda*-formals
                                                             expand-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             expand-void
                                                             eval-local-transformer
                                                             expand-local-syntax
                                                             expand-body
                                                             expand-macro
                                                             expand-application
                                                             expand-expr
                                                             expand
                                                             syntax-type
                                                             parse-when-list
                                                             expand-install-global
                                                             expand-top-sequence
                                                             expand-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             with-transformer-environment
                                                             transformer-environment
                                                             resolve-identifier
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("5k"
                                                            "5j"
                                                            "5i"
                                                            "5h"
                                                            "5g"
                                                            "5f"
                                                            "5e"
                                                            "5d"
                                                            "5c"
                                                            "5b"
                                                            "5a"
                                                            "59"
                                                            "58"
                                                            "57"
                                                            "56"
                                                            "55"
                                                            "54"
                                                            "53"
                                                            "52"
                                                            "51"
                                                            "50"
                                                            "4z"
                                                            "4y"
                                                            "4x"
                                                            "4w"
                                                            "4v"
                                                            "4u"
                                                            "4t"
                                                            "4s"
                                                            "4r"
                                                            "4q"
                                                            "4p"
                                                            "4o"
                                                            "4n"
                                                            "4m"
                                                            "4l"
                                                            "4k"
                                                            "4j"
                                                            "4i"
                                                            "4h"
                                                            "4g"
                                                            "4f"
                                                            "4e"
                                                            "4d"
                                                            "4c"
                                                            "4b"
                                                            "4a"
                                                            "49"
                                                            "48"
                                                            "47"
                                                            "46"
                                                            "45"
                                                            "44"
                                                            "43"
                                                            "42"
                                                            "41"
                                                            "40"
                                                            "3z"
                                                            "3y"
                                                            "3x"
                                                            "3w"
                                                            "3v"
                                                            "3u"
                                                            "3t"
                                                            "3s"
                                                            "3r"
                                                            "3q"
                                                            "3p"
                                                            "3o"
                                                            "3n"
                                                            "3m"
                                                            "3l"
                                                            "3k"
                                                            "3j"
                                                            "3i"
                                                            "3h"
                                                            "3g"
                                                            "3f"
                                                            "3e"
                                                            "3d"
                                                            "3c"
                                                            "3b"
                                                            "3a"
                                                            "39"
                                                            "38"
                                                            "37"
                                                            "36"
                                                            "35"
                                                            "34"
                                                            "33"
                                                            "32"
                                                            "31"
                                                            "30"
                                                            "2z"
                                                            "2y"
                                                            "2x"
                                                            "2w"
                                                            "2v"
                                                            "2u"
                                                            "2t"
                                                            "2s"
                                                            "2r"
                                                            "2q"
                                                            "2p"
                                                            "2o"
                                                            "2n"
                                                            "2m"
                                                            "2l"
                                                            "2k"
                                                            "2j"
                                                            "2i"
                                                            "2h"
                                                            "2g"
                                                            "2f"
                                                            "2e"
                                                            "2d"
                                                            "2c"
                                                            "2b"
                                                            "2a"
                                                            "29"
                                                            "28"
                                                            "27"
                                                            "26"
                                                            "25"
                                                            "24"
                                                            "23"
                                                            "22"
                                                            "21"
                                                            "20"
                                                            "1z"
                                                            "1y"
                                                            "1x"
                                                            "1w"
                                                            "1v"
                                                            "1u"
                                                            "1t"
                                                            "1s"
                                                            "1r"
                                                            "1q"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("8" "7" "6")))
                                                        (hygiene guile))))
                                            (eq? (#{id-var-name 2762}#
                                                   #{dots 11413}#
                                                   '(()))
                                                 (#{id-var-name 2762}#
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("of"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           expand-lambda-case
                                                           lambda*-formals
                                                           expand-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           expand-void
                                                           eval-local-transformer
                                                           expand-local-syntax
                                                           expand-body
                                                           expand-macro
                                                           expand-application
                                                           expand-expr
                                                           expand
                                                           syntax-type
                                                           parse-when-list
                                                           expand-install-global
                                                           expand-top-sequence
                                                           expand-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           with-transformer-environment
                                                           transformer-environment
                                                           resolve-identifier
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("5k"
                                                          "5j"
                                                          "5i"
                                                          "5h"
                                                          "5g"
                                                          "5f"
                                                          "5e"
                                                          "5d"
                                                          "5c"
                                                          "5b"
                                                          "5a"
                                                          "59"
                                                          "58"
                                                          "57"
                                                          "56"
                                                          "55"
                                                          "54"
                                                          "53"
                                                          "52"
                                                          "51"
                                                          "50"
                                                          "4z"
                                                          "4y"
                                                          "4x"
                                                          "4w"
                                                          "4v"
                                                          "4u"
                                                          "4t"
                                                          "4s"
                                                          "4r"
                                                          "4q"
                                                          "4p"
                                                          "4o"
                                                          "4n"
                                                          "4m"
                                                          "4l"
                                                          "4k"
                                                          "4j"
                                                          "4i"
                                                          "4h"
                                                          "4g"
                                                          "4f"
                                                          "4e"
                                                          "4d"
                                                          "4c"
                                                          "4b"
                                                          "4a"
                                                          "49"
                                                          "48"
                                                          "47"
                                                          "46"
                                                          "45"
                                                          "44"
                                                          "43"
                                                          "42"
                                                          "41"
                                                          "40"
                                                          "3z"
                                                          "3y"
                                                          "3x"
                                                          "3w"
                                                          "3v"
                                                          "3u"
                                                          "3t"
                                                          "3s"
                                                          "3r"
                                                          "3q"
                                                          "3p"
                                                          "3o"
                                                          "3n"
                                                          "3m"
                                                          "3l"
                                                          "3k"
                                                          "3j"
                                                          "3i"
                                                          "3h"
                                                          "3g"
                                                          "3f"
                                                          "3e"
                                                          "3d"
                                                          "3c"
                                                          "3b"
                                                          "3a"
                                                          "39"
                                                          "38"
                                                          "37"
                                                          "36"
                                                          "35"
                                                          "34"
                                                          "33"
                                                          "32"
                                                          "31"
                                                          "30"
                                                          "2z"
                                                          "2y"
                                                          "2x"
                                                          "2w"
                                                          "2v"
                                                          "2u"
                                                          "2t"
                                                          "2s"
                                                          "2r"
                                                          "2q"
                                                          "2p"
                                                          "2o"
                                                          "2n"
                                                          "2m"
                                                          "2l"
                                                          "2k"
                                                          "2j"
                                                          "2i"
                                                          "2h"
                                                          "2g"
                                                          "2f"
                                                          "2e"
                                                          "2d"
                                                          "2c"
                                                          "2b"
                                                          "2a"
                                                          "29"
                                                          "28"
                                                          "27"
                                                          "26"
                                                          "25"
                                                          "24"
                                                          "23"
                                                          "22"
                                                          "21"
                                                          "20"
                                                          "1z"
                                                          "1y"
                                                          "1x"
                                                          "1w"
                                                          "1v"
                                                          "1u"
                                                          "1t"
                                                          "1s"
                                                          "1r"
                                                          "1q"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("8" "7" "6")))
                                                      (hygiene guile))
                                                   '(())))
                                            #f)
                                          #f))
                                      #{tmp 11408}#)
                                    #f)
                                (@apply
                                  (lambda (#{x 11514}#
                                           #{dots 11515}#
                                           #{ys 11516}#)
                                    (call-with-values
                                      (lambda ()
                                        (#{cvt* 10972}#
                                          #{ys 11516}#
                                          #{n 10978}#
                                          #{ids 10979}#))
                                      (lambda (#{ys 11519}# #{ids 11520}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt 10974}#
                                              #{x 11514}#
                                              (#{1+}# #{n 10978}#)
                                              #{ids 11520}#))
                                          (lambda (#{x 11521}# #{ids 11522}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{v-reverse 10973}#
                                                  #{ys 11519}#))
                                              (lambda (#{ys 11555}#
                                                       #{e 11556}#)
                                                (values
                                                  (vector
                                                    'each+
                                                    #{x 11521}#
                                                    #{ys 11555}#
                                                    #{e 11556}#)
                                                  #{ids 11522}#))))))))
                                  #{tmp 11408}#)
                                (let ((#{tmp 11557}#
                                        ($sc-dispatch
                                          #{p 10977}#
                                          '(any . any))))
                                  (if #{tmp 11557}#
                                    (@apply
                                      (lambda (#{x 11561}# #{y 11562}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{cvt 10974}#
                                              #{y 11562}#
                                              #{n 10978}#
                                              #{ids 10979}#))
                                          (lambda (#{y 11563}# #{ids 11564}#)
                                            (call-with-values
                                              (lambda ()
                                                (#{cvt 10974}#
                                                  #{x 11561}#
                                                  #{n 10978}#
                                                  #{ids 11564}#))
                                              (lambda (#{x 11565}#
                                                       #{ids 11566}#)
                                                (values
                                                  (cons #{x 11565}#
                                                        #{y 11563}#)
                                                  #{ids 11566}#))))))
                                      #{tmp 11557}#)
                                    (let ((#{tmp 11567}#
                                            ($sc-dispatch #{p 10977}# '())))
                                      (if #{tmp 11567}#
                                        (@apply
                                          (lambda ()
                                            (values '() #{ids 10979}#))
                                          #{tmp 11567}#)
                                        (let ((#{tmp 11571}#
                                                ($sc-dispatch
                                                  #{p 10977}#
                                                  '#(vector each-any))))
                                          (if #{tmp 11571}#
                                            (@apply
                                              (lambda (#{x 11575}#)
                                                (call-with-values
                                                  (lambda ()
                                                    (#{cvt 10974}#
                                                      #{x 11575}#
                                                      #{n 10978}#
                                                      #{ids 10979}#))
                                                  (lambda (#{p 11576}#
                                                           #{ids 11577}#)
                                                    (values
                                                      (vector
                                                        'vector
                                                        #{p 11576}#)
                                                      #{ids 11577}#))))
                                              #{tmp 11571}#)
                                            (values
                                              (vector
                                                'atom
                                                (#{strip 2791}#
                                                  #{p 10977}#
                                                  '(())))
                                              #{ids 10979}#)))))))))))))))
                 (#{cvt 10974}# #{pattern 10970}# 0 '()))))
           (#{build-dispatch-call 9376}#
             (lambda (#{pvars 11690}#
                      #{exp 11691}#
                      #{y 11692}#
                      #{r 11693}#
                      #{mod 11694}#)
               (let ((#{ids 11695}# (map car #{pvars 11690}#)))
                 (begin
                   (map cdr #{pvars 11690}#)
                   (let ((#{labels 11697}#
                           (#{gen-labels 2746}# #{ids 11695}#))
                         (#{new-vars 11698}#
                           (map #{gen-var 2792}# #{ids 11695}#)))
                     (#{build-application 2710}#
                       #f
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'apply)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'apply
                           #f))
                       (list (#{build-simple-lambda 2719}#
                               #f
                               (map syntax->datum #{ids 11695}#)
                               #f
                               #{new-vars 11698}#
                               '()
                               (#{expand 2778}#
                                 #{exp 11691}#
                                 (#{extend-env 2737}#
                                   #{labels 11697}#
                                   (map (lambda (#{var 12017}# #{level 12018}#)
                                          (cons 'syntax
                                                (cons #{var 12017}#
                                                      #{level 12018}#)))
                                        #{new-vars 11698}#
                                        (map cdr #{pvars 11690}#))
                                   #{r 11693}#)
                                 (#{make-binding-wrap 2757}#
                                   #{ids 11695}#
                                   #{labels 11697}#
                                   '(()))
                                 #{mod 11694}#))
                             #{y 11692}#)))))))
           (#{gen-clause 9377}#
             (lambda (#{x 10342}#
                      #{keys 10343}#
                      #{clauses 10344}#
                      #{r 10345}#
                      #{pat 10346}#
                      #{fender 10347}#
                      #{exp 10348}#
                      #{mod 10349}#)
               (call-with-values
                 (lambda ()
                   (#{convert-pattern 9375}#
                     #{pat 10346}#
                     #{keys 10343}#))
                 (lambda (#{p 10504}# #{pvars 10505}#)
                   (if (not (#{distinct-bound-ids? 2769}#
                              (map car #{pvars 10505}#)))
                     (syntax-violation
                       'syntax-case
                       "duplicate pattern variable"
                       #{pat 10346}#)
                     (if (not (and-map
                                (lambda (#{x 10621}#)
                                  (not (let ((#{x 10625}# (car #{x 10621}#)))
                                         (if (if (if (vector? #{x 10625}#)
                                                   (if (= (vector-length
                                                            #{x 10625}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x 10625}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (symbol?
                                                 (vector-ref #{x 10625}# 1))
                                               #f)
                                           (if (eq? (if (if (vector?
                                                              #{x 10625}#)
                                                          (if (= (vector-length
                                                                   #{x 10625}#)
                                                                 4)
                                                            (eq? (vector-ref
                                                                   #{x 10625}#
                                                                   0)
                                                                 'syntax-object)
                                                            #f)
                                                          #f)
                                                      (vector-ref
                                                        #{x 10625}#
                                                        1)
                                                      #{x 10625}#)
                                                    (if (if (= (vector-length
                                                                 '#(syntax-object
                                                                    ...
                                                                    ((top)
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(x)
                                                                       #((top))
                                                                       #("of"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         expand-lambda-case
                                                                         lambda*-formals
                                                                         expand-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         expand-void
                                                                         eval-local-transformer
                                                                         expand-local-syntax
                                                                         expand-body
                                                                         expand-macro
                                                                         expand-application
                                                                         expand-expr
                                                                         expand
                                                                         syntax-type
                                                                         parse-when-list
                                                                         expand-install-global
                                                                         expand-top-sequence
                                                                         expand-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         with-transformer-environment
                                                                         transformer-environment
                                                                         resolve-identifier
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("5k"
                                                                        "5j"
                                                                        "5i"
                                                                        "5h"
                                                                        "5g"
                                                                        "5f"
                                                                        "5e"
                                                                        "5d"
                                                                        "5c"
                                                                        "5b"
                                                                        "5a"
                                                                        "59"
                                                                        "58"
                                                                        "57"
                                                                        "56"
                                                                        "55"
                                                                        "54"
                                                                        "53"
                                                                        "52"
                                                                        "51"
                                                                        "50"
                                                                        "4z"
                                                                        "4y"
                                                                        "4x"
                                                                        "4w"
                                                                        "4v"
                                                                        "4u"
                                                                        "4t"
                                                                        "4s"
                                                                        "4r"
                                                                        "4q"
                                                                        "4p"
                                                                        "4o"
                                                                        "4n"
                                                                        "4m"
                                                                        "4l"
                                                                        "4k"
                                                                        "4j"
                                                                        "4i"
                                                                        "4h"
                                                                        "4g"
                                                                        "4f"
                                                                        "4e"
                                                                        "4d"
                                                                        "4c"
                                                                        "4b"
                                                                        "4a"
                                                                        "49"
                                                                        "48"
                                                                        "47"
                                                                        "46"
                                                                        "45"
                                                                        "44"
                                                                        "43"
                                                                        "42"
                                                                        "41"
                                                                        "40"
                                                                        "3z"
                                                                        "3y"
                                                                        "3x"
                                                                        "3w"
                                                                        "3v"
                                                                        "3u"
                                                                        "3t"
                                                                        "3s"
                                                                        "3r"
                                                                        "3q"
                                                                        "3p"
                                                                        "3o"
                                                                        "3n"
                                                                        "3m"
                                                                        "3l"
                                                                        "3k"
                                                                        "3j"
                                                                        "3i"
                                                                        "3h"
                                                                        "3g"
                                                                        "3f"
                                                                        "3e"
                                                                        "3d"
                                                                        "3c"
                                                                        "3b"
                                                                        "3a"
                                                                        "39"
                                                                        "38"
                                                                        "37"
                                                                        "36"
                                                                        "35"
                                                                        "34"
                                                                        "33"
                                                                        "32"
                                                                        "31"
                                                                        "30"
                                                                        "2z"
                                                                        "2y"
                                                                        "2x"
                                                                        "2w"
                                                                        "2v"
                                                                        "2u"
                                                                        "2t"
                                                                        "2s"
                                                                        "2r"
                                                                        "2q"
                                                                        "2p"
                                                                        "2o"
                                                                        "2n"
                                                                        "2m"
                                                                        "2l"
                                                                        "2k"
                                                                        "2j"
                                                                        "2i"
                                                                        "2h"
                                                                        "2g"
                                                                        "2f"
                                                                        "2e"
                                                                        "2d"
                                                                        "2c"
                                                                        "2b"
                                                                        "2a"
                                                                        "29"
                                                                        "28"
                                                                        "27"
                                                                        "26"
                                                                        "25"
                                                                        "24"
                                                                        "23"
                                                                        "22"
                                                                        "21"
                                                                        "20"
                                                                        "1z"
                                                                        "1y"
                                                                        "1x"
                                                                        "1w"
                                                                        "1v"
                                                                        "1u"
                                                                        "1t"
                                                                        "1s"
                                                                        "1r"
                                                                        "1q"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("8"
                                                                        "7"
                                                                        "6")))
                                                                    (hygiene
                                                                      guile)))
                                                               4)
                                                          #t
                                                          #f)
                                                      '...
                                                      '#(syntax-object
                                                         ...
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("of"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              expand-lambda-case
                                                              lambda*-formals
                                                              expand-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              expand-void
                                                              eval-local-transformer
                                                              expand-local-syntax
                                                              expand-body
                                                              expand-macro
                                                              expand-application
                                                              expand-expr
                                                              expand
                                                              syntax-type
                                                              parse-when-list
                                                              expand-install-global
                                                              expand-top-sequence
                                                              expand-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              with-transformer-environment
                                                              transformer-environment
                                                              resolve-identifier
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("5k"
                                                             "5j"
                                                             "5i"
                                                             "5h"
                                                             "5g"
                                                             "5f"
                                                             "5e"
                                                             "5d"
                                                             "5c"
                                                             "5b"
                                                             "5a"
                                                             "59"
                                                             "58"
                                                             "57"
                                                             "56"
                                                             "55"
                                                             "54"
                                                             "53"
                                                             "52"
                                                             "51"
                                                             "50"
                                                             "4z"
                                                             "4y"
                                                             "4x"
                                                             "4w"
                                                             "4v"
                                                             "4u"
                                                             "4t"
                                                             "4s"
                                                             "4r"
                                                             "4q"
                                                             "4p"
                                                             "4o"
                                                             "4n"
                                                             "4m"
                                                             "4l"
                                                             "4k"
                                                             "4j"
                                                             "4i"
                                                             "4h"
                                                             "4g"
                                                             "4f"
                                                             "4e"
                                                             "4d"
                                                             "4c"
                                                             "4b"
                                                             "4a"
                                                             "49"
                                                             "48"
                                                             "47"
                                                             "46"
                                                             "45"
                                                             "44"
                                                             "43"
                                                             "42"
                                                             "41"
                                                             "40"
                                                             "3z"
                                                             "3y"
                                                             "3x"
                                                             "3w"
                                                             "3v"
                                                             "3u"
                                                             "3t"
                                                             "3s"
                                                             "3r"
                                                             "3q"
                                                             "3p"
                                                             "3o"
                                                             "3n"
                                                             "3m"
                                                             "3l"
                                                             "3k"
                                                             "3j"
                                                             "3i"
                                                             "3h"
                                                             "3g"
                                                             "3f"
                                                             "3e"
                                                             "3d"
                                                             "3c"
                                                             "3b"
                                                             "3a"
                                                             "39"
                                                             "38"
                                                             "37"
                                                             "36"
                                                             "35"
                                                             "34"
                                                             "33"
                                                             "32"
                                                             "31"
                                                             "30"
                                                             "2z"
                                                             "2y"
                                                             "2x"
                                                             "2w"
                                                             "2v"
                                                             "2u"
                                                             "2t"
                                                             "2s"
                                                             "2r"
                                                             "2q"
                                                             "2p"
                                                             "2o"
                                                             "2n"
                                                             "2m"
                                                             "2l"
                                                             "2k"
                                                             "2j"
                                                             "2i"
                                                             "2h"
                                                             "2g"
                                                             "2f"
                                                             "2e"
                                                             "2d"
                                                             "2c"
                                                             "2b"
                                                             "2a"
                                                             "29"
                                                             "28"
                                                             "27"
                                                             "26"
                                                             "25"
                                                             "24"
                                                             "23"
                                                             "22"
                                                             "21"
                                                             "20"
                                                             "1z"
                                                             "1y"
                                                             "1x"
                                                             "1w"
                                                             "1v"
                                                             "1u"
                                                             "1t"
                                                             "1s"
                                                             "1r"
                                                             "1q"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("8" "7" "6")))
                                                         (hygiene guile))))
                                             (eq? (#{id-var-name 2762}#
                                                    #{x 10625}#
                                                    '(()))
                                                  (#{id-var-name 2762}#
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("of"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            expand-lambda-case
                                                            lambda*-formals
                                                            expand-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            expand-void
                                                            eval-local-transformer
                                                            expand-local-syntax
                                                            expand-body
                                                            expand-macro
                                                            expand-application
                                                            expand-expr
                                                            expand
                                                            syntax-type
                                                            parse-when-list
                                                            expand-install-global
                                                            expand-top-sequence
                                                            expand-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            with-transformer-environment
                                                            transformer-environment
                                                            resolve-identifier
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("5k"
                                                           "5j"
                                                           "5i"
                                                           "5h"
                                                           "5g"
                                                           "5f"
                                                           "5e"
                                                           "5d"
                                                           "5c"
                                                           "5b"
                                                           "5a"
                                                           "59"
                                                           "58"
                                                           "57"
                                                           "56"
                                                           "55"
                                                           "54"
                                                           "53"
                                                           "52"
                                                           "51"
                                                           "50"
                                                           "4z"
                                                           "4y"
                                                           "4x"
                                                           "4w"
                                                           "4v"
                                                           "4u"
                                                           "4t"
                                                           "4s"
                                                           "4r"
                                                           "4q"
                                                           "4p"
                                                           "4o"
                                                           "4n"
                                                           "4m"
                                                           "4l"
                                                           "4k"
                                                           "4j"
                                                           "4i"
                                                           "4h"
                                                           "4g"
                                                           "4f"
                                                           "4e"
                                                           "4d"
                                                           "4c"
                                                           "4b"
                                                           "4a"
                                                           "49"
                                                           "48"
                                                           "47"
                                                           "46"
                                                           "45"
                                                           "44"
                                                           "43"
                                                           "42"
                                                           "41"
                                                           "40"
                                                           "3z"
                                                           "3y"
                                                           "3x"
                                                           "3w"
                                                           "3v"
                                                           "3u"
                                                           "3t"
                                                           "3s"
                                                           "3r"
                                                           "3q"
                                                           "3p"
                                                           "3o"
                                                           "3n"
                                                           "3m"
                                                           "3l"
                                                           "3k"
                                                           "3j"
                                                           "3i"
                                                           "3h"
                                                           "3g"
                                                           "3f"
                                                           "3e"
                                                           "3d"
                                                           "3c"
                                                           "3b"
                                                           "3a"
                                                           "39"
                                                           "38"
                                                           "37"
                                                           "36"
                                                           "35"
                                                           "34"
                                                           "33"
                                                           "32"
                                                           "31"
                                                           "30"
                                                           "2z"
                                                           "2y"
                                                           "2x"
                                                           "2w"
                                                           "2v"
                                                           "2u"
                                                           "2t"
                                                           "2s"
                                                           "2r"
                                                           "2q"
                                                           "2p"
                                                           "2o"
                                                           "2n"
                                                           "2m"
                                                           "2l"
                                                           "2k"
                                                           "2j"
                                                           "2i"
                                                           "2h"
                                                           "2g"
                                                           "2f"
                                                           "2e"
                                                           "2d"
                                                           "2c"
                                                           "2b"
                                                           "2a"
                                                           "29"
                                                           "28"
                                                           "27"
                                                           "26"
                                                           "25"
                                                           "24"
                                                           "23"
                                                           "22"
                                                           "21"
                                                           "20"
                                                           "1z"
                                                           "1y"
                                                           "1x"
                                                           "1w"
                                                           "1v"
                                                           "1u"
                                                           "1t"
                                                           "1s"
                                                           "1r"
                                                           "1q"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("8" "7" "6")))
                                                       (hygiene guile))
                                                    '(())))
                                             #f)
                                           #f))))
                                #{pvars 10505}#))
                       (syntax-violation
                         'syntax-case
                         "misplaced ellipsis"
                         #{pat 10346}#)
                       (let ((#{y 10701}#
                               (gensym
                                 (string-append (symbol->string 'tmp) " "))))
                         (#{build-application 2710}#
                           #f
                           (let ((#{req 10844}# (list 'tmp))
                                 (#{vars 10846}# (list #{y 10701}#))
                                 (#{exp 10848}#
                                   (let ((#{y 10865}#
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 3)
                                             #f
                                             'tmp
                                             #{y 10701}#)))
                                     (let ((#{test-exp 10869}#
                                             (let ((#{tmp 10878}#
                                                     ($sc-dispatch
                                                       #{fender 10347}#
                                                       '#(atom #t))))
                                               (if #{tmp 10878}#
                                                 (@apply
                                                   (lambda () #{y 10865}#)
                                                   #{tmp 10878}#)
                                                 (let ((#{then-exp 10896}#
                                                         (#{build-dispatch-call 9376}#
                                                           #{pvars 10505}#
                                                           #{fender 10347}#
                                                           #{y 10865}#
                                                           #{r 10345}#
                                                           #{mod 10349}#))
                                                       (#{else-exp 10897}#
                                                         (make-struct/no-tail
                                                           (vector-ref
                                                             %expanded-vtables
                                                             1)
                                                           #f
                                                           #f)))
                                                   (make-struct/no-tail
                                                     (vector-ref
                                                       %expanded-vtables
                                                       10)
                                                     #f
                                                     #{y 10865}#
                                                     #{then-exp 10896}#
                                                     #{else-exp 10897}#)))))
                                           (#{then-exp 10870}#
                                             (#{build-dispatch-call 9376}#
                                               #{pvars 10505}#
                                               #{exp 10348}#
                                               #{y 10865}#
                                               #{r 10345}#
                                               #{mod 10349}#))
                                           (#{else-exp 10871}#
                                             (#{gen-syntax-case 9378}#
                                               #{x 10342}#
                                               #{keys 10343}#
                                               #{clauses 10344}#
                                               #{r 10345}#
                                               #{mod 10349}#)))
                                       (make-struct/no-tail
                                         (vector-ref %expanded-vtables 10)
                                         #f
                                         #{test-exp 10869}#
                                         #{then-exp 10870}#
                                         #{else-exp 10871}#)))))
                             (let ((#{body 10853}#
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 14)
                                       #f
                                       #{req 10844}#
                                       #f
                                       #f
                                       #f
                                       '()
                                       #{vars 10846}#
                                       #{exp 10848}#
                                       #f)))
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 13)
                                 #f
                                 '()
                                 #{body 10853}#)))
                           (list (if (eq? #{p 10504}# 'any)
                                   (let ((#{fun-exp 10919}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               'list)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               'list
                                               #f)))
                                         (#{arg-exps 10920}#
                                           (list #{x 10342}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp 10919}#
                                       #{arg-exps 10920}#))
                                   (let ((#{fun-exp 10943}#
                                           (if (equal?
                                                 (module-name (current-module))
                                                 '(guile))
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 7)
                                               #f
                                               '$sc-dispatch)
                                             (make-struct/no-tail
                                               (vector-ref %expanded-vtables 5)
                                               #f
                                               '(guile)
                                               '$sc-dispatch
                                               #f)))
                                         (#{arg-exps 10944}#
                                           (list #{x 10342}#
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     1)
                                                   #f
                                                   #{p 10504}#))))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 11)
                                       #f
                                       #{fun-exp 10943}#
                                       #{arg-exps 10944}#))))))))))))
           (#{gen-syntax-case 9378}#
             (lambda (#{x 9777}#
                      #{keys 9778}#
                      #{clauses 9779}#
                      #{r 9780}#
                      #{mod 9781}#)
               (if (null? #{clauses 9779}#)
                 (let ((#{fun-exp 9786}#
                         (if (equal? (module-name (current-module)) '(guile))
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 7)
                             #f
                             'syntax-violation)
                           (make-struct/no-tail
                             (vector-ref %expanded-vtables 5)
                             #f
                             '(guile)
                             'syntax-violation
                             #f)))
                       (#{arg-exps 9787}#
                         (list (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 #f)
                               (make-struct/no-tail
                                 (vector-ref %expanded-vtables 1)
                                 #f
                                 "source expression failed to match any pattern")
                               #{x 9777}#)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 11)
                     #f
                     #{fun-exp 9786}#
                     #{arg-exps 9787}#))
                 (let ((#{tmp 9820}# (car #{clauses 9779}#)))
                   (let ((#{tmp 9821}#
                           ($sc-dispatch #{tmp 9820}# '(any any))))
                     (if #{tmp 9821}#
                       (@apply
                         (lambda (#{pat 9823}# #{exp 9824}#)
                           (if (if (if (symbol? #{pat 9823}#)
                                     #t
                                     (if (if (vector? #{pat 9823}#)
                                           (if (= (vector-length #{pat 9823}#)
                                                  4)
                                             (eq? (vector-ref #{pat 9823}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (symbol? (vector-ref #{pat 9823}# 1))
                                       #f))
                                 (and-map
                                   (lambda (#{x 9851}#)
                                     (not (if (eq? (if (if (vector?
                                                             #{pat 9823}#)
                                                         (if (= (vector-length
                                                                  #{pat 9823}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{pat 9823}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref
                                                       #{pat 9823}#
                                                       1)
                                                     #{pat 9823}#)
                                                   (if (if (vector? #{x 9851}#)
                                                         (if (= (vector-length
                                                                  #{x 9851}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{x 9851}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (vector-ref #{x 9851}# 1)
                                                     #{x 9851}#))
                                            (eq? (#{id-var-name 2762}#
                                                   #{pat 9823}#
                                                   '(()))
                                                 (#{id-var-name 2762}#
                                                   #{x 9851}#
                                                   '(())))
                                            #f)))
                                   (cons '#(syntax-object
                                            ...
                                            ((top)
                                             #(ribcage
                                               #(pat exp)
                                               #((top) (top))
                                               #("177" "178"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x keys clauses r mod)
                                               #((top) (top) (top) (top) (top))
                                               #("172"
                                                 "173"
                                                 "174"
                                                 "175"
                                                 "176"))
                                             #(ribcage
                                               (gen-syntax-case
                                                 gen-clause
                                                 build-dispatch-call
                                                 convert-pattern)
                                               ((top) (top) (top) (top))
                                               ("151" "150" "14z" "14y"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 expand-lambda-case
                                                 lambda*-formals
                                                 expand-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 expand-void
                                                 eval-local-transformer
                                                 expand-local-syntax
                                                 expand-body
                                                 expand-macro
                                                 expand-application
                                                 expand-expr
                                                 expand
                                                 syntax-type
                                                 parse-when-list
                                                 expand-install-global
                                                 expand-top-sequence
                                                 expand-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 with-transformer-environment
                                                 transformer-environment
                                                 resolve-identifier
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("5k"
                                                "5j"
                                                "5i"
                                                "5h"
                                                "5g"
                                                "5f"
                                                "5e"
                                                "5d"
                                                "5c"
                                                "5b"
                                                "5a"
                                                "59"
                                                "58"
                                                "57"
                                                "56"
                                                "55"
                                                "54"
                                                "53"
                                                "52"
                                                "51"
                                                "50"
                                                "4z"
                                                "4y"
                                                "4x"
                                                "4w"
                                                "4v"
                                                "4u"
                                                "4t"
                                                "4s"
                                                "4r"
                                                "4q"
                                                "4p"
                                                "4o"
                                                "4n"
                                                "4m"
                                                "4l"
                                                "4k"
                                                "4j"
                                                "4i"
                                                "4h"
                                                "4g"
                                                "4f"
                                                "4e"
                                                "4d"
                                                "4c"
                                                "4b"
                                                "4a"
                                                "49"
                                                "48"
                                                "47"
                                                "46"
                                                "45"
                                                "44"
                                                "43"
                                                "42"
                                                "41"
                                                "40"
                                                "3z"
                                                "3y"
                                                "3x"
                                                "3w"
                                                "3v"
                                                "3u"
                                                "3t"
                                                "3s"
                                                "3r"
                                                "3q"
                                                "3p"
                                                "3o"
                                                "3n"
                                                "3m"
                                                "3l"
                                                "3k"
                                                "3j"
                                                "3i"
                                                "3h"
                                                "3g"
                                                "3f"
                                                "3e"
                                                "3d"
                                                "3c"
                                                "3b"
                                                "3a"
                                                "39"
                                                "38"
                                                "37"
                                                "36"
                                                "35"
                                                "34"
                                                "33"
                                                "32"
                                                "31"
                                                "30"
                                                "2z"
                                                "2y"
                                                "2x"
                                                "2w"
                                                "2v"
                                                "2u"
                                                "2t"
                                                "2s"
                                                "2r"
                                                "2q"
                                                "2p"
                                                "2o"
                                                "2n"
                                                "2m"
                                                "2l"
                                                "2k"
                                                "2j"
                                                "2i"
                                                "2h"
                                                "2g"
                                                "2f"
                                                "2e"
                                                "2d"
                                                "2c"
                                                "2b"
                                                "2a"
                                                "29"
                                                "28"
                                                "27"
                                                "26"
                                                "25"
                                                "24"
                                                "23"
                                                "22"
                                                "21"
                                                "20"
                                                "1z"
                                                "1y"
                                                "1x"
                                                "1w"
                                                "1v"
                                                "1u"
                                                "1t"
                                                "1s"
                                                "1r"
                                                "1q"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("8" "7" "6")))
                                            (hygiene guile))
                                         #{keys 9778}#))
                                 #f)
                             (if (if (eq? (if (if (= (vector-length
                                                       '#(syntax-object
                                                          pad
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("177" "178"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("172"
                                                               "173"
                                                               "174"
                                                               "175"
                                                               "176"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("151"
                                                              "150"
                                                              "14z"
                                                              "14y"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("5k"
                                                              "5j"
                                                              "5i"
                                                              "5h"
                                                              "5g"
                                                              "5f"
                                                              "5e"
                                                              "5d"
                                                              "5c"
                                                              "5b"
                                                              "5a"
                                                              "59"
                                                              "58"
                                                              "57"
                                                              "56"
                                                              "55"
                                                              "54"
                                                              "53"
                                                              "52"
                                                              "51"
                                                              "50"
                                                              "4z"
                                                              "4y"
                                                              "4x"
                                                              "4w"
                                                              "4v"
                                                              "4u"
                                                              "4t"
                                                              "4s"
                                                              "4r"
                                                              "4q"
                                                              "4p"
                                                              "4o"
                                                              "4n"
                                                              "4m"
                                                              "4l"
                                                              "4k"
                                                              "4j"
                                                              "4i"
                                                              "4h"
                                                              "4g"
                                                              "4f"
                                                              "4e"
                                                              "4d"
                                                              "4c"
                                                              "4b"
                                                              "4a"
                                                              "49"
                                                              "48"
                                                              "47"
                                                              "46"
                                                              "45"
                                                              "44"
                                                              "43"
                                                              "42"
                                                              "41"
                                                              "40"
                                                              "3z"
                                                              "3y"
                                                              "3x"
                                                              "3w"
                                                              "3v"
                                                              "3u"
                                                              "3t"
                                                              "3s"
                                                              "3r"
                                                              "3q"
                                                              "3p"
                                                              "3o"
                                                              "3n"
                                                              "3m"
                                                              "3l"
                                                              "3k"
                                                              "3j"
                                                              "3i"
                                                              "3h"
                                                              "3g"
                                                              "3f"
                                                              "3e"
                                                              "3d"
                                                              "3c"
                                                              "3b"
                                                              "3a"
                                                              "39"
                                                              "38"
                                                              "37"
                                                              "36"
                                                              "35"
                                                              "34"
                                                              "33"
                                                              "32"
                                                              "31"
                                                              "30"
                                                              "2z"
                                                              "2y"
                                                              "2x"
                                                              "2w"
                                                              "2v"
                                                              "2u"
                                                              "2t"
                                                              "2s"
                                                              "2r"
                                                              "2q"
                                                              "2p"
                                                              "2o"
                                                              "2n"
                                                              "2m"
                                                              "2l"
                                                              "2k"
                                                              "2j"
                                                              "2i"
                                                              "2h"
                                                              "2g"
                                                              "2f"
                                                              "2e"
                                                              "2d"
                                                              "2c"
                                                              "2b"
                                                              "2a"
                                                              "29"
                                                              "28"
                                                              "27"
                                                              "26"
                                                              "25"
                                                              "24"
                                                              "23"
                                                              "22"
                                                              "21"
                                                              "20"
                                                              "1z"
                                                              "1y"
                                                              "1x"
                                                              "1w"
                                                              "1v"
                                                              "1u"
                                                              "1t"
                                                              "1s"
                                                              "1r"
                                                              "1q"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("8" "7" "6")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            'pad
                                            '#(syntax-object
                                               pad
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("177" "178"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("172"
                                                    "173"
                                                    "174"
                                                    "175"
                                                    "176"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("151" "150" "14z" "14y"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("5k"
                                                   "5j"
                                                   "5i"
                                                   "5h"
                                                   "5g"
                                                   "5f"
                                                   "5e"
                                                   "5d"
                                                   "5c"
                                                   "5b"
                                                   "5a"
                                                   "59"
                                                   "58"
                                                   "57"
                                                   "56"
                                                   "55"
                                                   "54"
                                                   "53"
                                                   "52"
                                                   "51"
                                                   "50"
                                                   "4z"
                                                   "4y"
                                                   "4x"
                                                   "4w"
                                                   "4v"
                                                   "4u"
                                                   "4t"
                                                   "4s"
                                                   "4r"
                                                   "4q"
                                                   "4p"
                                                   "4o"
                                                   "4n"
                                                   "4m"
                                                   "4l"
                                                   "4k"
                                                   "4j"
                                                   "4i"
                                                   "4h"
                                                   "4g"
                                                   "4f"
                                                   "4e"
                                                   "4d"
                                                   "4c"
                                                   "4b"
                                                   "4a"
                                                   "49"
                                                   "48"
                                                   "47"
                                                   "46"
                                                   "45"
                                                   "44"
                                                   "43"
                                                   "42"
                                                   "41"
                                                   "40"
                                                   "3z"
                                                   "3y"
                                                   "3x"
                                                   "3w"
                                                   "3v"
                                                   "3u"
                                                   "3t"
                                                   "3s"
                                                   "3r"
                                                   "3q"
                                                   "3p"
                                                   "3o"
                                                   "3n"
                                                   "3m"
                                                   "3l"
                                                   "3k"
                                                   "3j"
                                                   "3i"
                                                   "3h"
                                                   "3g"
                                                   "3f"
                                                   "3e"
                                                   "3d"
                                                   "3c"
                                                   "3b"
                                                   "3a"
                                                   "39"
                                                   "38"
                                                   "37"
                                                   "36"
                                                   "35"
                                                   "34"
                                                   "33"
                                                   "32"
                                                   "31"
                                                   "30"
                                                   "2z"
                                                   "2y"
                                                   "2x"
                                                   "2w"
                                                   "2v"
                                                   "2u"
                                                   "2t"
                                                   "2s"
                                                   "2r"
                                                   "2q"
                                                   "2p"
                                                   "2o"
                                                   "2n"
                                                   "2m"
                                                   "2l"
                                                   "2k"
                                                   "2j"
                                                   "2i"
                                                   "2h"
                                                   "2g"
                                                   "2f"
                                                   "2e"
                                                   "2d"
                                                   "2c"
                                                   "2b"
                                                   "2a"
                                                   "29"
                                                   "28"
                                                   "27"
                                                   "26"
                                                   "25"
                                                   "24"
                                                   "23"
                                                   "22"
                                                   "21"
                                                   "20"
                                                   "1z"
                                                   "1y"
                                                   "1x"
                                                   "1w"
                                                   "1v"
                                                   "1u"
                                                   "1t"
                                                   "1s"
                                                   "1r"
                                                   "1q"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("8" "7" "6")))
                                               (hygiene guile)))
                                          (if (if (= (vector-length
                                                       '#(syntax-object
                                                          _
                                                          ((top)
                                                           #(ribcage
                                                             #(pat exp)
                                                             #((top) (top))
                                                             #("177" "178"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x
                                                               keys
                                                               clauses
                                                               r
                                                               mod)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("172"
                                                               "173"
                                                               "174"
                                                               "175"
                                                               "176"))
                                                           #(ribcage
                                                             (gen-syntax-case
                                                               gen-clause
                                                               build-dispatch-call
                                                               convert-pattern)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("151"
                                                              "150"
                                                              "14z"
                                                              "14y"))
                                                           #(ribcage
                                                             (lambda-var-list
                                                               gen-var
                                                               strip
                                                               expand-lambda-case
                                                               lambda*-formals
                                                               expand-simple-lambda
                                                               lambda-formals
                                                               ellipsis?
                                                               expand-void
                                                               eval-local-transformer
                                                               expand-local-syntax
                                                               expand-body
                                                               expand-macro
                                                               expand-application
                                                               expand-expr
                                                               expand
                                                               syntax-type
                                                               parse-when-list
                                                               expand-install-global
                                                               expand-top-sequence
                                                               expand-sequence
                                                               source-wrap
                                                               wrap
                                                               bound-id-member?
                                                               distinct-bound-ids?
                                                               valid-bound-ids?
                                                               bound-id=?
                                                               free-id=?
                                                               with-transformer-environment
                                                               transformer-environment
                                                               resolve-identifier
                                                               id-var-name
                                                               same-marks?
                                                               join-marks
                                                               join-wraps
                                                               smart-append
                                                               make-binding-wrap
                                                               extend-ribcage!
                                                               make-empty-ribcage
                                                               new-mark
                                                               anti-mark
                                                               the-anti-mark
                                                               top-marked?
                                                               top-wrap
                                                               empty-wrap
                                                               set-ribcage-labels!
                                                               set-ribcage-marks!
                                                               set-ribcage-symnames!
                                                               ribcage-labels
                                                               ribcage-marks
                                                               ribcage-symnames
                                                               ribcage?
                                                               make-ribcage
                                                               gen-labels
                                                               gen-label
                                                               make-rename
                                                               rename-marks
                                                               rename-new
                                                               rename-old
                                                               subst-rename?
                                                               wrap-subst
                                                               wrap-marks
                                                               make-wrap
                                                               id-sym-name&marks
                                                               id-sym-name
                                                               id?
                                                               nonsymbol-id?
                                                               global-extend
                                                               lookup
                                                               macros-only-env
                                                               extend-var-env
                                                               extend-env
                                                               null-env
                                                               binding-value
                                                               binding-type
                                                               make-binding
                                                               arg-check
                                                               source-annotation
                                                               no-source
                                                               set-syntax-object-module!
                                                               set-syntax-object-wrap!
                                                               set-syntax-object-expression!
                                                               syntax-object-module
                                                               syntax-object-wrap
                                                               syntax-object-expression
                                                               syntax-object?
                                                               make-syntax-object
                                                               build-lexical-var
                                                               build-letrec
                                                               build-named-let
                                                               build-let
                                                               build-sequence
                                                               build-data
                                                               build-primref
                                                               build-lambda-case
                                                               build-case-lambda
                                                               build-simple-lambda
                                                               build-global-definition
                                                               build-global-assignment
                                                               build-global-reference
                                                               analyze-variable
                                                               build-lexical-assignment
                                                               build-lexical-reference
                                                               build-dynlet
                                                               build-conditional
                                                               build-application
                                                               build-void
                                                               maybe-name-value!
                                                               decorate-source
                                                               get-global-definition-hook
                                                               put-global-definition-hook
                                                               gensym-hook
                                                               local-eval-hook
                                                               top-level-eval-hook
                                                               fx<
                                                               fx=
                                                               fx-
                                                               fx+
                                                               set-lambda-meta!
                                                               lambda-meta
                                                               lambda?
                                                               make-dynlet
                                                               make-letrec
                                                               make-let
                                                               make-lambda-case
                                                               make-lambda
                                                               make-sequence
                                                               make-application
                                                               make-conditional
                                                               make-toplevel-define
                                                               make-toplevel-set
                                                               make-toplevel-ref
                                                               make-module-set
                                                               make-module-ref
                                                               make-lexical-set
                                                               make-lexical-ref
                                                               make-primitive-ref
                                                               make-const
                                                               make-void)
                                                             ((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                             ("5k"
                                                              "5j"
                                                              "5i"
                                                              "5h"
                                                              "5g"
                                                              "5f"
                                                              "5e"
                                                              "5d"
                                                              "5c"
                                                              "5b"
                                                              "5a"
                                                              "59"
                                                              "58"
                                                              "57"
                                                              "56"
                                                              "55"
                                                              "54"
                                                              "53"
                                                              "52"
                                                              "51"
                                                              "50"
                                                              "4z"
                                                              "4y"
                                                              "4x"
                                                              "4w"
                                                              "4v"
                                                              "4u"
                                                              "4t"
                                                              "4s"
                                                              "4r"
                                                              "4q"
                                                              "4p"
                                                              "4o"
                                                              "4n"
                                                              "4m"
                                                              "4l"
                                                              "4k"
                                                              "4j"
                                                              "4i"
                                                              "4h"
                                                              "4g"
                                                              "4f"
                                                              "4e"
                                                              "4d"
                                                              "4c"
                                                              "4b"
                                                              "4a"
                                                              "49"
                                                              "48"
                                                              "47"
                                                              "46"
                                                              "45"
                                                              "44"
                                                              "43"
                                                              "42"
                                                              "41"
                                                              "40"
                                                              "3z"
                                                              "3y"
                                                              "3x"
                                                              "3w"
                                                              "3v"
                                                              "3u"
                                                              "3t"
                                                              "3s"
                                                              "3r"
                                                              "3q"
                                                              "3p"
                                                              "3o"
                                                              "3n"
                                                              "3m"
                                                              "3l"
                                                              "3k"
                                                              "3j"
                                                              "3i"
                                                              "3h"
                                                              "3g"
                                                              "3f"
                                                              "3e"
                                                              "3d"
                                                              "3c"
                                                              "3b"
                                                              "3a"
                                                              "39"
                                                              "38"
                                                              "37"
                                                              "36"
                                                              "35"
                                                              "34"
                                                              "33"
                                                              "32"
                                                              "31"
                                                              "30"
                                                              "2z"
                                                              "2y"
                                                              "2x"
                                                              "2w"
                                                              "2v"
                                                              "2u"
                                                              "2t"
                                                              "2s"
                                                              "2r"
                                                              "2q"
                                                              "2p"
                                                              "2o"
                                                              "2n"
                                                              "2m"
                                                              "2l"
                                                              "2k"
                                                              "2j"
                                                              "2i"
                                                              "2h"
                                                              "2g"
                                                              "2f"
                                                              "2e"
                                                              "2d"
                                                              "2c"
                                                              "2b"
                                                              "2a"
                                                              "29"
                                                              "28"
                                                              "27"
                                                              "26"
                                                              "25"
                                                              "24"
                                                              "23"
                                                              "22"
                                                              "21"
                                                              "20"
                                                              "1z"
                                                              "1y"
                                                              "1x"
                                                              "1w"
                                                              "1v"
                                                              "1u"
                                                              "1t"
                                                              "1s"
                                                              "1r"
                                                              "1q"))
                                                           #(ribcage
                                                             (define-structure
                                                               define-expansion-accessors
                                                               define-expansion-constructors)
                                                             ((top)
                                                              (top)
                                                              (top))
                                                             ("8" "7" "6")))
                                                          (hygiene guile)))
                                                     4)
                                                #t
                                                #f)
                                            '_
                                            '#(syntax-object
                                               _
                                               ((top)
                                                #(ribcage
                                                  #(pat exp)
                                                  #((top) (top))
                                                  #("177" "178"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x keys clauses r mod)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("172"
                                                    "173"
                                                    "174"
                                                    "175"
                                                    "176"))
                                                #(ribcage
                                                  (gen-syntax-case
                                                    gen-clause
                                                    build-dispatch-call
                                                    convert-pattern)
                                                  ((top) (top) (top) (top))
                                                  ("151" "150" "14z" "14y"))
                                                #(ribcage
                                                  (lambda-var-list
                                                    gen-var
                                                    strip
                                                    expand-lambda-case
                                                    lambda*-formals
                                                    expand-simple-lambda
                                                    lambda-formals
                                                    ellipsis?
                                                    expand-void
                                                    eval-local-transformer
                                                    expand-local-syntax
                                                    expand-body
                                                    expand-macro
                                                    expand-application
                                                    expand-expr
                                                    expand
                                                    syntax-type
                                                    parse-when-list
                                                    expand-install-global
                                                    expand-top-sequence
                                                    expand-sequence
                                                    source-wrap
                                                    wrap
                                                    bound-id-member?
                                                    distinct-bound-ids?
                                                    valid-bound-ids?
                                                    bound-id=?
                                                    free-id=?
                                                    with-transformer-environment
                                                    transformer-environment
                                                    resolve-identifier
                                                    id-var-name
                                                    same-marks?
                                                    join-marks
                                                    join-wraps
                                                    smart-append
                                                    make-binding-wrap
                                                    extend-ribcage!
                                                    make-empty-ribcage
                                                    new-mark
                                                    anti-mark
                                                    the-anti-mark
                                                    top-marked?
                                                    top-wrap
                                                    empty-wrap
                                                    set-ribcage-labels!
                                                    set-ribcage-marks!
                                                    set-ribcage-symnames!
                                                    ribcage-labels
                                                    ribcage-marks
                                                    ribcage-symnames
                                                    ribcage?
                                                    make-ribcage
                                                    gen-labels
                                                    gen-label
                                                    make-rename
                                                    rename-marks
                                                    rename-new
                                                    rename-old
                                                    subst-rename?
                                                    wrap-subst
                                                    wrap-marks
                                                    make-wrap
                                                    id-sym-name&marks
                                                    id-sym-name
                                                    id?
                                                    nonsymbol-id?
                                                    global-extend
                                                    lookup
                                                    macros-only-env
                                                    extend-var-env
                                                    extend-env
                                                    null-env
                                                    binding-value
                                                    binding-type
                                                    make-binding
                                                    arg-check
                                                    source-annotation
                                                    no-source
                                                    set-syntax-object-module!
                                                    set-syntax-object-wrap!
                                                    set-syntax-object-expression!
                                                    syntax-object-module
                                                    syntax-object-wrap
                                                    syntax-object-expression
                                                    syntax-object?
                                                    make-syntax-object
                                                    build-lexical-var
                                                    build-letrec
                                                    build-named-let
                                                    build-let
                                                    build-sequence
                                                    build-data
                                                    build-primref
                                                    build-lambda-case
                                                    build-case-lambda
                                                    build-simple-lambda
                                                    build-global-definition
                                                    build-global-assignment
                                                    build-global-reference
                                                    analyze-variable
                                                    build-lexical-assignment
                                                    build-lexical-reference
                                                    build-dynlet
                                                    build-conditional
                                                    build-application
                                                    build-void
                                                    maybe-name-value!
                                                    decorate-source
                                                    get-global-definition-hook
                                                    put-global-definition-hook
                                                    gensym-hook
                                                    local-eval-hook
                                                    top-level-eval-hook
                                                    fx<
                                                    fx=
                                                    fx-
                                                    fx+
                                                    set-lambda-meta!
                                                    lambda-meta
                                                    lambda?
                                                    make-dynlet
                                                    make-letrec
                                                    make-let
                                                    make-lambda-case
                                                    make-lambda
                                                    make-sequence
                                                    make-application
                                                    make-conditional
                                                    make-toplevel-define
                                                    make-toplevel-set
                                                    make-toplevel-ref
                                                    make-module-set
                                                    make-module-ref
                                                    make-lexical-set
                                                    make-lexical-ref
                                                    make-primitive-ref
                                                    make-const
                                                    make-void)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("5k"
                                                   "5j"
                                                   "5i"
                                                   "5h"
                                                   "5g"
                                                   "5f"
                                                   "5e"
                                                   "5d"
                                                   "5c"
                                                   "5b"
                                                   "5a"
                                                   "59"
                                                   "58"
                                                   "57"
                                                   "56"
                                                   "55"
                                                   "54"
                                                   "53"
                                                   "52"
                                                   "51"
                                                   "50"
                                                   "4z"
                                                   "4y"
                                                   "4x"
                                                   "4w"
                                                   "4v"
                                                   "4u"
                                                   "4t"
                                                   "4s"
                                                   "4r"
                                                   "4q"
                                                   "4p"
                                                   "4o"
                                                   "4n"
                                                   "4m"
                                                   "4l"
                                                   "4k"
                                                   "4j"
                                                   "4i"
                                                   "4h"
                                                   "4g"
                                                   "4f"
                                                   "4e"
                                                   "4d"
                                                   "4c"
                                                   "4b"
                                                   "4a"
                                                   "49"
                                                   "48"
                                                   "47"
                                                   "46"
                                                   "45"
                                                   "44"
                                                   "43"
                                                   "42"
                                                   "41"
                                                   "40"
                                                   "3z"
                                                   "3y"
                                                   "3x"
                                                   "3w"
                                                   "3v"
                                                   "3u"
                                                   "3t"
                                                   "3s"
                                                   "3r"
                                                   "3q"
                                                   "3p"
                                                   "3o"
                                                   "3n"
                                                   "3m"
                                                   "3l"
                                                   "3k"
                                                   "3j"
                                                   "3i"
                                                   "3h"
                                                   "3g"
                                                   "3f"
                                                   "3e"
                                                   "3d"
                                                   "3c"
                                                   "3b"
                                                   "3a"
                                                   "39"
                                                   "38"
                                                   "37"
                                                   "36"
                                                   "35"
                                                   "34"
                                                   "33"
                                                   "32"
                                                   "31"
                                                   "30"
                                                   "2z"
                                                   "2y"
                                                   "2x"
                                                   "2w"
                                                   "2v"
                                                   "2u"
                                                   "2t"
                                                   "2s"
                                                   "2r"
                                                   "2q"
                                                   "2p"
                                                   "2o"
                                                   "2n"
                                                   "2m"
                                                   "2l"
                                                   "2k"
                                                   "2j"
                                                   "2i"
                                                   "2h"
                                                   "2g"
                                                   "2f"
                                                   "2e"
                                                   "2d"
                                                   "2c"
                                                   "2b"
                                                   "2a"
                                                   "29"
                                                   "28"
                                                   "27"
                                                   "26"
                                                   "25"
                                                   "24"
                                                   "23"
                                                   "22"
                                                   "21"
                                                   "20"
                                                   "1z"
                                                   "1y"
                                                   "1x"
                                                   "1w"
                                                   "1v"
                                                   "1u"
                                                   "1t"
                                                   "1s"
                                                   "1r"
                                                   "1q"))
                                                #(ribcage
                                                  (define-structure
                                                    define-expansion-accessors
                                                    define-expansion-constructors)
                                                  ((top) (top) (top))
                                                  ("8" "7" "6")))
                                               (hygiene guile))))
                                   (eq? (#{id-var-name 2762}#
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("177" "178"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("172"
                                                  "173"
                                                  "174"
                                                  "175"
                                                  "176"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("151" "150" "14z" "14y"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("5k"
                                                 "5j"
                                                 "5i"
                                                 "5h"
                                                 "5g"
                                                 "5f"
                                                 "5e"
                                                 "5d"
                                                 "5c"
                                                 "5b"
                                                 "5a"
                                                 "59"
                                                 "58"
                                                 "57"
                                                 "56"
                                                 "55"
                                                 "54"
                                                 "53"
                                                 "52"
                                                 "51"
                                                 "50"
                                                 "4z"
                                                 "4y"
                                                 "4x"
                                                 "4w"
                                                 "4v"
                                                 "4u"
                                                 "4t"
                                                 "4s"
                                                 "4r"
                                                 "4q"
                                                 "4p"
                                                 "4o"
                                                 "4n"
                                                 "4m"
                                                 "4l"
                                                 "4k"
                                                 "4j"
                                                 "4i"
                                                 "4h"
                                                 "4g"
                                                 "4f"
                                                 "4e"
                                                 "4d"
                                                 "4c"
                                                 "4b"
                                                 "4a"
                                                 "49"
                                                 "48"
                                                 "47"
                                                 "46"
                                                 "45"
                                                 "44"
                                                 "43"
                                                 "42"
                                                 "41"
                                                 "40"
                                                 "3z"
                                                 "3y"
                                                 "3x"
                                                 "3w"
                                                 "3v"
                                                 "3u"
                                                 "3t"
                                                 "3s"
                                                 "3r"
                                                 "3q"
                                                 "3p"
                                                 "3o"
                                                 "3n"
                                                 "3m"
                                                 "3l"
                                                 "3k"
                                                 "3j"
                                                 "3i"
                                                 "3h"
                                                 "3g"
                                                 "3f"
                                                 "3e"
                                                 "3d"
                                                 "3c"
                                                 "3b"
                                                 "3a"
                                                 "39"
                                                 "38"
                                                 "37"
                                                 "36"
                                                 "35"
                                                 "34"
                                                 "33"
                                                 "32"
                                                 "31"
                                                 "30"
                                                 "2z"
                                                 "2y"
                                                 "2x"
                                                 "2w"
                                                 "2v"
                                                 "2u"
                                                 "2t"
                                                 "2s"
                                                 "2r"
                                                 "2q"
                                                 "2p"
                                                 "2o"
                                                 "2n"
                                                 "2m"
                                                 "2l"
                                                 "2k"
                                                 "2j"
                                                 "2i"
                                                 "2h"
                                                 "2g"
                                                 "2f"
                                                 "2e"
                                                 "2d"
                                                 "2c"
                                                 "2b"
                                                 "2a"
                                                 "29"
                                                 "28"
                                                 "27"
                                                 "26"
                                                 "25"
                                                 "24"
                                                 "23"
                                                 "22"
                                                 "21"
                                                 "20"
                                                 "1z"
                                                 "1y"
                                                 "1x"
                                                 "1w"
                                                 "1v"
                                                 "1u"
                                                 "1t"
                                                 "1s"
                                                 "1r"
                                                 "1q"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("8" "7" "6")))
                                             (hygiene guile))
                                          '(()))
                                        (#{id-var-name 2762}#
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("177" "178"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("172"
                                                  "173"
                                                  "174"
                                                  "175"
                                                  "176"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("151" "150" "14z" "14y"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  expand-lambda-case
                                                  lambda*-formals
                                                  expand-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  expand-void
                                                  eval-local-transformer
                                                  expand-local-syntax
                                                  expand-body
                                                  expand-macro
                                                  expand-application
                                                  expand-expr
                                                  expand
                                                  syntax-type
                                                  parse-when-list
                                                  expand-install-global
                                                  expand-top-sequence
                                                  expand-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  with-transformer-environment
                                                  transformer-environment
                                                  resolve-identifier
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("5k"
                                                 "5j"
                                                 "5i"
                                                 "5h"
                                                 "5g"
                                                 "5f"
                                                 "5e"
                                                 "5d"
                                                 "5c"
                                                 "5b"
                                                 "5a"
                                                 "59"
                                                 "58"
                                                 "57"
                                                 "56"
                                                 "55"
                                                 "54"
                                                 "53"
                                                 "52"
                                                 "51"
                                                 "50"
                                                 "4z"
                                                 "4y"
                                                 "4x"
                                                 "4w"
                                                 "4v"
                                                 "4u"
                                                 "4t"
                                                 "4s"
                                                 "4r"
                                                 "4q"
                                                 "4p"
                                                 "4o"
                                                 "4n"
                                                 "4m"
                                                 "4l"
                                                 "4k"
                                                 "4j"
                                                 "4i"
                                                 "4h"
                                                 "4g"
                                                 "4f"
                                                 "4e"
                                                 "4d"
                                                 "4c"
                                                 "4b"
                                                 "4a"
                                                 "49"
                                                 "48"
                                                 "47"
                                                 "46"
                                                 "45"
                                                 "44"
                                                 "43"
                                                 "42"
                                                 "41"
                                                 "40"
                                                 "3z"
                                                 "3y"
                                                 "3x"
                                                 "3w"
                                                 "3v"
                                                 "3u"
                                                 "3t"
                                                 "3s"
                                                 "3r"
                                                 "3q"
                                                 "3p"
                                                 "3o"
                                                 "3n"
                                                 "3m"
                                                 "3l"
                                                 "3k"
                                                 "3j"
                                                 "3i"
                                                 "3h"
                                                 "3g"
                                                 "3f"
                                                 "3e"
                                                 "3d"
                                                 "3c"
                                                 "3b"
                                                 "3a"
                                                 "39"
                                                 "38"
                                                 "37"
                                                 "36"
                                                 "35"
                                                 "34"
                                                 "33"
                                                 "32"
                                                 "31"
                                                 "30"
                                                 "2z"
                                                 "2y"
                                                 "2x"
                                                 "2w"
                                                 "2v"
                                                 "2u"
                                                 "2t"
                                                 "2s"
                                                 "2r"
                                                 "2q"
                                                 "2p"
                                                 "2o"
                                                 "2n"
                                                 "2m"
                                                 "2l"
                                                 "2k"
                                                 "2j"
                                                 "2i"
                                                 "2h"
                                                 "2g"
                                                 "2f"
                                                 "2e"
                                                 "2d"
                                                 "2c"
                                                 "2b"
                                                 "2a"
                                                 "29"
                                                 "28"
                                                 "27"
                                                 "26"
                                                 "25"
                                                 "24"
                                                 "23"
                                                 "22"
                                                 "21"
                                                 "20"
                                                 "1z"
                                                 "1y"
                                                 "1x"
                                                 "1w"
                                                 "1v"
                                                 "1u"
                                                 "1t"
                                                 "1s"
                                                 "1r"
                                                 "1q"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("8" "7" "6")))
                                             (hygiene guile))
                                          '(())))
                                   #f)
                               (#{expand 2778}#
                                 #{exp 9824}#
                                 #{r 9780}#
                                 '(())
                                 #{mod 9781}#)
                               (let ((#{labels 10027}#
                                       (list (#{gen-label 2745}#)))
                                     (#{var 10028}#
                                       (let ((#{id 10066}#
                                               (if (if (vector? #{pat 9823}#)
                                                     (if (= (vector-length
                                                              #{pat 9823}#)
                                                            4)
                                                       (eq? (vector-ref
                                                              #{pat 9823}#
                                                              0)
                                                            'syntax-object)
                                                       #f)
                                                     #f)
                                                 (vector-ref #{pat 9823}# 1)
                                                 #{pat 9823}#)))
                                         (gensym
                                           (string-append
                                             (symbol->string #{id 10066}#)
                                             " ")))))
                                 (#{build-application 2710}#
                                   #f
                                   (#{build-simple-lambda 2719}#
                                     #f
                                     (list (syntax->datum #{pat 9823}#))
                                     #f
                                     (list #{var 10028}#)
                                     '()
                                     (#{expand 2778}#
                                       #{exp 9824}#
                                       (#{extend-env 2737}#
                                         #{labels 10027}#
                                         (list (cons 'syntax
                                                     (cons #{var 10028}# 0)))
                                         #{r 9780}#)
                                       (#{make-binding-wrap 2757}#
                                         (list #{pat 9823}#)
                                         #{labels 10027}#
                                         '(()))
                                       #{mod 9781}#))
                                   (list #{x 9777}#))))
                             (#{gen-clause 9377}#
                               #{x 9777}#
                               #{keys 9778}#
                               (cdr #{clauses 9779}#)
                               #{r 9780}#
                               #{pat 9823}#
                               #t
                               #{exp 9824}#
                               #{mod 9781}#)))
                         #{tmp 9821}#)
                       (let ((#{tmp 10334}#
                               ($sc-dispatch #{tmp 9820}# '(any any any))))
                         (if #{tmp 10334}#
                           (@apply
                             (lambda (#{pat 10336}#
                                      #{fender 10337}#
                                      #{exp 10338}#)
                               (#{gen-clause 9377}#
                                 #{x 9777}#
                                 #{keys 9778}#
                                 (cdr #{clauses 9779}#)
                                 #{r 9780}#
                                 #{pat 10336}#
                                 #{fender 10337}#
                                 #{exp 10338}#
                                 #{mod 9781}#))
                             #{tmp 10334}#)
                           (syntax-violation
                             'syntax-case
                             "invalid clause"
                             (car #{clauses 9779}#)))))))))))
          (lambda (#{e 9379}#
                   #{r 9380}#
                   #{w 9381}#
                   #{s 9382}#
                   #{mod 9383}#)
            (let ((#{e 9384}#
                    (#{wrap 2771}#
                      (begin
                        (if (if (pair? #{e 9379}#) #{s 9382}# #f)
                          (set-source-properties! #{e 9379}# #{s 9382}#))
                        #{e 9379}#)
                      #{w 9381}#
                      #{mod 9383}#)))
              (let ((#{tmp 9386}#
                      ($sc-dispatch
                        #{e 9384}#
                        '(_ any each-any . each-any))))
                (if #{tmp 9386}#
                  (@apply
                    (lambda (#{val 9411}# #{key 9412}# #{m 9413}#)
                      (if (and-map
                            (lambda (#{x 9414}#)
                              (if (if (symbol? #{x 9414}#)
                                    #t
                                    (if (if (vector? #{x 9414}#)
                                          (if (= (vector-length #{x 9414}#) 4)
                                            (eq? (vector-ref #{x 9414}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{x 9414}# 1))
                                      #f))
                                (not (if (if (if (vector? #{x 9414}#)
                                               (if (= (vector-length
                                                        #{x 9414}#)
                                                      4)
                                                 (eq? (vector-ref #{x 9414}# 0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (symbol? (vector-ref #{x 9414}# 1))
                                           #f)
                                       (if (eq? (if (if (vector? #{x 9414}#)
                                                      (if (= (vector-length
                                                               #{x 9414}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{x 9414}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{x 9414}# 1)
                                                  #{x 9414}#)
                                                (if (if (= (vector-length
                                                             '#(syntax-object
                                                                ...
                                                                ((top)
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("of"))
                                                                 #(ribcage
                                                                   (lambda-var-list
                                                                     gen-var
                                                                     strip
                                                                     expand-lambda-case
                                                                     lambda*-formals
                                                                     expand-simple-lambda
                                                                     lambda-formals
                                                                     ellipsis?
                                                                     expand-void
                                                                     eval-local-transformer
                                                                     expand-local-syntax
                                                                     expand-body
                                                                     expand-macro
                                                                     expand-application
                                                                     expand-expr
                                                                     expand
                                                                     syntax-type
                                                                     parse-when-list
                                                                     expand-install-global
                                                                     expand-top-sequence
                                                                     expand-sequence
                                                                     source-wrap
                                                                     wrap
                                                                     bound-id-member?
                                                                     distinct-bound-ids?
                                                                     valid-bound-ids?
                                                                     bound-id=?
                                                                     free-id=?
                                                                     with-transformer-environment
                                                                     transformer-environment
                                                                     resolve-identifier
                                                                     id-var-name
                                                                     same-marks?
                                                                     join-marks
                                                                     join-wraps
                                                                     smart-append
                                                                     make-binding-wrap
                                                                     extend-ribcage!
                                                                     make-empty-ribcage
                                                                     new-mark
                                                                     anti-mark
                                                                     the-anti-mark
                                                                     top-marked?
                                                                     top-wrap
                                                                     empty-wrap
                                                                     set-ribcage-labels!
                                                                     set-ribcage-marks!
                                                                     set-ribcage-symnames!
                                                                     ribcage-labels
                                                                     ribcage-marks
                                                                     ribcage-symnames
                                                                     ribcage?
                                                                     make-ribcage
                                                                     gen-labels
                                                                     gen-label
                                                                     make-rename
                                                                     rename-marks
                                                                     rename-new
                                                                     rename-old
                                                                     subst-rename?
                                                                     wrap-subst
                                                                     wrap-marks
                                                                     make-wrap
                                                                     id-sym-name&marks
                                                                     id-sym-name
                                                                     id?
                                                                     nonsymbol-id?
                                                                     global-extend
                                                                     lookup
                                                                     macros-only-env
                                                                     extend-var-env
                                                                     extend-env
                                                                     null-env
                                                                     binding-value
                                                                     binding-type
                                                                     make-binding
                                                                     arg-check
                                                                     source-annotation
                                                                     no-source
                                                                     set-syntax-object-module!
                                                                     set-syntax-object-wrap!
                                                                     set-syntax-object-expression!
                                                                     syntax-object-module
                                                                     syntax-object-wrap
                                                                     syntax-object-expression
                                                                     syntax-object?
                                                                     make-syntax-object
                                                                     build-lexical-var
                                                                     build-letrec
                                                                     build-named-let
                                                                     build-let
                                                                     build-sequence
                                                                     build-data
                                                                     build-primref
                                                                     build-lambda-case
                                                                     build-case-lambda
                                                                     build-simple-lambda
                                                                     build-global-definition
                                                                     build-global-assignment
                                                                     build-global-reference
                                                                     analyze-variable
                                                                     build-lexical-assignment
                                                                     build-lexical-reference
                                                                     build-dynlet
                                                                     build-conditional
                                                                     build-application
                                                                     build-void
                                                                     maybe-name-value!
                                                                     decorate-source
                                                                     get-global-definition-hook
                                                                     put-global-definition-hook
                                                                     gensym-hook
                                                                     local-eval-hook
                                                                     top-level-eval-hook
                                                                     fx<
                                                                     fx=
                                                                     fx-
                                                                     fx+
                                                                     set-lambda-meta!
                                                                     lambda-meta
                                                                     lambda?
                                                                     make-dynlet
                                                                     make-letrec
                                                                     make-let
                                                                     make-lambda-case
                                                                     make-lambda
                                                                     make-sequence
                                                                     make-application
                                                                     make-conditional
                                                                     make-toplevel-define
                                                                     make-toplevel-set
                                                                     make-toplevel-ref
                                                                     make-module-set
                                                                     make-module-ref
                                                                     make-lexical-set
                                                                     make-lexical-ref
                                                                     make-primitive-ref
                                                                     make-const
                                                                     make-void)
                                                                   ((top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top)
                                                                    (top))
                                                                   ("5k"
                                                                    "5j"
                                                                    "5i"
                                                                    "5h"
                                                                    "5g"
                                                                    "5f"
                                                                    "5e"
                                                                    "5d"
                                                                    "5c"
                                                                    "5b"
                                                                    "5a"
                                                                    "59"
                                                                    "58"
                                                                    "57"
                                                                    "56"
                                                                    "55"
                                                                    "54"
                                                                    "53"
                                                                    "52"
                                                                    "51"
                                                                    "50"
                                                                    "4z"
                                                                    "4y"
                                                                    "4x"
                                                                    "4w"
                                                                    "4v"
                                                                    "4u"
                                                                    "4t"
                                                                    "4s"
                                                                    "4r"
                                                                    "4q"
                                                                    "4p"
                                                                    "4o"
                                                                    "4n"
                                                                    "4m"
                                                                    "4l"
                                                                    "4k"
                                                                    "4j"
                                                                    "4i"
                                                                    "4h"
                                                                    "4g"
                                                                    "4f"
                                                                    "4e"
                                                                    "4d"
                                                                    "4c"
                                                                    "4b"
                                                                    "4a"
                                                                    "49"
                                                                    "48"
                                                                    "47"
                                                                    "46"
                                                                    "45"
                                                                    "44"
                                                                    "43"
                                                                    "42"
                                                                    "41"
                                                                    "40"
                                                                    "3z"
                                                                    "3y"
                                                                    "3x"
                                                                    "3w"
                                                                    "3v"
                                                                    "3u"
                                                                    "3t"
                                                                    "3s"
                                                                    "3r"
                                                                    "3q"
                                                                    "3p"
                                                                    "3o"
                                                                    "3n"
                                                                    "3m"
                                                                    "3l"
                                                                    "3k"
                                                                    "3j"
                                                                    "3i"
                                                                    "3h"
                                                                    "3g"
                                                                    "3f"
                                                                    "3e"
                                                                    "3d"
                                                                    "3c"
                                                                    "3b"
                                                                    "3a"
                                                                    "39"
                                                                    "38"
                                                                    "37"
                                                                    "36"
                                                                    "35"
                                                                    "34"
                                                                    "33"
                                                                    "32"
                                                                    "31"
                                                                    "30"
                                                                    "2z"
                                                                    "2y"
                                                                    "2x"
                                                                    "2w"
                                                                    "2v"
                                                                    "2u"
                                                                    "2t"
                                                                    "2s"
                                                                    "2r"
                                                                    "2q"
                                                                    "2p"
                                                                    "2o"
                                                                    "2n"
                                                                    "2m"
                                                                    "2l"
                                                                    "2k"
                                                                    "2j"
                                                                    "2i"
                                                                    "2h"
                                                                    "2g"
                                                                    "2f"
                                                                    "2e"
                                                                    "2d"
                                                                    "2c"
                                                                    "2b"
                                                                    "2a"
                                                                    "29"
                                                                    "28"
                                                                    "27"
                                                                    "26"
                                                                    "25"
                                                                    "24"
                                                                    "23"
                                                                    "22"
                                                                    "21"
                                                                    "20"
                                                                    "1z"
                                                                    "1y"
                                                                    "1x"
                                                                    "1w"
                                                                    "1v"
                                                                    "1u"
                                                                    "1t"
                                                                    "1s"
                                                                    "1r"
                                                                    "1q"))
                                                                 #(ribcage
                                                                   (define-structure
                                                                     define-expansion-accessors
                                                                     define-expansion-constructors)
                                                                   ((top)
                                                                    (top)
                                                                    (top))
                                                                   ("8"
                                                                    "7"
                                                                    "6")))
                                                                (hygiene
                                                                  guile)))
                                                           4)
                                                      #t
                                                      #f)
                                                  '...
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("of"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          expand-lambda-case
                                                          lambda*-formals
                                                          expand-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          expand-void
                                                          eval-local-transformer
                                                          expand-local-syntax
                                                          expand-body
                                                          expand-macro
                                                          expand-application
                                                          expand-expr
                                                          expand
                                                          syntax-type
                                                          parse-when-list
                                                          expand-install-global
                                                          expand-top-sequence
                                                          expand-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          with-transformer-environment
                                                          transformer-environment
                                                          resolve-identifier
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("5k"
                                                         "5j"
                                                         "5i"
                                                         "5h"
                                                         "5g"
                                                         "5f"
                                                         "5e"
                                                         "5d"
                                                         "5c"
                                                         "5b"
                                                         "5a"
                                                         "59"
                                                         "58"
                                                         "57"
                                                         "56"
                                                         "55"
                                                         "54"
                                                         "53"
                                                         "52"
                                                         "51"
                                                         "50"
                                                         "4z"
                                                         "4y"
                                                         "4x"
                                                         "4w"
                                                         "4v"
                                                         "4u"
                                                         "4t"
                                                         "4s"
                                                         "4r"
                                                         "4q"
                                                         "4p"
                                                         "4o"
                                                         "4n"
                                                         "4m"
                                                         "4l"
                                                         "4k"
                                                         "4j"
                                                         "4i"
                                                         "4h"
                                                         "4g"
                                                         "4f"
                                                         "4e"
                                                         "4d"
                                                         "4c"
                                                         "4b"
                                                         "4a"
                                                         "49"
                                                         "48"
                                                         "47"
                                                         "46"
                                                         "45"
                                                         "44"
                                                         "43"
                                                         "42"
                                                         "41"
                                                         "40"
                                                         "3z"
                                                         "3y"
                                                         "3x"
                                                         "3w"
                                                         "3v"
                                                         "3u"
                                                         "3t"
                                                         "3s"
                                                         "3r"
                                                         "3q"
                                                         "3p"
                                                         "3o"
                                                         "3n"
                                                         "3m"
                                                         "3l"
                                                         "3k"
                                                         "3j"
                                                         "3i"
                                                         "3h"
                                                         "3g"
                                                         "3f"
                                                         "3e"
                                                         "3d"
                                                         "3c"
                                                         "3b"
                                                         "3a"
                                                         "39"
                                                         "38"
                                                         "37"
                                                         "36"
                                                         "35"
                                                         "34"
                                                         "33"
                                                         "32"
                                                         "31"
                                                         "30"
                                                         "2z"
                                                         "2y"
                                                         "2x"
                                                         "2w"
                                                         "2v"
                                                         "2u"
                                                         "2t"
                                                         "2s"
                                                         "2r"
                                                         "2q"
                                                         "2p"
                                                         "2o"
                                                         "2n"
                                                         "2m"
                                                         "2l"
                                                         "2k"
                                                         "2j"
                                                         "2i"
                                                         "2h"
                                                         "2g"
                                                         "2f"
                                                         "2e"
                                                         "2d"
                                                         "2c"
                                                         "2b"
                                                         "2a"
                                                         "29"
                                                         "28"
                                                         "27"
                                                         "26"
                                                         "25"
                                                         "24"
                                                         "23"
                                                         "22"
                                                         "21"
                                                         "20"
                                                         "1z"
                                                         "1y"
                                                         "1x"
                                                         "1w"
                                                         "1v"
                                                         "1u"
                                                         "1t"
                                                         "1s"
                                                         "1r"
                                                         "1q"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("8" "7" "6")))
                                                     (hygiene guile))))
                                         (eq? (#{id-var-name 2762}#
                                                #{x 9414}#
                                                '(()))
                                              (#{id-var-name 2762}#
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("of"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        expand-lambda-case
                                                        lambda*-formals
                                                        expand-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        expand-void
                                                        eval-local-transformer
                                                        expand-local-syntax
                                                        expand-body
                                                        expand-macro
                                                        expand-application
                                                        expand-expr
                                                        expand
                                                        syntax-type
                                                        parse-when-list
                                                        expand-install-global
                                                        expand-top-sequence
                                                        expand-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        with-transformer-environment
                                                        transformer-environment
                                                        resolve-identifier
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("5k"
                                                       "5j"
                                                       "5i"
                                                       "5h"
                                                       "5g"
                                                       "5f"
                                                       "5e"
                                                       "5d"
                                                       "5c"
                                                       "5b"
                                                       "5a"
                                                       "59"
                                                       "58"
                                                       "57"
                                                       "56"
                                                       "55"
                                                       "54"
                                                       "53"
                                                       "52"
                                                       "51"
                                                       "50"
                                                       "4z"
                                                       "4y"
                                                       "4x"
                                                       "4w"
                                                       "4v"
                                                       "4u"
                                                       "4t"
                                                       "4s"
                                                       "4r"
                                                       "4q"
                                                       "4p"
                                                       "4o"
                                                       "4n"
                                                       "4m"
                                                       "4l"
                                                       "4k"
                                                       "4j"
                                                       "4i"
                                                       "4h"
                                                       "4g"
                                                       "4f"
                                                       "4e"
                                                       "4d"
                                                       "4c"
                                                       "4b"
                                                       "4a"
                                                       "49"
                                                       "48"
                                                       "47"
                                                       "46"
                                                       "45"
                                                       "44"
                                                       "43"
                                                       "42"
                                                       "41"
                                                       "40"
                                                       "3z"
                                                       "3y"
                                                       "3x"
                                                       "3w"
                                                       "3v"
                                                       "3u"
                                                       "3t"
                                                       "3s"
                                                       "3r"
                                                       "3q"
                                                       "3p"
                                                       "3o"
                                                       "3n"
                                                       "3m"
                                                       "3l"
                                                       "3k"
                                                       "3j"
                                                       "3i"
                                                       "3h"
                                                       "3g"
                                                       "3f"
                                                       "3e"
                                                       "3d"
                                                       "3c"
                                                       "3b"
                                                       "3a"
                                                       "39"
                                                       "38"
                                                       "37"
                                                       "36"
                                                       "35"
                                                       "34"
                                                       "33"
                                                       "32"
                                                       "31"
                                                       "30"
                                                       "2z"
                                                       "2y"
                                                       "2x"
                                                       "2w"
                                                       "2v"
                                                       "2u"
                                                       "2t"
                                                       "2s"
                                                       "2r"
                                                       "2q"
                                                       "2p"
                                                       "2o"
                                                       "2n"
                                                       "2m"
                                                       "2l"
                                                       "2k"
                                                       "2j"
                                                       "2i"
                                                       "2h"
                                                       "2g"
                                                       "2f"
                                                       "2e"
                                                       "2d"
                                                       "2c"
                                                       "2b"
                                                       "2a"
                                                       "29"
                                                       "28"
                                                       "27"
                                                       "26"
                                                       "25"
                                                       "24"
                                                       "23"
                                                       "22"
                                                       "21"
                                                       "20"
                                                       "1z"
                                                       "1y"
                                                       "1x"
                                                       "1w"
                                                       "1v"
                                                       "1u"
                                                       "1t"
                                                       "1s"
                                                       "1r"
                                                       "1q"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("8" "7" "6")))
                                                   (hygiene guile))
                                                '(())))
                                         #f)
                                       #f))
                                #f))
                            #{key 9412}#)
                        (let ((#{x 9540}#
                                (gensym
                                  (string-append (symbol->string 'tmp) " "))))
                          (#{build-application 2710}#
                            #{s 9382}#
                            (let ((#{req 9670}# (list 'tmp))
                                  (#{vars 9672}# (list #{x 9540}#))
                                  (#{exp 9674}#
                                    (#{gen-syntax-case 9378}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 3)
                                        #f
                                        'tmp
                                        #{x 9540}#)
                                      #{key 9412}#
                                      #{m 9413}#
                                      #{r 9380}#
                                      #{mod 9383}#)))
                              (let ((#{body 9679}#
                                      (make-struct/no-tail
                                        (vector-ref %expanded-vtables 14)
                                        #f
                                        #{req 9670}#
                                        #f
                                        #f
                                        #f
                                        '()
                                        #{vars 9672}#
                                        #{exp 9674}#
                                        #f)))
                                (make-struct/no-tail
                                  (vector-ref %expanded-vtables 13)
                                  #f
                                  '()
                                  #{body 9679}#)))
                            (list (#{expand 2778}#
                                    #{val 9411}#
                                    #{r 9380}#
                                    '(())
                                    #{mod 9383}#))))
                        (syntax-violation
                          'syntax-case
                          "invalid literals list"
                          #{e 9384}#)))
                    #{tmp 9386}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{e 9384}#)))))))
      (set! macroexpand
        (lambda*
          (#{x 12087}#
            #:optional
            (#{m 12088}# 'e)
            (#{esew 12089}# '(eval)))
          (#{expand-top-sequence 2774}#
            (list #{x 12087}#)
            '()
            '((top))
            #f
            #{m 12088}#
            #{esew 12089}#
            (cons 'hygiene (module-name (current-module))))))
      (set! identifier?
        (lambda (#{x 12092}#)
          (if (if (vector? #{x 12092}#)
                (if (= (vector-length #{x 12092}#) 4)
                  (eq? (vector-ref #{x 12092}# 0) 'syntax-object)
                  #f)
                #f)
            (symbol? (vector-ref #{x 12092}# 1))
            #f)))
      (set! datum->syntax
        (lambda (#{id 12117}# #{datum 12118}#)
          (let ((#{wrap 12123}# (vector-ref #{id 12117}# 2))
                (#{module 12124}# (vector-ref #{id 12117}# 3)))
            (vector
              'syntax-object
              #{datum 12118}#
              #{wrap 12123}#
              #{module 12124}#))))
      (set! syntax->datum
        (lambda (#{x 12131}#)
          (#{strip 2791}# #{x 12131}# '(()))))
      (set! syntax-source
        (lambda (#{x 12134}#)
          (#{source-annotation 2736}# #{x 12134}#)))
      (set! syntax-local-binding
        (lambda (#{id 12287}#)
          (begin
            (if (not (if (if (vector? #{id 12287}#)
                           (if (= (vector-length #{id 12287}#) 4)
                             (eq? (vector-ref #{id 12287}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{id 12287}# 1))
                       #f))
              (syntax-violation
                'syntax-local-value
                "invalid argument"
                #{id 12287}#))
            ((fluid-ref #{transformer-environment 2764}#)
             (lambda (#{e 12328}#
                      #{r 12329}#
                      #{w 12330}#
                      #{s 12331}#
                      #{rib 12332}#
                      #{mod 12333}#)
               (call-with-values
                 (lambda ()
                   (let ((#{id 12336}# (vector-ref #{id 12287}# 1))
                         (#{w 12337}#
                           (let ((#{w 12348}# (vector-ref #{id 12287}# 2)))
                             (let ((#{ms 12349}# (car #{w 12348}#))
                                   (#{s 12350}# (cdr #{w 12348}#)))
                               (if (if (pair? #{ms 12349}#)
                                     (eq? (car #{ms 12349}#) #f)
                                     #f)
                                 (cons (cdr #{ms 12349}#)
                                       (if #{rib 12332}#
                                         (cons #{rib 12332}# (cdr #{s 12350}#))
                                         (cdr #{s 12350}#)))
                                 (cons #{ms 12349}#
                                       (if #{rib 12332}#
                                         (cons #{rib 12332}# #{s 12350}#)
                                         #{s 12350}#))))))
                         (#{mod 12339}# (vector-ref #{id 12287}# 3)))
                     (let ((#{n 12342}#
                             (#{id-var-name 2762}# #{id 12336}# #{w 12337}#)))
                       (if (symbol? #{n 12342}#)
                         (let ((#{mod 12356}#
                                 (if (if (vector? #{id 12336}#)
                                       (if (= (vector-length #{id 12336}#) 4)
                                         (eq? (vector-ref #{id 12336}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (vector-ref #{id 12336}# 3)
                                   #{mod 12339}#)))
                           (let ((#{b 12357}#
                                   (let ((#{t 12358}#
                                           (#{get-global-definition-hook 2706}#
                                             #{n 12342}#
                                             #{mod 12356}#)))
                                     (if #{t 12358}# #{t 12358}# '(global)))))
                             (if (eq? (car #{b 12357}#) 'global)
                               (values 'global #{n 12342}# #{mod 12356}#)
                               (values
                                 (car #{b 12357}#)
                                 (cdr #{b 12357}#)
                                 #{mod 12356}#))))
                         (if (string? #{n 12342}#)
                           (let ((#{mod 12384}#
                                   (if (if (vector? #{id 12336}#)
                                         (if (= (vector-length #{id 12336}#) 4)
                                           (eq? (vector-ref #{id 12336}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (vector-ref #{id 12336}# 3)
                                     #{mod 12339}#)))
                             (let ((#{b 12385}#
                                     (let ((#{t 12386}#
                                             (assq-ref
                                               #{r 12329}#
                                               #{n 12342}#)))
                                       (if #{t 12386}#
                                         #{t 12386}#
                                         '(displaced-lexical)))))
                               (values
                                 (car #{b 12385}#)
                                 (cdr #{b 12385}#)
                                 #{mod 12384}#)))
                           (error "unexpected id-var-name"
                                  #{id 12336}#
                                  #{w 12337}#
                                  #{n 12342}#))))))
                 (lambda (#{type 12399}# #{value 12400}# #{mod 12401}#)
                   (if (eqv? #{type 12399}# 'lexical)
                     (values 'lexical #{value 12400}#)
                     (if (eqv? #{type 12399}# 'macro)
                       (values 'macro #{value 12400}#)
                       (if (eqv? #{type 12399}# 'syntax)
                         (values 'pattern-variable #{value 12400}#)
                         (if (eqv? #{type 12399}# 'displaced-lexical)
                           (values 'displaced-lexical #f)
                           (if (eqv? #{type 12399}# 'global)
                             (values
                               'global
                               (cons #{value 12400}# #{mod 12401}#))
                             (values 'other #f)))))))))))))
      (set! generate-temporaries
        (lambda (#{ls 12412}#)
          (begin
            (if (not (list? #{ls 12412}#))
              (syntax-violation
                'generate-temporaries
                "invalid argument"
                #{ls 12412}#))
            (let ((#{mod 12420}#
                    (cons 'hygiene (module-name (current-module)))))
              (map (lambda (#{x 12421}#)
                     (#{wrap 2771}# (gensym) '((top)) #{mod 12420}#))
                   #{ls 12412}#)))))
      (set! free-identifier=?
        (lambda (#{x 12425}# #{y 12426}#)
          (begin
            (if (not (if (if (vector? #{x 12425}#)
                           (if (= (vector-length #{x 12425}#) 4)
                             (eq? (vector-ref #{x 12425}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{x 12425}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{x 12425}#))
            (if (not (if (if (vector? #{y 12426}#)
                           (if (= (vector-length #{y 12426}#) 4)
                             (eq? (vector-ref #{y 12426}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{y 12426}# 1))
                       #f))
              (syntax-violation
                'free-identifier=?
                "invalid argument"
                #{y 12426}#))
            (if (eq? (if (if (vector? #{x 12425}#)
                           (if (= (vector-length #{x 12425}#) 4)
                             (eq? (vector-ref #{x 12425}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{x 12425}# 1)
                       #{x 12425}#)
                     (if (if (vector? #{y 12426}#)
                           (if (= (vector-length #{y 12426}#) 4)
                             (eq? (vector-ref #{y 12426}# 0) 'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{y 12426}# 1)
                       #{y 12426}#))
              (eq? (#{id-var-name 2762}# #{x 12425}# '(()))
                   (#{id-var-name 2762}# #{y 12426}# '(())))
              #f))))
      (set! bound-identifier=?
        (lambda (#{x 12576}# #{y 12577}#)
          (begin
            (if (not (if (if (vector? #{x 12576}#)
                           (if (= (vector-length #{x 12576}#) 4)
                             (eq? (vector-ref #{x 12576}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{x 12576}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{x 12576}#))
            (if (not (if (if (vector? #{y 12577}#)
                           (if (= (vector-length #{y 12577}#) 4)
                             (eq? (vector-ref #{y 12577}# 0) 'syntax-object)
                             #f)
                           #f)
                       (symbol? (vector-ref #{y 12577}# 1))
                       #f))
              (syntax-violation
                'bound-identifier=?
                "invalid argument"
                #{y 12577}#))
            (if (if (if (vector? #{x 12576}#)
                      (if (= (vector-length #{x 12576}#) 4)
                        (eq? (vector-ref #{x 12576}# 0) 'syntax-object)
                        #f)
                      #f)
                  (if (vector? #{y 12577}#)
                    (if (= (vector-length #{y 12577}#) 4)
                      (eq? (vector-ref #{y 12577}# 0) 'syntax-object)
                      #f)
                    #f)
                  #f)
              (if (eq? (vector-ref #{x 12576}# 1)
                       (vector-ref #{y 12577}# 1))
                (#{same-marks? 2761}#
                  (car (vector-ref #{x 12576}# 2))
                  (car (vector-ref #{y 12577}# 2)))
                #f)
              (eq? #{x 12576}# #{y 12577}#)))))
      (set! syntax-violation
        (lambda*
          (#{who 12710}#
            #{message 12711}#
            #{form 12712}#
            #:optional
            (#{subform 12713}# #f))
          (begin
            (if (not (if (not #{who 12710}#)
                       (not #{who 12710}#)
                       (let ((#{t 12731}# (string? #{who 12710}#)))
                         (if #{t 12731}#
                           #{t 12731}#
                           (symbol? #{who 12710}#)))))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{who 12710}#))
            (if (not (string? #{message 12711}#))
              (syntax-violation
                'syntax-violation
                "invalid argument"
                #{message 12711}#))
            (throw 'syntax-error
                   #{who 12710}#
                   #{message 12711}#
                   (#{source-annotation 2736}#
                     (if #{form 12712}#
                       #{form 12712}#
                       #{subform 12713}#))
                   (#{strip 2791}# #{form 12712}# '(()))
                   (if #{subform 12713}#
                     (#{strip 2791}# #{subform 12713}# '(()))
                     #f)))))
      (letrec*
        ((#{match-each 12934}#
           (lambda (#{e 13521}#
                    #{p 13522}#
                    #{w 13523}#
                    #{mod 13524}#)
             (if (pair? #{e 13521}#)
               (let ((#{first 13525}#
                       (#{match 12940}#
                         (car #{e 13521}#)
                         #{p 13522}#
                         #{w 13523}#
                         '()
                         #{mod 13524}#)))
                 (if #{first 13525}#
                   (let ((#{rest 13528}#
                           (#{match-each 12934}#
                             (cdr #{e 13521}#)
                             #{p 13522}#
                             #{w 13523}#
                             #{mod 13524}#)))
                     (if #{rest 13528}#
                       (cons #{first 13525}# #{rest 13528}#)
                       #f))
                   #f))
               (if (null? #{e 13521}#)
                 '()
                 (if (if (vector? #{e 13521}#)
                       (if (= (vector-length #{e 13521}#) 4)
                         (eq? (vector-ref #{e 13521}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match-each 12934}#
                     (vector-ref #{e 13521}# 1)
                     #{p 13522}#
                     (#{join-wraps 2759}#
                       #{w 13523}#
                       (vector-ref #{e 13521}# 2))
                     (vector-ref #{e 13521}# 3))
                   #f)))))
         (#{match-each-any 12936}#
           (lambda (#{e 13556}# #{w 13557}# #{mod 13558}#)
             (if (pair? #{e 13556}#)
               (let ((#{l 13559}#
                       (#{match-each-any 12936}#
                         (cdr #{e 13556}#)
                         #{w 13557}#
                         #{mod 13558}#)))
                 (if #{l 13559}#
                   (cons (#{wrap 2771}#
                           (car #{e 13556}#)
                           #{w 13557}#
                           #{mod 13558}#)
                         #{l 13559}#)
                   #f))
               (if (null? #{e 13556}#)
                 '()
                 (if (if (vector? #{e 13556}#)
                       (if (= (vector-length #{e 13556}#) 4)
                         (eq? (vector-ref #{e 13556}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match-each-any 12936}#
                     (vector-ref #{e 13556}# 1)
                     (#{join-wraps 2759}#
                       #{w 13557}#
                       (vector-ref #{e 13556}# 2))
                     #{mod 13558}#)
                   #f)))))
         (#{match-empty 12937}#
           (lambda (#{p 13583}# #{r 13584}#)
             (if (null? #{p 13583}#)
               #{r 13584}#
               (if (eq? #{p 13583}# '_)
                 #{r 13584}#
                 (if (eq? #{p 13583}# 'any)
                   (cons '() #{r 13584}#)
                   (if (pair? #{p 13583}#)
                     (#{match-empty 12937}#
                       (car #{p 13583}#)
                       (#{match-empty 12937}#
                         (cdr #{p 13583}#)
                         #{r 13584}#))
                     (if (eq? #{p 13583}# 'each-any)
                       (cons '() #{r 13584}#)
                       (let ((#{atom-key 13585}# (vector-ref #{p 13583}# 0)))
                         (if (eqv? #{atom-key 13585}# 'each)
                           (#{match-empty 12937}#
                             (vector-ref #{p 13583}# 1)
                             #{r 13584}#)
                           (if (eqv? #{atom-key 13585}# 'each+)
                             (#{match-empty 12937}#
                               (vector-ref #{p 13583}# 1)
                               (#{match-empty 12937}#
                                 (reverse (vector-ref #{p 13583}# 2))
                                 (#{match-empty 12937}#
                                   (vector-ref #{p 13583}# 3)
                                   #{r 13584}#)))
                             (if (if (eqv? #{atom-key 13585}# 'free-id)
                                   #t
                                   (eqv? #{atom-key 13585}# 'atom))
                               #{r 13584}#
                               (if (eqv? #{atom-key 13585}# 'vector)
                                 (#{match-empty 12937}#
                                   (vector-ref #{p 13583}# 1)
                                   #{r 13584}#)))))))))))))
         (#{combine 12938}#
           (lambda (#{r* 13604}# #{r 13605}#)
             (if (null? (car #{r* 13604}#))
               #{r 13605}#
               (cons (map car #{r* 13604}#)
                     (#{combine 12938}#
                       (map cdr #{r* 13604}#)
                       #{r 13605}#)))))
         (#{match* 12939}#
           (lambda (#{e 12969}#
                    #{p 12970}#
                    #{w 12971}#
                    #{r 12972}#
                    #{mod 12973}#)
             (if (null? #{p 12970}#)
               (if (null? #{e 12969}#) #{r 12972}# #f)
               (if (pair? #{p 12970}#)
                 (if (pair? #{e 12969}#)
                   (#{match 12940}#
                     (car #{e 12969}#)
                     (car #{p 12970}#)
                     #{w 12971}#
                     (#{match 12940}#
                       (cdr #{e 12969}#)
                       (cdr #{p 12970}#)
                       #{w 12971}#
                       #{r 12972}#
                       #{mod 12973}#)
                     #{mod 12973}#)
                   #f)
                 (if (eq? #{p 12970}# 'each-any)
                   (let ((#{l 12978}#
                           (#{match-each-any 12936}#
                             #{e 12969}#
                             #{w 12971}#
                             #{mod 12973}#)))
                     (if #{l 12978}#
                       (cons #{l 12978}# #{r 12972}#)
                       #f))
                   (let ((#{atom-key 12983}# (vector-ref #{p 12970}# 0)))
                     (if (eqv? #{atom-key 12983}# 'each)
                       (if (null? #{e 12969}#)
                         (#{match-empty 12937}#
                           (vector-ref #{p 12970}# 1)
                           #{r 12972}#)
                         (let ((#{l 12990}#
                                 (#{match-each 12934}#
                                   #{e 12969}#
                                   (vector-ref #{p 12970}# 1)
                                   #{w 12971}#
                                   #{mod 12973}#)))
                           (if #{l 12990}#
                             (letrec*
                               ((#{collect 12993}#
                                  (lambda (#{l 13044}#)
                                    (if (null? (car #{l 13044}#))
                                      #{r 12972}#
                                      (cons (map car #{l 13044}#)
                                            (#{collect 12993}#
                                              (map cdr #{l 13044}#)))))))
                               (#{collect 12993}# #{l 12990}#))
                             #f)))
                       (if (eqv? #{atom-key 12983}# 'each+)
                         (call-with-values
                           (lambda ()
                             (let ((#{x-pat 13053}# (vector-ref #{p 12970}# 1))
                                   (#{y-pat 13054}# (vector-ref #{p 12970}# 2))
                                   (#{z-pat 13055}#
                                     (vector-ref #{p 12970}# 3)))
                               (letrec*
                                 ((#{f 13059}#
                                    (lambda (#{e 13061}# #{w 13062}#)
                                      (if (pair? #{e 13061}#)
                                        (call-with-values
                                          (lambda ()
                                            (#{f 13059}#
                                              (cdr #{e 13061}#)
                                              #{w 13062}#))
                                          (lambda (#{xr* 13063}#
                                                   #{y-pat 13064}#
                                                   #{r 13065}#)
                                            (if #{r 13065}#
                                              (if (null? #{y-pat 13064}#)
                                                (let ((#{xr 13066}#
                                                        (#{match 12940}#
                                                          (car #{e 13061}#)
                                                          #{x-pat 13053}#
                                                          #{w 13062}#
                                                          '()
                                                          #{mod 12973}#)))
                                                  (if #{xr 13066}#
                                                    (values
                                                      (cons #{xr 13066}#
                                                            #{xr* 13063}#)
                                                      #{y-pat 13064}#
                                                      #{r 13065}#)
                                                    (values #f #f #f)))
                                                (values
                                                  '()
                                                  (cdr #{y-pat 13064}#)
                                                  (#{match 12940}#
                                                    (car #{e 13061}#)
                                                    (car #{y-pat 13064}#)
                                                    #{w 13062}#
                                                    #{r 13065}#
                                                    #{mod 12973}#)))
                                              (values #f #f #f))))
                                        (if (if (vector? #{e 13061}#)
                                              (if (= (vector-length
                                                       #{e 13061}#)
                                                     4)
                                                (eq? (vector-ref #{e 13061}# 0)
                                                     'syntax-object)
                                                #f)
                                              #f)
                                          (#{f 13059}#
                                            (vector-ref #{e 13061}# 1)
                                            (#{join-wraps 2759}#
                                              #{w 13062}#
                                              #{e 13061}#))
                                          (values
                                            '()
                                            #{y-pat 13054}#
                                            (#{match 12940}#
                                              #{e 13061}#
                                              #{z-pat 13055}#
                                              #{w 13062}#
                                              #{r 12972}#
                                              #{mod 12973}#)))))))
                                 (#{f 13059}# #{e 12969}# #{w 12971}#))))
                           (lambda (#{xr* 13092}# #{y-pat 13093}# #{r 13094}#)
                             (if #{r 13094}#
                               (if (null? #{y-pat 13093}#)
                                 (if (null? #{xr* 13092}#)
                                   (#{match-empty 12937}#
                                     (vector-ref #{p 12970}# 1)
                                     #{r 13094}#)
                                   (#{combine 12938}#
                                     #{xr* 13092}#
                                     #{r 13094}#))
                                 #f)
                               #f)))
                         (if (eqv? #{atom-key 12983}# 'free-id)
                           (if (if (symbol? #{e 12969}#)
                                 #t
                                 (if (if (vector? #{e 12969}#)
                                       (if (= (vector-length #{e 12969}#) 4)
                                         (eq? (vector-ref #{e 12969}# 0)
                                              'syntax-object)
                                         #f)
                                       #f)
                                   (symbol? (vector-ref #{e 12969}# 1))
                                   #f))
                             (if (let ((#{i 13425}#
                                         (#{wrap 2771}#
                                           #{e 12969}#
                                           #{w 12971}#
                                           #{mod 12973}#))
                                       (#{j 13426}#
                                         (vector-ref #{p 12970}# 1)))
                                   (if (eq? (if (if (vector? #{i 13425}#)
                                                  (if (= (vector-length
                                                           #{i 13425}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{i 13425}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{i 13425}# 1)
                                              #{i 13425}#)
                                            (if (if (vector? #{j 13426}#)
                                                  (if (= (vector-length
                                                           #{j 13426}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{j 13426}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (vector-ref #{j 13426}# 1)
                                              #{j 13426}#))
                                     (eq? (#{id-var-name 2762}#
                                            #{i 13425}#
                                            '(()))
                                          (#{id-var-name 2762}#
                                            #{j 13426}#
                                            '(())))
                                     #f))
                               #{r 12972}#
                               #f)
                             #f)
                           (if (eqv? #{atom-key 12983}# 'atom)
                             (if (equal?
                                   (vector-ref #{p 12970}# 1)
                                   (#{strip 2791}# #{e 12969}# #{w 12971}#))
                               #{r 12972}#
                               #f)
                             (if (eqv? #{atom-key 12983}# 'vector)
                               (if (vector? #{e 12969}#)
                                 (#{match 12940}#
                                   (vector->list #{e 12969}#)
                                   (vector-ref #{p 12970}# 1)
                                   #{w 12971}#
                                   #{r 12972}#
                                   #{mod 12973}#)
                                 #f))))))))))))
         (#{match 12940}#
           (lambda (#{e 13486}#
                    #{p 13487}#
                    #{w 13488}#
                    #{r 13489}#
                    #{mod 13490}#)
             (if (not #{r 13489}#)
               #f
               (if (eq? #{p 13487}# '_)
                 #{r 13489}#
                 (if (eq? #{p 13487}# 'any)
                   (cons (#{wrap 2771}#
                           #{e 13486}#
                           #{w 13488}#
                           #{mod 13490}#)
                         #{r 13489}#)
                   (if (if (vector? #{e 13486}#)
                         (if (= (vector-length #{e 13486}#) 4)
                           (eq? (vector-ref #{e 13486}# 0) 'syntax-object)
                           #f)
                         #f)
                     (#{match* 12939}#
                       (vector-ref #{e 13486}# 1)
                       #{p 13487}#
                       (#{join-wraps 2759}#
                         #{w 13488}#
                         (vector-ref #{e 13486}# 2))
                       #{r 13489}#
                       (vector-ref #{e 13486}# 3))
                     (#{match* 12939}#
                       #{e 13486}#
                       #{p 13487}#
                       #{w 13488}#
                       #{r 13489}#
                       #{mod 13490}#))))))))
        (set! $sc-dispatch
          (lambda (#{e 12941}# #{p 12942}#)
            (if (eq? #{p 12942}# 'any)
              (list #{e 12941}#)
              (if (eq? #{p 12942}# '_)
                '()
                (if (if (vector? #{e 12941}#)
                      (if (= (vector-length #{e 12941}#) 4)
                        (eq? (vector-ref #{e 12941}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{match* 12939}#
                    (vector-ref #{e 12941}# 1)
                    #{p 12942}#
                    (vector-ref #{e 12941}# 2)
                    '()
                    (vector-ref #{e 12941}# 3))
                  (#{match* 12939}#
                    #{e 12941}#
                    #{p 12942}#
                    '(())
                    '()
                    #f))))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 24645}#)
      (let ((#{tmp 24647}#
              ($sc-dispatch #{x 24645}# '(_ () any . each-any))))
        (if #{tmp 24647}#
          (@apply
            (lambda (#{e1 24651}# #{e2 24652}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage #(e1 e2) #((top) (top)) #("1al" "1am"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1ak")))
                       (hygiene guile))
                    (cons '() (cons #{e1 24651}# #{e2 24652}#))))
            #{tmp 24647}#)
          (let ((#{tmp 24653}#
                  ($sc-dispatch
                    #{x 24645}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 24653}#
              (@apply
                (lambda (#{out 24657}#
                         #{in 24658}#
                         #{e1 24659}#
                         #{e2 24660}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("1an" "1ao" "1ap" "1aq"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1ak")))
                           (hygiene guile))
                        #{in 24658}#
                        '()
                        (list #{out 24657}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("1an" "1ao" "1ap" "1aq"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1ak")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 24659}# #{e2 24660}#))))))
                #{tmp 24653}#)
              (let ((#{tmp 24661}#
                      ($sc-dispatch
                        #{x 24645}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 24661}#
                  (@apply
                    (lambda (#{out 24665}#
                             #{in 24666}#
                             #{e1 24667}#
                             #{e2 24668}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("1ar" "1as" "1at" "1au"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("1ak")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("1ar" "1as" "1at" "1au"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("1ak")))
                                     (hygiene guile))
                                  #{in 24666}#)
                            '()
                            (list #{out 24665}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("1ar" "1as" "1at" "1au"))
                                            #(ribcage () () ())
                                            #(ribcage #(x) #((top)) #("1ak")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 24667}#
                                                    #{e2 24668}#))))))
                    #{tmp 24661}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 24645}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 24707}#)
      (let ((#{tmp 24709}#
              ($sc-dispatch
                #{x 24707}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 24709}#
          (@apply
            (lambda (#{k 24713}#
                     #{keyword 24714}#
                     #{pattern 24715}#
                     #{template 24716}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("1aw" "1ax" "1ay" "1az"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1av")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("1aw" "1ax" "1ay" "1az"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("1av")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("1aw" "1ax" "1ay" "1az"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1av")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("1aw" "1ax" "1ay" "1az"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1av")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("1aw" "1ax" "1ay" "1az"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("1av")))
                               (hygiene guile))
                            #{pattern 24715}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("1aw" "1ax" "1ay" "1az"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1av")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("1aw" "1ax" "1ay" "1az"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("1av")))
                                   (hygiene guile))
                                (cons #{k 24713}#
                                      (map (lambda (#{tmp 24691 24717}#
                                                    #{tmp 24690 24718}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("1aw"
                                                                 "1ax"
                                                                 "1ay"
                                                                 "1az"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("1av")))
                                                            (hygiene guile))
                                                         #{tmp 24690 24718}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("1aw"
                                                                 "1ax"
                                                                 "1ay"
                                                                 "1az"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("1av")))
                                                            (hygiene guile))
                                                         #{tmp 24691 24717}#)))
                                           #{template 24716}#
                                           #{pattern 24715}#))))))
            #{tmp 24709}#)
          (let ((#{tmp 24719}#
                  ($sc-dispatch
                    #{x 24707}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 24719}#
                  (@apply
                    (lambda (#{k 24723}#
                             #{docstring 24724}#
                             #{keyword 24725}#
                             #{pattern 24726}#
                             #{template 24727}#)
                      (string? (syntax->datum #{docstring 24724}#)))
                    #{tmp 24719}#)
                  #f)
              (@apply
                (lambda (#{k 24728}#
                         #{docstring 24729}#
                         #{keyword 24730}#
                         #{pattern 24731}#
                         #{template 24732}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("1b5" "1b6" "1b7" "1b8" "1b9"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1av")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("1b5" "1b6" "1b7" "1b8" "1b9"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("1av")))
                            (hygiene guile)))
                        #{docstring 24729}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("1b5" "1b6" "1b7" "1b8" "1b9"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("1av")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("1b5" "1b6" "1b7" "1b8" "1b9"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("1av")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("1b5" "1b6" "1b7" "1b8" "1b9"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("1av")))
                                   (hygiene guile))
                                #{pattern 24731}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("1b5" "1b6" "1b7" "1b8" "1b9"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("1av")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("1b5" "1b6" "1b7" "1b8" "1b9"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1av")))
                                       (hygiene guile))
                                    (cons #{k 24728}#
                                          (map (lambda (#{tmp 24706 24733}#
                                                        #{tmp 24705 24734}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("1b5"
                                                                     "1b6"
                                                                     "1b7"
                                                                     "1b8"
                                                                     "1b9"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("1av")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 24705 24734}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("1b5"
                                                                     "1b6"
                                                                     "1b7"
                                                                     "1b8"
                                                                     "1b9"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("1av")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 24706 24733}#)))
                                               #{template 24732}#
                                               #{pattern 24731}#))))))
                #{tmp 24719}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 24707}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 24759}#)
      (let ((#{tmp 24761}#
              ($sc-dispatch #{x 24759}# '(_ (any . any) any))))
        (if #{tmp 24761}#
          (@apply
            (lambda (#{name 24765}#
                     #{pattern 24766}#
                     #{template 24767}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("1bb" "1bc" "1bd"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1ba")))
                       (hygiene guile))
                    #{name 24765}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("1bb" "1bc" "1bd"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1ba")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("1bb" "1bc" "1bd"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("1ba")))
                                         (hygiene guile))
                                      #{pattern 24766}#)
                                #{template 24767}#))))
            #{tmp 24761}#)
          (let ((#{tmp 24768}#
                  ($sc-dispatch
                    #{x 24759}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 24768}#
                  (@apply
                    (lambda (#{name 24772}#
                             #{pattern 24773}#
                             #{docstring 24774}#
                             #{template 24775}#)
                      (string? (syntax->datum #{docstring 24774}#)))
                    #{tmp 24768}#)
                  #f)
              (@apply
                (lambda (#{name 24776}#
                         #{pattern 24777}#
                         #{docstring 24778}#
                         #{template 24779}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("1bi" "1bj" "1bk" "1bl"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1ba")))
                           (hygiene guile))
                        #{name 24776}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("1bi" "1bj" "1bk" "1bl"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("1ba")))
                                 (hygiene guile))
                              '()
                              #{docstring 24778}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("1bi" "1bj" "1bk" "1bl"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("1ba")))
                                             (hygiene guile))
                                          #{pattern 24777}#)
                                    #{template 24779}#))))
                #{tmp 24768}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 24759}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 24813}#)
      (let ((#{tmp 24815}#
              ($sc-dispatch
                #{x 24813}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 24815}#
              (@apply
                (lambda (#{let* 24819}#
                         #{x 24820}#
                         #{v 24821}#
                         #{e1 24822}#
                         #{e2 24823}#)
                  (and-map identifier? #{x 24820}#))
                #{tmp 24815}#)
              #f)
          (@apply
            (lambda (#{let* 24824}#
                     #{x 24825}#
                     #{v 24826}#
                     #{e1 24827}#
                     #{e2 24828}#)
              (letrec*
                ((#{f 24829}#
                   (lambda (#{bindings 24832}#)
                     (if (null? #{bindings 24832}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("1bx" "1by"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("1bs" "1bt" "1bu" "1bv" "1bw"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("1bm")))
                                (hygiene guile))
                             (cons '() (cons #{e1 24827}# #{e2 24828}#)))
                       (let ((#{tmp 24833}#
                               (list (#{f 24829}# (cdr #{bindings 24832}#))
                                     (car #{bindings 24832}#))))
                         (let ((#{tmp 24834}#
                                 ($sc-dispatch #{tmp 24833}# '(any any))))
                           (if #{tmp 24834}#
                             (@apply
                               (lambda (#{body 24836}# #{binding 24837}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("1bz" "1c0"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("1bx" "1by"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("1bs" "1bt" "1bu" "1bv" "1bw"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("1bm")))
                                          (hygiene guile))
                                       (list #{binding 24837}#)
                                       #{body 24836}#))
                               #{tmp 24834}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 24833}#))))))))
                (#{f 24829}# (map list #{x 24825}# #{v 24826}#))))
            #{tmp 24815}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 24813}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 24881}#)
      (let ((#{tmp 24883}#
              ($sc-dispatch
                #{orig-x 24881}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 24883}#
          (@apply
            (lambda (#{var 24887}#
                     #{init 24888}#
                     #{step 24889}#
                     #{e0 24890}#
                     #{e1 24891}#
                     #{c 24892}#)
              (let ((#{tmp 24893}#
                      (map (lambda (#{v 24896}# #{s 24897}#)
                             (let ((#{tmp 24899}#
                                     ($sc-dispatch #{s 24897}# '())))
                               (if #{tmp 24899}#
                                 (@apply (lambda () #{v 24896}#) #{tmp 24899}#)
                                 (let ((#{tmp 24902}#
                                         ($sc-dispatch #{s 24897}# '(any))))
                                   (if #{tmp 24902}#
                                     (@apply
                                       (lambda (#{e 24905}#) #{e 24905}#)
                                       #{tmp 24902}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 24881}#
                                       #{s 24897}#))))))
                           #{var 24887}#
                           #{step 24889}#)))
                (let ((#{tmp 24894}#
                        ($sc-dispatch #{tmp 24893}# 'each-any)))
                  (if #{tmp 24894}#
                    (@apply
                      (lambda (#{step 24911}#)
                        (let ((#{tmp 24913}# ($sc-dispatch #{e1 24891}# '())))
                          (if #{tmp 24913}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("1c8"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("1c2"
                                              "1c3"
                                              "1c4"
                                              "1c5"
                                              "1c6"
                                              "1c7"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("1c1")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage #(step) #((top)) #("1c8"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("1c2"
                                              "1c3"
                                              "1c4"
                                              "1c5"
                                              "1c6"
                                              "1c7"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("1c1")))
                                         (hygiene guile))
                                      (map list #{var 24887}# #{init 24888}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("1c8"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("1c2"
                                                    "1c3"
                                                    "1c4"
                                                    "1c5"
                                                    "1c6"
                                                    "1c7"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("1c1")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("1c8"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("1c2"
                                                          "1c3"
                                                          "1c4"
                                                          "1c5"
                                                          "1c6"
                                                          "1c7"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("1c1")))
                                                     (hygiene guile))
                                                  #{e0 24890}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("1c8"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("1c2"
                                                          "1c3"
                                                          "1c4"
                                                          "1c5"
                                                          "1c6"
                                                          "1c7"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("1c1")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 24892}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("1c8"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("1c2"
                                                                        "1c3"
                                                                        "1c4"
                                                                        "1c5"
                                                                        "1c6"
                                                                        "1c7"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("1c1")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 24911}#)))))))
                              #{tmp 24913}#)
                            (let ((#{tmp 24917}#
                                    ($sc-dispatch
                                      #{e1 24891}#
                                      '(any . each-any))))
                              (if #{tmp 24917}#
                                (@apply
                                  (lambda (#{e1 24921}# #{e2 24922}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("1c9" "1ca"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("1c8"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("1c2"
                                                  "1c3"
                                                  "1c4"
                                                  "1c5"
                                                  "1c6"
                                                  "1c7"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("1c1")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("1c9" "1ca"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("1c8"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("1c2"
                                                  "1c3"
                                                  "1c4"
                                                  "1c5"
                                                  "1c6"
                                                  "1c7"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("1c1")))
                                             (hygiene guile))
                                          (map list
                                               #{var 24887}#
                                               #{init 24888}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("1c9" "1ca"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("1c8"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1c2"
                                                        "1c3"
                                                        "1c4"
                                                        "1c5"
                                                        "1c6"
                                                        "1c7"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("1c1")))
                                                   (hygiene guile))
                                                #{e0 24890}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("1c9" "1ca"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("1c8"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("1c2"
                                                              "1c3"
                                                              "1c4"
                                                              "1c5"
                                                              "1c6"
                                                              "1c7"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("1c1")))
                                                         (hygiene guile))
                                                      (cons #{e1 24921}#
                                                            #{e2 24922}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("1c9" "1ca"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("1c8"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("1c2"
                                                              "1c3"
                                                              "1c4"
                                                              "1c5"
                                                              "1c6"
                                                              "1c7"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("1c1")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 24892}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("1c9"
                                                                            "1ca"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("1c8"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("1c2"
                                                                            "1c3"
                                                                            "1c4"
                                                                            "1c5"
                                                                            "1c6"
                                                                            "1c7"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("1c1")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 24911}#)))))))
                                  #{tmp 24917}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 24891}#))))))
                      #{tmp 24894}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 24893}#)))))
            #{tmp 24883}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 24881}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 25129}#
         (lambda (#{p 25153}# #{lev 25154}#)
           (let ((#{tmp 25156}#
                   ($sc-dispatch
                     #{p 25153}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1cm" "1cn"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 25156}#
               (@apply
                 (lambda (#{p 25160}#)
                   (if (= #{lev 25154}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("1co"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("1cm" "1cn"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                              (hygiene guile))
                           #{p 25160}#)
                     (#{quasicons 25131}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("1co"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1cm" "1cn"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("1co"))
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1cm" "1cn"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                           (hygiene guile)))
                       (#{quasi 25129}#
                         (list #{p 25160}#)
                         (#{1-}# #{lev 25154}#)))))
                 #{tmp 25156}#)
               (let ((#{tmp 25163}#
                       ($sc-dispatch
                         #{p 25153}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("1cm" "1cn"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 25163}#
                   (@apply
                     (lambda (#{p 25167}#)
                       (#{quasicons 25131}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("1cp"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("1cm" "1cn"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("1cp"))
                              #(ribcage () () ())
                              #(ribcage #(p lev) #((top) (top)) #("1cm" "1cn"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                             (hygiene guile)))
                         (#{quasi 25129}#
                           (list #{p 25167}#)
                           (#{1+}# #{lev 25154}#))))
                     #{tmp 25163}#)
                   (let ((#{tmp 25170}#
                           ($sc-dispatch #{p 25153}# '(any . any))))
                     (if #{tmp 25170}#
                       (@apply
                         (lambda (#{p 25174}# #{q 25175}#)
                           (let ((#{tmp 25177}#
                                   ($sc-dispatch
                                     #{p 25174}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("1cq" "1cr"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("1cm" "1cn"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("1cl"
                                               "1ck"
                                               "1cj"
                                               "1ci"
                                               "1ch"
                                               "1cg"
                                               "1cf")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 25177}#
                               (@apply
                                 (lambda (#{p 25181}#)
                                   (if (= #{lev 25154}# 0)
                                     (#{quasilist* 25133}#
                                       (map (lambda (#{tmp 24958 25217}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("1cs"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("1cq" "1cr"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("1cm" "1cn"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1cl"
                                                           "1ck"
                                                           "1cj"
                                                           "1ci"
                                                           "1ch"
                                                           "1cg"
                                                           "1cf")))
                                                       (hygiene guile))
                                                    #{tmp 24958 25217}#))
                                            #{p 25181}#)
                                       (#{quasi 25129}#
                                         #{q 25175}#
                                         #{lev 25154}#))
                                     (#{quasicons 25131}#
                                       (#{quasicons 25131}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage #(p) #((top)) #("1cs"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("1cq" "1cr"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("1cm" "1cn"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1cl"
                                                 "1ck"
                                                 "1cj"
                                                 "1ci"
                                                 "1ch"
                                                 "1cg"
                                                 "1cf")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage #(p) #((top)) #("1cs"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("1cq" "1cr"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("1cm" "1cn"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("1cl"
                                                 "1ck"
                                                 "1cj"
                                                 "1ci"
                                                 "1ch"
                                                 "1cg"
                                                 "1cf")))
                                             (hygiene guile)))
                                         (#{quasi 25129}#
                                           #{p 25181}#
                                           (#{1-}# #{lev 25154}#)))
                                       (#{quasi 25129}#
                                         #{q 25175}#
                                         #{lev 25154}#))))
                                 #{tmp 25177}#)
                               (let ((#{tmp 25222}#
                                       ($sc-dispatch
                                         #{p 25174}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("1cq" "1cr"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("1cm" "1cn"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1cl"
                                                   "1ck"
                                                   "1cj"
                                                   "1ci"
                                                   "1ch"
                                                   "1cg"
                                                   "1cf")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 25222}#
                                   (@apply
                                     (lambda (#{p 25226}#)
                                       (if (= #{lev 25154}# 0)
                                         (#{quasiappend 25132}#
                                           (map (lambda (#{tmp 24962 25229}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("1ct"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("1cq" "1cr"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("1cm" "1cn"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("1cl"
                                                               "1ck"
                                                               "1cj"
                                                               "1ci"
                                                               "1ch"
                                                               "1cg"
                                                               "1cf")))
                                                           (hygiene guile))
                                                        #{tmp 24962 25229}#))
                                                #{p 25226}#)
                                           (#{quasi 25129}#
                                             #{q 25175}#
                                             #{lev 25154}#))
                                         (#{quasicons 25131}#
                                           (#{quasicons 25131}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("1ct"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("1cq" "1cr"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("1cm" "1cn"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("1cl"
                                                     "1ck"
                                                     "1cj"
                                                     "1ci"
                                                     "1ch"
                                                     "1cg"
                                                     "1cf")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("1ct"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("1cq" "1cr"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("1cm" "1cn"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("1cl"
                                                     "1ck"
                                                     "1cj"
                                                     "1ci"
                                                     "1ch"
                                                     "1cg"
                                                     "1cf")))
                                                 (hygiene guile)))
                                             (#{quasi 25129}#
                                               #{p 25226}#
                                               (#{1-}# #{lev 25154}#)))
                                           (#{quasi 25129}#
                                             #{q 25175}#
                                             #{lev 25154}#))))
                                     #{tmp 25222}#)
                                   (#{quasicons 25131}#
                                     (#{quasi 25129}#
                                       #{p 25174}#
                                       #{lev 25154}#)
                                     (#{quasi 25129}#
                                       #{q 25175}#
                                       #{lev 25154}#)))))))
                         #{tmp 25170}#)
                       (let ((#{tmp 25243}#
                               ($sc-dispatch #{p 25153}# '#(vector each-any))))
                         (if #{tmp 25243}#
                           (@apply
                             (lambda (#{x 25247}#)
                               (let ((#{x 25250}#
                                       (#{vquasi 25130}#
                                         #{x 25247}#
                                         #{lev 25154}#)))
                                 (let ((#{tmp 25252}#
                                         ($sc-dispatch
                                           #{x 25250}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 25252}#
                                     (@apply
                                       (lambda (#{x 25256}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1dp"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1do"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1cl"
                                                      "1ck"
                                                      "1cj"
                                                      "1ci"
                                                      "1ch"
                                                      "1cg"
                                                      "1cf")))
                                                  (hygiene guile))
                                               (list->vector #{x 25256}#)))
                                       #{tmp 25252}#)
                                     (letrec*
                                       ((#{f 25258}#
                                          (lambda (#{y 25270}# #{k 25271}#)
                                            (let ((#{tmp 25273}#
                                                    ($sc-dispatch
                                                      #{y 25270}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 25273}#
                                                (@apply
                                                  (lambda (#{y 25276}#)
                                                    (#{k 25271}#
                                                      (map (lambda (#{tmp 25053 25277}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("1dw"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("1dr"
                                                                           "1ds"
                                                                           "1dt"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("1dq"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("1do"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("1cl"
                                                                          "1ck"
                                                                          "1cj"
                                                                          "1ci"
                                                                          "1ch"
                                                                          "1cg"
                                                                          "1cf")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 25053 25277}#))
                                                           #{y 25276}#)))
                                                  #{tmp 25273}#)
                                                (let ((#{tmp 25278}#
                                                        ($sc-dispatch
                                                          #{y 25270}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 25278}#
                                                    (@apply
                                                      (lambda (#{y 25281}#)
                                                        (#{k 25271}#
                                                          #{y 25281}#))
                                                      #{tmp 25278}#)
                                                    (let ((#{tmp 25282}#
                                                            ($sc-dispatch
                                                              #{y 25270}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 25282}#
                                                        (@apply
                                                          (lambda (#{y 25285}#
                                                                   #{z 25286}#)
                                                            (#{f 25258}#
                                                              #{z 25286}#
                                                              (lambda (#{ls 25287}#)
                                                                (#{k 25271}#
                                                                  (append
                                                                    #{y 25285}#
                                                                    #{ls 25287}#)))))
                                                          #{tmp 25282}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g25063}#)
                                                                    #((m25064
                                                                        top))
                                                                    #("1e2"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("1e1"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("1dr"
                                                                      "1ds"
                                                                      "1dt"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("1dq"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("1do"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("1cl"
                                                                     "1ck"
                                                                     "1cj"
                                                                     "1ci"
                                                                     "1ch"
                                                                     "1cg"
                                                                     "1cf")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 25250}#))))))))))
                                       (#{f 25258}#
                                         #{x 25250}#
                                         (lambda (#{ls 25260}#)
                                           (let ((#{tmp 25262}#
                                                   ($sc-dispatch
                                                     #{ls 25260}#
                                                     'each-any)))
                                             (if #{tmp 25262}#
                                               (@apply
                                                 (lambda (#{ g25043 25265}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g25043}#)
                                                               #((m25044 top))
                                                               #("1dv"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("1du"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("1dq"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("1do"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("1cl"
                                                                "1ck"
                                                                "1cj"
                                                                "1ci"
                                                                "1ch"
                                                                "1cg"
                                                                "1cf")))
                                                            (hygiene guile))
                                                         #{ g25043 25265}#))
                                                 #{tmp 25262}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 25260}#))))))))))
                             #{tmp 25243}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("1cw"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("1cm" "1cn"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("1cl"
                                        "1ck"
                                        "1cj"
                                        "1ci"
                                        "1ch"
                                        "1cg"
                                        "1cf")))
                                    (hygiene guile))
                                 #{p 25153}#)))))))))))
       (#{vquasi 25130}#
         (lambda (#{p 25315}# #{lev 25316}#)
           (let ((#{tmp 25318}#
                   ($sc-dispatch #{p 25315}# '(any . any))))
             (if #{tmp 25318}#
               (@apply
                 (lambda (#{p 25322}# #{q 25323}#)
                   (let ((#{tmp 25325}#
                           ($sc-dispatch
                             #{p 25322}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("1cz" "1d0"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("1cx" "1cy"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("1cl"
                                       "1ck"
                                       "1cj"
                                       "1ci"
                                       "1ch"
                                       "1cg"
                                       "1cf")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 25325}#
                       (@apply
                         (lambda (#{p 25329}#)
                           (if (= #{lev 25316}# 0)
                             (#{quasilist* 25133}#
                               (map (lambda (#{tmp 24978 25365}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("1d1"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("1cz" "1d0"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("1cx" "1cy"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("1cl"
                                                   "1ck"
                                                   "1cj"
                                                   "1ci"
                                                   "1ch"
                                                   "1cg"
                                                   "1cf")))
                                               (hygiene guile))
                                            #{tmp 24978 25365}#))
                                    #{p 25329}#)
                               (#{vquasi 25130}# #{q 25323}# #{lev 25316}#))
                             (#{quasicons 25131}#
                               (#{quasicons 25131}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("1d1"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("1cz" "1d0"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("1cx" "1cy"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("1cl"
                                         "1ck"
                                         "1cj"
                                         "1ci"
                                         "1ch"
                                         "1cg"
                                         "1cf")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("1d1"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("1cz" "1d0"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("1cx" "1cy"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("1cl"
                                         "1ck"
                                         "1cj"
                                         "1ci"
                                         "1ch"
                                         "1cg"
                                         "1cf")))
                                     (hygiene guile)))
                                 (#{quasi 25129}#
                                   #{p 25329}#
                                   (#{1-}# #{lev 25316}#)))
                               (#{vquasi 25130}# #{q 25323}# #{lev 25316}#))))
                         #{tmp 25325}#)
                       (let ((#{tmp 25372}#
                               ($sc-dispatch
                                 #{p 25322}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("1cz" "1d0"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("1cx" "1cy"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("1cl"
                                           "1ck"
                                           "1cj"
                                           "1ci"
                                           "1ch"
                                           "1cg"
                                           "1cf")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 25372}#
                           (@apply
                             (lambda (#{p 25376}#)
                               (if (= #{lev 25316}# 0)
                                 (#{quasiappend 25132}#
                                   (map (lambda (#{tmp 24982 25379}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("1d2"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("1cz" "1d0"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("1cx" "1cy"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("1cl"
                                                       "1ck"
                                                       "1cj"
                                                       "1ci"
                                                       "1ch"
                                                       "1cg"
                                                       "1cf")))
                                                   (hygiene guile))
                                                #{tmp 24982 25379}#))
                                        #{p 25376}#)
                                   (#{vquasi 25130}#
                                     #{q 25323}#
                                     #{lev 25316}#))
                                 (#{quasicons 25131}#
                                   (#{quasicons 25131}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("1d2"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("1cz" "1d0"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("1cx" "1cy"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("1cl"
                                             "1ck"
                                             "1cj"
                                             "1ci"
                                             "1ch"
                                             "1cg"
                                             "1cf")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("1d2"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("1cz" "1d0"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("1cx" "1cy"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("1cl"
                                             "1ck"
                                             "1cj"
                                             "1ci"
                                             "1ch"
                                             "1cg"
                                             "1cf")))
                                         (hygiene guile)))
                                     (#{quasi 25129}#
                                       #{p 25376}#
                                       (#{1-}# #{lev 25316}#)))
                                   (#{vquasi 25130}#
                                     #{q 25323}#
                                     #{lev 25316}#))))
                             #{tmp 25372}#)
                           (#{quasicons 25131}#
                             (#{quasi 25129}# #{p 25322}# #{lev 25316}#)
                             (#{vquasi 25130}# #{q 25323}# #{lev 25316}#)))))))
                 #{tmp 25318}#)
               (let ((#{tmp 25397}# ($sc-dispatch #{p 25315}# '())))
                 (if #{tmp 25397}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(p lev) #((top) (top)) #("1cx" "1cy"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                           (hygiene guile))
                         ()))
                     #{tmp 25397}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 25315}#)))))))
       (#{quasicons 25131}#
         (lambda (#{x 25410}# #{y 25411}#)
           (let ((#{tmp 25412}# (list #{x 25410}# #{y 25411}#)))
             (let ((#{tmp 25413}#
                     ($sc-dispatch #{tmp 25412}# '(any any))))
               (if #{tmp 25413}#
                 (@apply
                   (lambda (#{x 25415}# #{y 25416}#)
                     (let ((#{tmp 25418}#
                             ($sc-dispatch
                               #{y 25416}#
                               '(#(atom "quote") any))))
                       (if #{tmp 25418}#
                         (@apply
                           (lambda (#{dy 25422}#)
                             (let ((#{tmp 25424}#
                                     ($sc-dispatch
                                       #{x 25415}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 25424}#
                                 (@apply
                                   (lambda (#{dx 25428}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("1d9"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("1d8"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1d6" "1d7"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1d4" "1d5"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("1cl"
                                                  "1ck"
                                                  "1cj"
                                                  "1ci"
                                                  "1ch"
                                                  "1cg"
                                                  "1cf")))
                                              (hygiene guile))
                                           (cons #{dx 25428}# #{dy 25422}#)))
                                   #{tmp 25424}#)
                                 (if (null? #{dy 25422}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("1da"))
                                             #(ribcage #(dy) #((top)) #("1d8"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1d6" "1d7"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1d4" "1d5"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1cl"
                                                "1ck"
                                                "1cj"
                                                "1ci"
                                                "1ch"
                                                "1cg"
                                                "1cf")))
                                            (hygiene guile))
                                         #{x 25415}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage #(_) #((top)) #("1da"))
                                             #(ribcage #(dy) #((top)) #("1d8"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1d6" "1d7"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("1d4" "1d5"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("1cl"
                                                "1ck"
                                                "1cj"
                                                "1ci"
                                                "1ch"
                                                "1cg"
                                                "1cf")))
                                            (hygiene guile))
                                         #{x 25415}#
                                         #{y 25416}#)))))
                           #{tmp 25418}#)
                         (let ((#{tmp 25433}#
                                 ($sc-dispatch
                                   #{y 25416}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 25433}#
                             (@apply
                               (lambda (#{stuff 25437}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("1db"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1d6" "1d7"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1d4" "1d5"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1cl"
                                              "1ck"
                                              "1cj"
                                              "1ci"
                                              "1ch"
                                              "1cg"
                                              "1cf")))
                                          (hygiene guile))
                                       (cons #{x 25415}# #{stuff 25437}#)))
                               #{tmp 25433}#)
                             (let ((#{tmp 25438}#
                                     ($sc-dispatch
                                       #{y 25416}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 25438}#
                                 (@apply
                                   (lambda (#{stuff 25442}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("1dc"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1d6" "1d7"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("1d4" "1d5"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("1cl"
                                                  "1ck"
                                                  "1cj"
                                                  "1ci"
                                                  "1ch"
                                                  "1cg"
                                                  "1cf")))
                                              (hygiene guile))
                                           (cons #{x 25415}# #{stuff 25442}#)))
                                   #{tmp 25438}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("1dd"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1d6" "1d7"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("1d4" "1d5"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1cl"
                                              "1ck"
                                              "1cj"
                                              "1ci"
                                              "1ch"
                                              "1cg"
                                              "1cf")))
                                          (hygiene guile))
                                       #{x 25415}#
                                       #{y 25416}#))))))))
                   #{tmp 25413}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 25412}#))))))
       (#{quasiappend 25132}#
         (lambda (#{x 25453}# #{y 25454}#)
           (let ((#{tmp 25456}#
                   ($sc-dispatch #{y 25454}# '(#(atom "quote") ()))))
             (if #{tmp 25456}#
               (@apply
                 (lambda ()
                   (if (null? #{x 25453}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage #(x y) #((top) (top)) #("1de" "1df"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 25453}#))
                       (car #{x 25453}#)
                       (let ((#{tmp 25461}#
                               ($sc-dispatch #{x 25453}# 'each-any)))
                         (if #{tmp 25461}#
                           (@apply
                             (lambda (#{p 25465}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("1dg"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("1de" "1df"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("1cl"
                                            "1ck"
                                            "1cj"
                                            "1ci"
                                            "1ch"
                                            "1cg"
                                            "1cf")))
                                        (hygiene guile))
                                     #{p 25465}#))
                             #{tmp 25461}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 25453}#))))))
                 #{tmp 25456}#)
               (if (null? #{x 25453}#)
                 #{y 25454}#
                 (let ((#{tmp 25473}# (list #{x 25453}# #{y 25454}#)))
                   (let ((#{tmp 25474}#
                           ($sc-dispatch #{tmp 25473}# '(each-any any))))
                     (if #{tmp 25474}#
                       (@apply
                         (lambda (#{p 25476}# #{y 25477}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("1di" "1dj"))
                                     #(ribcage #(_) #((top)) #("1dh"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("1de" "1df"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("1cl"
                                        "1ck"
                                        "1cj"
                                        "1ci"
                                        "1ch"
                                        "1cg"
                                        "1cf")))
                                    (hygiene guile))
                                 (append #{p 25476}# (list #{y 25477}#))))
                         #{tmp 25474}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 25473}#)))))))))
       (#{quasilist* 25133}#
         (lambda (#{x 25481}# #{y 25482}#)
           (letrec*
             ((#{f 25483}#
                (lambda (#{x 25572}#)
                  (if (null? #{x 25572}#)
                    #{y 25482}#
                    (#{quasicons 25131}#
                      (car #{x 25572}#)
                      (#{f 25483}# (cdr #{x 25572}#)))))))
             (#{f 25483}# #{x 25481}#))))
       (#{emit 25135}#
         (lambda (#{x 25575}#)
           (let ((#{tmp 25577}#
                   ($sc-dispatch #{x 25575}# '(#(atom "quote") any))))
             (if #{tmp 25577}#
               (@apply
                 (lambda (#{x 25581}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("1e4"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("1e3"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("1cl" "1ck" "1cj" "1ci" "1ch" "1cg" "1cf")))
                            (hygiene guile))
                         #{x 25581}#))
                 #{tmp 25577}#)
               (let ((#{tmp 25582}#
                       ($sc-dispatch
                         #{x 25575}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 25582}#
                   (@apply
                     (lambda (#{x 25586}#)
                       (let ((#{tmp 25587}# (map #{emit 25135}# #{x 25586}#)))
                         (let ((#{tmp 25588}#
                                 ($sc-dispatch #{tmp 25587}# 'each-any)))
                           (if #{tmp 25588}#
                             (@apply
                               (lambda (#{ g25074 25590}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g25074}#)
                                             #((m25075 top))
                                             #("1e6"))
                                           #(ribcage #(x) #((top)) #("1e5"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("1e3"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("1cl"
                                              "1ck"
                                              "1cj"
                                              "1ci"
                                              "1ch"
                                              "1cg"
                                              "1cf")))
                                          (hygiene guile))
                                       #{ g25074 25590}#))
                               #{tmp 25588}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 25587}#)))))
                     #{tmp 25582}#)
                   (let ((#{tmp 25591}#
                           ($sc-dispatch
                             #{x 25575}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 25591}#
                       (@apply
                         (lambda (#{x 25595}# #{y 25596}#)
                           (letrec*
                             ((#{f 25597}#
                                (lambda (#{x* 25600}#)
                                  (if (null? #{x* 25600}#)
                                    (#{emit 25135}# #{y 25596}#)
                                    (let ((#{tmp 25601}#
                                            (list (#{emit 25135}#
                                                    (car #{x* 25600}#))
                                                  (#{f 25597}#
                                                    (cdr #{x* 25600}#)))))
                                      (let ((#{tmp 25602}#
                                              ($sc-dispatch
                                                #{tmp 25601}#
                                                '(any any))))
                                        (if #{tmp 25602}#
                                          (@apply
                                            (lambda (#{ g25089 25604}#
                                                     #{ g25088 25605}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g25089}#
                                                            #{ g25088}#)
                                                          #((m25090 top)
                                                            (m25090 top))
                                                          #("1eb" "1ec"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("1e9" "1ea"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("1e7" "1e8"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("1e3"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("1cl"
                                                           "1ck"
                                                           "1cj"
                                                           "1ci"
                                                           "1ch"
                                                           "1cg"
                                                           "1cf")))
                                                       (hygiene guile))
                                                    #{ g25089 25604}#
                                                    #{ g25088 25605}#))
                                            #{tmp 25602}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 25601}#))))))))
                             (#{f 25597}# #{x 25595}#)))
                         #{tmp 25591}#)
                       (let ((#{tmp 25606}#
                               ($sc-dispatch
                                 #{x 25575}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 25606}#
                           (@apply
                             (lambda (#{x 25610}#)
                               (let ((#{tmp 25611}#
                                       (map #{emit 25135}# #{x 25610}#)))
                                 (let ((#{tmp 25612}#
                                         ($sc-dispatch
                                           #{tmp 25611}#
                                           'each-any)))
                                   (if #{tmp 25612}#
                                     (@apply
                                       (lambda (#{ g25098 25614}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g25098}#)
                                                     #((m25099 top))
                                                     #("1ee"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1ed"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1e3"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1cl"
                                                      "1ck"
                                                      "1cj"
                                                      "1ci"
                                                      "1ch"
                                                      "1cg"
                                                      "1cf")))
                                                  (hygiene guile))
                                               #{ g25098 25614}#))
                                       #{tmp 25612}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 25611}#)))))
                             #{tmp 25606}#)
                           (let ((#{tmp 25615}#
                                   ($sc-dispatch
                                     #{x 25575}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 25615}#
                               (@apply
                                 (lambda (#{x 25619}#)
                                   (let ((#{tmp 25620}#
                                           (map #{emit 25135}# #{x 25619}#)))
                                     (let ((#{tmp 25621}#
                                             ($sc-dispatch
                                               #{tmp 25620}#
                                               'each-any)))
                                       (if #{tmp 25621}#
                                         (@apply
                                           (lambda (#{ g25108 25623}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g25108}#)
                                                         #((m25109 top))
                                                         #("1eg"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("1ef"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("1e3"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("1cl"
                                                          "1ck"
                                                          "1cj"
                                                          "1ci"
                                                          "1ch"
                                                          "1cg"
                                                          "1cf")))
                                                      (hygiene guile))
                                                   #{ g25108 25623}#))
                                           #{tmp 25621}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 25620}#)))))
                                 #{tmp 25615}#)
                               (let ((#{tmp 25624}#
                                       ($sc-dispatch
                                         #{x 25575}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 25624}#
                                   (@apply
                                     (lambda (#{x 25628}#)
                                       (let ((#{tmp 25629}#
                                               (#{emit 25135}# #{x 25628}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g25118}#)
                                                     #((m25119 top))
                                                     #("1ei"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1eh"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1e3"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("1cl"
                                                      "1ck"
                                                      "1cj"
                                                      "1ci"
                                                      "1ch"
                                                      "1cg"
                                                      "1cf")))
                                                  (hygiene guile))
                                               #{tmp 25629}#)))
                                     #{tmp 25624}#)
                                   (let ((#{tmp 25632}#
                                           ($sc-dispatch
                                             #{x 25575}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 25632}#
                                       (@apply
                                         (lambda (#{x 25636}#) #{x 25636}#)
                                         #{tmp 25632}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 25575}#))))))))))))))))))
      (lambda (#{x 25136}#)
        (let ((#{tmp 25138}#
                ($sc-dispatch #{x 25136}# '(_ any))))
          (if #{tmp 25138}#
            (@apply
              (lambda (#{e 25142}#)
                (#{emit 25135}# (#{quasi 25129}# #{e 25142}# 0)))
              #{tmp 25138}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 25136}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 25679}#)
      (letrec*
        ((#{read-file 25680}#
           (lambda (#{fn 25789}# #{k 25790}#)
             (let ((#{p 25791}# (open-input-file #{fn 25789}#)))
               (letrec*
                 ((#{f 25792}#
                    (lambda (#{x 25846}# #{result 25847}#)
                      (if (eof-object? #{x 25846}#)
                        (begin
                          (close-input-port #{p 25791}#)
                          (reverse #{result 25847}#))
                        (#{f 25792}#
                          (read #{p 25791}#)
                          (cons (datum->syntax #{k 25790}# #{x 25846}#)
                                #{result 25847}#))))))
                 (#{f 25792}# (read #{p 25791}#) '()))))))
        (let ((#{tmp 25682}#
                ($sc-dispatch #{x 25679}# '(any any))))
          (if #{tmp 25682}#
            (@apply
              (lambda (#{k 25686}# #{filename 25687}#)
                (let ((#{fn 25688}# (syntax->datum #{filename 25687}#)))
                  (let ((#{tmp 25689}#
                          (#{read-file 25680}#
                            #{fn 25688}#
                            #{filename 25687}#)))
                    (let ((#{tmp 25690}#
                            ($sc-dispatch #{tmp 25689}# 'each-any)))
                      (if #{tmp 25690}#
                        (@apply
                          (lambda (#{exp 25708}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("1ex"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("1ew"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("1eu" "1ev"))
                                      #(ribcage (read-file) ((top)) ("1en"))
                                      #(ribcage #(x) #((top)) #("1em")))
                                     (hygiene guile))
                                  #{exp 25708}#))
                          #{tmp 25690}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 25689}#))))))
              #{tmp 25682}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 25679}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 25860}#)
      (let ((#{tmp 25862}#
              ($sc-dispatch #{x 25860}# '(any any))))
        (if #{tmp 25862}#
          (@apply
            (lambda (#{k 25866}# #{filename 25867}#)
              (let ((#{fn 25868}# (syntax->datum #{filename 25867}#)))
                (let ((#{tmp 25869}#
                        (datum->syntax
                          #{filename 25867}#
                          (let ((#{t 25872}# (%search-load-path #{fn 25868}#)))
                            (if #{t 25872}#
                              #{t 25872}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 25860}#
                                #{filename 25867}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("1f2"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("1f1"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("1ez" "1f0"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1ey")))
                           (hygiene guile))
                        #{tmp 25869}#))))
            #{tmp 25862}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 25860}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 25880}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 25880}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 25882}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 25882}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 25919}#)
      (let ((#{tmp 25921}#
              ($sc-dispatch
                #{x 25919}#
                '(_ any any . each-any))))
        (if #{tmp 25921}#
          (@apply
            (lambda (#{e 25925}# #{m1 25926}# #{m2 25927}#)
              (let ((#{tmp 25928}#
                      (letrec*
                        ((#{f 25970}#
                           (lambda (#{clause 25973}# #{clauses 25974}#)
                             (if (null? #{clauses 25974}#)
                               (let ((#{tmp 25976}#
                                       ($sc-dispatch
                                         #{clause 25973}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("1fb" "1fc" "1fd"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("1f7" "1f8" "1f9"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("1f6")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 25976}#
                                   (@apply
                                     (lambda (#{e1 25980}# #{e2 25981}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("1fe" "1ff"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("1fb" "1fc" "1fd"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("1f7" "1f8" "1f9"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("1f6")))
                                                (hygiene guile))
                                             (cons #{e1 25980}# #{e2 25981}#)))
                                     #{tmp 25976}#)
                                   (let ((#{tmp 25982}#
                                           ($sc-dispatch
                                             #{clause 25973}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 25982}#
                                       (@apply
                                         (lambda (#{k 25986}#
                                                  #{e1 25987}#
                                                  #{e2 25988}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("1fg" "1fh" "1fi"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("1fb" "1fc" "1fd"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("1f7" "1f8" "1f9"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("1f6")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1fg"
                                                               "1fh"
                                                               "1fi"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1fb"
                                                               "1fc"
                                                               "1fd"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1f7"
                                                               "1f8"
                                                               "1f9"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1f6")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1fg"
                                                               "1fh"
                                                               "1fi"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1fb"
                                                               "1fc"
                                                               "1fd"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1f7"
                                                               "1f8"
                                                               "1f9"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1f6")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("1fg"
                                                                     "1fh"
                                                                     "1fi"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("1fb"
                                                                     "1fc"
                                                                     "1fd"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("1f7"
                                                                     "1f8"
                                                                     "1f9"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("1f6")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 25986}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1fg"
                                                               "1fh"
                                                               "1fi"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1fb"
                                                               "1fc"
                                                               "1fd"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("1f7"
                                                               "1f8"
                                                               "1f9"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1f6")))
                                                          (hygiene guile))
                                                       (cons #{e1 25987}#
                                                             #{e2 25988}#))))
                                         #{tmp 25982}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 25919}#
                                         #{clause 25973}#)))))
                               (let ((#{tmp 25996}#
                                       (#{f 25970}#
                                         (car #{clauses 25974}#)
                                         (cdr #{clauses 25974}#))))
                                 (let ((#{tmp 25999}#
                                         ($sc-dispatch
                                           #{clause 25973}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 25999}#
                                     (@apply
                                       (lambda (#{k 26003}#
                                                #{e1 26004}#
                                                #{e2 26005}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("1fl" "1fm" "1fn"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("1fk"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("1fb" "1fc" "1fd"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("1f7" "1f8" "1f9"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("1f6")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("1fl"
                                                             "1fm"
                                                             "1fn"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("1fk"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("1fb"
                                                             "1fc"
                                                             "1fd"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("1f7"
                                                             "1f8"
                                                             "1f9"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("1f6")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("1fl"
                                                             "1fm"
                                                             "1fn"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("1fk"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("1fb"
                                                             "1fc"
                                                             "1fd"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("1f7"
                                                             "1f8"
                                                             "1f9"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("1f6")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("1fl"
                                                                   "1fm"
                                                                   "1fn"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("1fk"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("1fb"
                                                                   "1fc"
                                                                   "1fd"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("1f7"
                                                                   "1f8"
                                                                   "1f9"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("1f6")))
                                                              (hygiene guile))
                                                           #{k 26003}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("1fl"
                                                             "1fm"
                                                             "1fn"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("1fk"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("1fb"
                                                             "1fc"
                                                             "1fd"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("1f7"
                                                             "1f8"
                                                             "1f9"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("1f6")))
                                                        (hygiene guile))
                                                     (cons #{e1 26004}#
                                                           #{e2 26005}#))
                                               #{tmp 25996}#))
                                       #{tmp 25999}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 25919}#
                                       #{clause 25973}#))))))))
                        (#{f 25970}# #{m1 25926}# #{m2 25927}#))))
                (let ((#{body 25929}# #{tmp 25928}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("1fa"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("1f7" "1f8" "1f9"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1f6")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("1fa"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("1f7" "1f8" "1f9"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1f6")))
                                       (hygiene guile))
                                    #{e 25925}#))
                        #{body 25929}#))))
            #{tmp 25921}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 25919}#))))))

(define make-variable-transformer
  (lambda (#{proc 26020}#)
    (if (procedure? #{proc 26020}#)
      (letrec*
        ((#{trans 26021}#
           (lambda (#{x 26027}#)
             (#{proc 26020}# #{x 26027}#))))
        (begin
          (set-procedure-property!
            #{trans 26021}#
            'variable-transformer
            #t)
          #{trans 26021}#))
      (error "variable transformer not a procedure"
             #{proc 26020}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 26047}#)
      (let ((#{tmp 26049}#
              ($sc-dispatch #{x 26047}# '(_ any))))
        (if #{tmp 26049}#
          (@apply
            (lambda (#{e 26053}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("1ft"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1fs")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("1ft"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("1fs")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("1ft"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1fs")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("1ft"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("1fs")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("1ft"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1fs")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("1ft"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1fs")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("1ft"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("1fs")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1ft"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1fs")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("1ft"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("1fs")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("1ft"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("1fs")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("1ft"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("1fs")))
                                         (hygiene guile))
                                      #{e 26053}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1ft"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1fs")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1ft"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1fs")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("1ft"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1fs")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("1ft"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("1fs")))
                                         (hygiene guile))
                                      (cons #{e 26053}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("1ft"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("1fs")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("1ft"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("1fs")))
                                                (hygiene guile)))))))))
            #{tmp 26049}#)
          (let ((#{tmp 26054}#
                  ($sc-dispatch
                    #{x 26047}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("1fs")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 26054}#
                  (@apply
                    (lambda (#{id 26058}#
                             #{exp1 26059}#
                             #{var 26060}#
                             #{val 26061}#
                             #{exp2 26062}#)
                      (if (identifier? #{id 26058}#)
                        (identifier? #{var 26060}#)
                        #f))
                    #{tmp 26054}#)
                  #f)
              (@apply
                (lambda (#{id 26063}#
                         #{exp1 26064}#
                         #{var 26065}#
                         #{val 26066}#
                         #{exp2 26067}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("1fz" "1g0" "1g1" "1g2" "1g3"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1fs")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("1fs")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("1fs")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1fs")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("1fs")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1fs")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("1fs")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("1fz" "1g0" "1g1" "1g2" "1g3"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("1fs")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1fz"
                                                        "1g0"
                                                        "1g1"
                                                        "1g2"
                                                        "1g3"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1fs")))
                                                   (hygiene guile))
                                                #{var 26065}#
                                                #{val 26066}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1fz"
                                                        "1g0"
                                                        "1g1"
                                                        "1g2"
                                                        "1g3"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1fs")))
                                                   (hygiene guile))
                                                #{exp2 26067}#))
                                    (list (cons #{id 26063}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("1fz"
                                                         "1g0"
                                                         "1g1"
                                                         "1g2"
                                                         "1g3"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("1fs")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("1fz"
                                                         "1g0"
                                                         "1g1"
                                                         "1g2"
                                                         "1g3"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("1fs")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1fz"
                                                        "1g0"
                                                        "1g1"
                                                        "1g2"
                                                        "1g3"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1fs")))
                                                   (hygiene guile))
                                                (cons #{exp1 26064}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("1fz"
                                                               "1g0"
                                                               "1g1"
                                                               "1g2"
                                                               "1g3"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1fs")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("1fz"
                                                               "1g0"
                                                               "1g1"
                                                               "1g2"
                                                               "1g3"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("1fs")))
                                                          (hygiene guile))))))
                                    (list #{id 26063}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1fz"
                                                        "1g0"
                                                        "1g1"
                                                        "1g2"
                                                        "1g3"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1fs")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("1fz"
                                                              "1g0"
                                                              "1g1"
                                                              "1g2"
                                                              "1g3"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("1fs")))
                                                         (hygiene guile))
                                                      #{id 26063}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("1fz"
                                                        "1g0"
                                                        "1g1"
                                                        "1g2"
                                                        "1g3"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("1fs")))
                                                   (hygiene guile))
                                                #{exp1 26064}#))))))
                #{tmp 26054}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 26047}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 26090}#)
      (let ((#{tmp 26092}#
              ($sc-dispatch
                #{x 26090}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 26092}#
          (@apply
            (lambda (#{id 26096}#
                     #{args 26097}#
                     #{b0 26098}#
                     #{b1 26099}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("1g5" "1g6" "1g7" "1g8"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("1g4")))
                       (hygiene guile))
                    #{id 26096}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("1g5" "1g6" "1g7" "1g8"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("1g4")))
                             (hygiene guile))
                          (cons #{args 26097}#
                                (cons #{b0 26098}# #{b1 26099}#)))))
            #{tmp 26092}#)
          (let ((#{tmp 26100}#
                  ($sc-dispatch #{x 26090}# '(_ any any))))
            (if (if #{tmp 26100}#
                  (@apply
                    (lambda (#{id 26104}# #{val 26105}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("1g9" "1ga"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1g4")))
                           (hygiene guile))))
                    #{tmp 26100}#)
                  #f)
              (@apply
                (lambda (#{id 26106}# #{val 26107}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("1gb" "1gc"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("1g4")))
                           (hygiene guile))
                        #{id 26106}#
                        #{val 26107}#))
                #{tmp 26100}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 26090}#))))))))

