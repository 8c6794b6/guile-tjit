;;; "scheme2c.init" Initialisation for SLIB for Scheme->C on Sun -*-scheme-*-
;;; Authors: David Love and Aubrey Jaffer
;;;
;;; This code is in the public domain.

;;Modified by David Love (d.love@daresbury.ac.uk) 10/12/91
;; NB this is for the 01nov91 (and, presumably, later ones,
;; although those may not need the bug fixes done at the end).
;; Earlier versions definitely aren't rev4 conformant.  Check
;; `ieee-floating-point' and `system' in *features* for non-Sun un*x
;; versions and `system' and the vicinity stuff (at least) for
;; non-un*x versions.

;; Of course, if you make serious use of library functions you'll want
;; to compile them and  use Scheme->C modules.

(define (software-type) 'UNIX)

;;; (scheme-implementation-type) should return the name of the scheme
;;; implementation loading this file.

(define (scheme-implementation-type) 'Scheme->C)

;;; (scheme-implementation-home-page) should return a (string) URI
;;; (Uniform Resource Identifier) for this scheme implementation's home
;;; page; or false if there isn't one.

(define (scheme-implementation-home-page) #f)

;;; (scheme-implementation-version) should return a string describing
;;; the version the scheme implementation loading this file.

(define (scheme-implementation-version) "?01nov91")

(define (implementation-vicinity)
  (case (software-type)
    ((UNIX)	"/usr/local/lib/scheme/")
    ((VMS)	"scheme$src:")
    ((MS-DOS)	"C:\\scheme\\")))

;;; (library-vicinity) should be defined to be the pathname of the
;;; directory where files of Scheme library functions reside.

(define library-vicinity
  (let ((library-path
	 (case (software-type)
	   ((UNIX) "/usr/local/lib/slib/")
	   ((VMS) "lib$scheme:")
	   ((MS-DOS) "C:\\SLIB\\")
	   (else ""))))
    (lambda () library-path)))

;;; (home-vicinity) should return the vicinity of the user's HOME
;;; directory, the directory which typically contains files which
;;; customize a computer environment for a user.

(define home-vicinity
  (let ((home-path (getenv "HOME")))
    (lambda () home-path)))

;;; *FEATURES* should be set to a list of symbols describing features
;;; of this implementation.  See Template.scm for the list of feature
;;; names.

(define *features*
      '(
	source				;can load scheme source files
					;(slib:load-source "filename")
;	compiled			;can load compiled files
					;(slib:load-compiled "filename")
	rev4-report
	;; Follows rev4 as far as I can tell, modulo '() being false,
	;; number syntax (see doc), incomplete tail recursion (see
	;; docs) and a couple of bugs in some versions -- see below.
	rev3-report			;conforms to
;	ieee-p1178			;conforms to
	;; ieee conformance is ruled out by '() being false, if
	;; nothing else.
	rev4-optional-procedures
	rev3-procedures
;	rev2-procedures
	multiarg/and-
	multiarg-apply
	rationalize
	object-hash
	delay
	promise
	with-file
	transcript
	char-ready?
	ieee-floating-point
	full-continuation
	pretty-print
	format
	trace				;has macros: TRACE and UNTRACE
	string-port
	system
	;; next two could be added easily to the interpreter
;	getenv
;	program-arguments
	))

(define pretty-print pp)

;;; (OUTPUT-PORT-WIDTH <port>)
(define (output-port-width . arg) 79)

;;; (OUTPUT-PORT-HEIGHT <port>)
(define (output-port-height . arg) 24)

;;; (CURRENT-ERROR-PORT)
(define current-error-port
  (let ((port (current-output-port)))
    (lambda () port)))

;;; (TMPNAM) makes a temporary file name.
(define tmpnam
  (let ((cntr 100))
    (lambda () (set! cntr (+ 1 cntr))
	    (let ((tmp (string-append "slib_" (number->string cntr))))
	      (if (file-exists? tmp) (tmpnam) tmp)))))

;;; (FILE-EXISTS? <string>)
(define (file-exists? f)
  (case (software-type)
    ((UNIX) (zero? (system (string-append "test -f " f))))
    (else (slib:error "FILE-EXISTS? not defined for " software-type))))

;;; (DELETE-FILE <string>)
(define (delete-file f)
  (case (software-type)
    ((UNIX) (zero? (system (string-append "rm " f))))
    (else (slib:error "DELETE-FILE not defined for " software-type))))

;;; FORCE-OUTPUT flushes any pending output on optional arg output port
;;; use this definition if your system doesn't have such a procedure.
(define force-output flush-buffer)

;;; CALL-WITH-INPUT-STRING and CALL-WITH-OUTPUT-STRING are the string
;;; port versions of CALL-WITH-*PUT-FILE.
(define (call-with-output-string f)
  (let ((outsp (open-output-string)))
    (f outsp)
    (let ((s (get-output-string outsp)))
;;;   (close-output-port outsp)		;doesn't work
      s)))

(define (call-with-input-string s f)
  (let* ((insp (open-input-string s))
	 (res (f insp)))
    (close-input-port insp)
    res))

;;; "rationalize" adjunct procedures.
(define (find-ratio x e)
  (let ((rat (rationalize x e)))
    (list (numerator rat) (denominator rat))))
(define (find-ratio-between x y)
  (find-ratio (/ (+ x y) 2) (/ (- x y) 2)))

;;; CHAR-CODE-LIMIT is one greater than the largest integer which can
;;; be returned by CHAR->INTEGER.
(define char-code-limit 256)

;; MOST-POSITIVE-FIXNUM is used in modular.scm
(define most-positive-fixnum 536870911)

;;; Return argument
(define (identity x) x)

;;; SLIB:EVAL is single argument eval using the top-level (user) environment.
(define slib:eval eval)

(define-macro defmacro
  (lambda (f e)
    (let ((key (cadr f)) (pattern (caddr f)) (body (cdddr f)))
      (e `(define-macro ,key 
	    (let ((%transformer (lambda ,pattern ,@body)))
	      (lambda (%form %expr)
		(%expr (apply %transformer (cdr %form)) %expr))))
	 e))))

(define (defmacro? m) (and (getprop m '*expander*) #t))

(define macroexpand-1 expand-once)

(define (macroexpand e)
  (if (pair? e) (let ((a (car e)))
		  (if (and (symbol? a) (getprop a '*expander*))
		      (macroexpand (expand-once e))
		      e))
      e))

(define gentemp
  (let ((*gensym-counter* -1))
    (lambda ()
      (set! *gensym-counter* (+ *gensym-counter* 1))
      (string->symbol
       (string-append "slib:G" (number->string *gensym-counter*))))))

(define defmacro:eval slib:eval)
(define defmacro:load load)
;;; If your implementation provides R4RS macros:
;(define macro:eval slib:eval)
;(define macro:load load)

(define (slib:eval-load <pathname> evl)
  (if (not (file-exists? <pathname>))
      (set! <pathname> (string-append <pathname> (scheme-file-suffix))))
  (call-with-input-file <pathname>
    (lambda (port)
      (let ((old-load-pathname *load-pathname*))
	(set! *load-pathname* <pathname>)
	(do ((o (read port) (read port)))
	    ((eof-object? o))
	  (evl o))
	(set! *load-pathname* old-load-pathname)))))

(define slib:warn
  (lambda args
    (let ((cep (current-error-port)))
      (if (provided? 'trace) (print-call-stack cep))
      (display "Warn: " cep)
      (for-each (lambda (x) (display x cep)) args))))

;; define an error procedure for the library
(define (slib:error . args)
  (if (provided? 'trace) (print-call-stack (current-error-port)))
  (error 'slib-error: "~a"
	 (apply string-append
		(map
		 (lambda (a)
		   (format " ~a" a))
		 args))))

;; define these as appropriate for your system.
(define slib:tab (integer->char 9))
(define slib:form-feed (integer->char 12))

;;; bug fixes for Scheme->C (versions 28sep90, 23feb90, 01nov91):

(let ((vers (substring (cadr (implementation-information)) 0 7)))
  (if (or (string=? vers "28sep90") (string=? vers "23feb90")
	  (string=? vers "01nov91"))
      (begin
	;; GCD fails with 0 as argument
	(define old-gcd gcd)
	(set! gcd (lambda args
		    (apply old-gcd (remv! 0 args))))
	
	;; STRING->SYMBOL doesn't allocate a new string
	(set! string->symbol
	      (let ((fred string->symbol))
		(lambda (a) (fred (string-append a)))))
	
	;; NUMBER->STRING can generate a leading #?
	(set! number->string
	      (let ((fred number->string))
		(lambda (num . radix)
		  (let ((joe (apply fred num radix)))
		    (if (char=? #\# (string-ref joe 0))
			(substring joe 2 (string-length joe))
			joe)))))
	
	;; Another bug is bad expansion of LETREC when the body starts with a
	;; DEFINE as shown by test.scm -- not fixed here.
	)))

(define promise:force force)

;;; (implementation-vicinity) should be defined to be the pathname of
;;; the directory where any auxillary files to your Scheme
;;; implementation reside.

(define in-vicinity string-append)

;;; Define SLIB:EXIT to be the implementation procedure to exit or
;;; return if exitting not supported.
(define slib:exit (lambda args (exit)))

;;; Here for backward compatability
(define scheme-file-suffix
  (let ((suffix (case (software-type)
		  ((NOSVE) "_scm")
		  (else ".scm"))))
    (lambda () suffix)))

;;; (SLIB:LOAD-SOURCE "foo") should load "foo.scm" or with whatever
;;; suffix all the module files in SLIB have.  See feature 'SOURCE.

(define (slib:load-source f) (load (string-append f (scheme-file-suffix))))

;;; (SLIB:LOAD-COMPILED "foo") should load the file that was produced
;;; by compiling "foo.scm" if this implementation can compile files.
;;; See feature 'COMPILED.

(define slib:load-compiled load)

;;; At this point SLIB:LOAD must be able to load SLIB files.

(define slib:load slib:load-source)

(slib:load (in-vicinity (library-vicinity) "require"))
; eof
