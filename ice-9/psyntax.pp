(letrec ((lambda-var-list116 (lambda (vars323) (let lvl324 ((vars325 vars323) (ls326 (quote ())) (w327 (quote (())))) (cond ((pair? vars325) (lvl324 (cdr vars325) (cons (wrap95 (car vars325) w327) ls326) w327)) ((id?67 vars325) (cons (wrap95 vars325 w327) ls326)) ((null? vars325) ls326) ((syntax-object?53 vars325) (lvl324 (syntax-object-expression54 vars325) ls326 (join-wraps86 w327 (syntax-object-wrap55 vars325)))) ((annotation?42 vars325) (lvl324 (annotation-expression vars325) ls326 w327)) (else (cons vars325 ls326)))))) (gen-var115 (lambda (id328) (let ((id329 (if (syntax-object?53 id328) (syntax-object-expression54 id328) id328))) (if (annotation?42 id329) (gensym (symbol->string (annotation-expression id329))) (gensym (symbol->string id329)))))) (strip114 (lambda (x330 w331) (if (memq (quote top) (wrap-marks70 w331)) (if (or (annotation?42 x330) (and (pair? x330) (annotation?42 (car x330)))) (strip-annotation113 x330 (quote #f)) x330) (let f332 ((x333 x330)) (cond ((syntax-object?53 x333) (strip114 (syntax-object-expression54 x333) (syntax-object-wrap55 x333))) ((pair? x333) (let ((a334 (f332 (car x333))) (d335 (f332 (cdr x333)))) (if (and (eq? a334 (car x333)) (eq? d335 (cdr x333))) x333 (cons a334 d335)))) ((vector? x333) (let ((old336 (vector->list x333))) (let ((new337 (map f332 old336))) (if (andmap eq? old336 new337) x333 (list->vector new337))))) (else x333)))))) (strip-annotation113 (lambda (x338 parent339) (cond ((pair? x338) (let ((new340 (cons (quote #f) (quote #f)))) (begin (when parent339 (set-annotation-stripped! parent339 new340)) (set-car! new340 (strip-annotation113 (car x338) (quote #f))) (set-cdr! new340 (strip-annotation113 (cdr x338) (quote #f))) new340))) ((annotation?42 x338) (or (annotation-stripped x338) (strip-annotation113 (annotation-expression x338) x338))) ((vector? x338) (let ((new341 (make-vector (vector-length x338)))) (begin (when parent339 (set-annotation-stripped! parent339 new341)) (let loop342 ((i343 (- (vector-length x338) (quote 1)))) (unless (fx<41 i343 (quote 0)) (vector-set! new341 i343 (strip-annotation113 (vector-ref x338 i343) (quote #f))) (loop342 (fx-39 i343 (quote 1))))) new341))) (else x338)))) (ellipsis?112 (lambda (x344) (and (nonsymbol-id?66 x344) (free-id=?90 x344 (quote #(syntax-object ... ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))))))))) (chi-void111 (lambda () (list (quote void)))) (eval-local-transformer110 (lambda (expanded345) (let ((p346 (local-eval-hook44 expanded345))) (if (procedure? p346) p346 (syntax-error p346 (quote "nonprocedure transfomer")))))) (chi-local-syntax109 (lambda (rec?347 e348 r349 w350 s351 k352) ((lambda (tmp353) ((lambda (tmp354) (if tmp354 (apply (lambda (_355 id356 val357 e1358 e2359) (let ((ids360 id356)) (if (not (valid-bound-ids?92 ids360)) (syntax-error e348 (quote "duplicate bound keyword in")) (let ((labels362 (gen-labels73 ids360))) (let ((new-w363 (make-binding-wrap84 ids360 labels362 w350))) (k352 (cons e1358 e2359) (extend-env61 labels362 (let ((w365 (if rec?347 new-w363 w350)) (trans-r366 (macros-only-env63 r349))) (map (lambda (x367) (cons (quote macro) (eval-local-transformer110 (chi103 x367 trans-r366 w365)))) val357)) r349) new-w363 s351)))))) tmp354) ((lambda (_369) (syntax-error (source-wrap96 e348 w350 s351))) tmp353))) (syntax-dispatch tmp353 (quote (any #(each (any any)) any . each-any))))) e348))) (chi-lambda-clause108 (lambda (e370 c371 r372 w373 k374) ((lambda (tmp375) ((lambda (tmp376) (if tmp376 (apply (lambda (id377 e1378 e2379) (let ((ids380 id377)) (if (not (valid-bound-ids?92 ids380)) (syntax-error e370 (quote "invalid parameter list in")) (let ((labels382 (gen-labels73 ids380)) (new-vars383 (map gen-var115 ids380))) (k374 new-vars383 (chi-body107 (cons e1378 e2379) e370 (extend-var-env62 labels382 new-vars383 r372) (make-binding-wrap84 ids380 labels382 w373))))))) tmp376) ((lambda (tmp385) (if tmp385 (apply (lambda (ids386 e1387 e2388) (let ((old-ids389 (lambda-var-list116 ids386))) (if (not (valid-bound-ids?92 old-ids389)) (syntax-error e370 (quote "invalid parameter list in")) (let ((labels390 (gen-labels73 old-ids389)) (new-vars391 (map gen-var115 old-ids389))) (k374 (let f392 ((ls1393 (cdr new-vars391)) (ls2394 (car new-vars391))) (if (null? ls1393) ls2394 (f392 (cdr ls1393) (cons (car ls1393) ls2394)))) (chi-body107 (cons e1387 e2388) e370 (extend-var-env62 labels390 new-vars391 r372) (make-binding-wrap84 old-ids389 labels390 w373))))))) tmp385) ((lambda (_396) (syntax-error e370)) tmp375))) (syntax-dispatch tmp375 (quote (any any . each-any)))))) (syntax-dispatch tmp375 (quote (each-any any . each-any))))) c371))) (chi-body107 (lambda (body397 outer-form398 r399 w400) (let ((r401 (cons (quote ("placeholder" placeholder)) r399))) (let ((ribcage402 (make-ribcage74 (quote ()) (quote ()) (quote ())))) (let ((w403 (make-wrap69 (wrap-marks70 w400) (cons ribcage402 (wrap-subst71 w400))))) (let parse404 ((body405 (map (lambda (x411) (cons r401 (wrap95 x411 w403))) body397)) (ids406 (quote ())) (labels407 (quote ())) (vars408 (quote ())) (vals409 (quote ())) (bindings410 (quote ()))) (if (null? body405) (syntax-error outer-form398 (quote "no expressions in body")) (let ((e412 (cdar body405)) (er413 (caar body405))) (call-with-values (lambda () (syntax-type101 e412 er413 (quote (())) (quote #f) ribcage402)) (lambda (type414 value415 e416 w417 s418) (let ((t419 type414)) (if (memv t419 (quote (define-form))) (let ((id420 (wrap95 value415 w417)) (label421 (gen-label72))) (let ((var422 (gen-var115 id420))) (begin (extend-ribcage!83 ribcage402 id420 label421) (parse404 (cdr body405) (cons id420 ids406) (cons label421 labels407) (cons var422 vars408) (cons (cons er413 (wrap95 e416 w417)) vals409) (cons (cons (quote lexical) var422) bindings410))))) (if (memv t419 (quote (define-syntax-form))) (let ((id423 (wrap95 value415 w417)) (label424 (gen-label72))) (begin (extend-ribcage!83 ribcage402 id423 label424) (parse404 (cdr body405) (cons id423 ids406) (cons label424 labels407) vars408 vals409 (cons (cons (quote macro) (cons er413 (wrap95 e416 w417))) bindings410)))) (if (memv t419 (quote (begin-form))) ((lambda (tmp425) ((lambda (tmp426) (if tmp426 (apply (lambda (_427 e1428) (parse404 (let f429 ((forms430 e1428)) (if (null? forms430) (cdr body405) (cons (cons er413 (wrap95 (car forms430) w417)) (f429 (cdr forms430))))) ids406 labels407 vars408 vals409 bindings410)) tmp426) (syntax-error tmp425))) (syntax-dispatch tmp425 (quote (any . each-any))))) e416) (if (memv t419 (quote (local-syntax-form))) (chi-local-syntax109 value415 e416 er413 w417 s418 (lambda (forms432 er433 w434 s435) (parse404 (let f436 ((forms437 forms432)) (if (null? forms437) (cdr body405) (cons (cons er433 (wrap95 (car forms437) w434)) (f436 (cdr forms437))))) ids406 labels407 vars408 vals409 bindings410))) (if (null? ids406) (build-sequence48 (quote #f) (map (lambda (x438) (chi103 (cdr x438) (car x438) (quote (())))) (cons (cons er413 (source-wrap96 e416 w417 s418)) (cdr body405)))) (begin (if (not (valid-bound-ids?92 ids406)) (syntax-error outer-form398 (quote "invalid or duplicate identifier in definition"))) (let loop439 ((bs440 bindings410) (er-cache441 (quote #f)) (r-cache442 (quote #f))) (if (not (null? bs440)) (let ((b443 (car bs440))) (if (eq? (car b443) (quote macro)) (let ((er444 (cadr b443))) (let ((r-cache445 (if (eq? er444 er-cache441) r-cache442 (macros-only-env63 er444)))) (begin (set-cdr! b443 (eval-local-transformer110 (chi103 (cddr b443) r-cache445 (quote (()))))) (loop439 (cdr bs440) er444 r-cache445)))) (loop439 (cdr bs440) er-cache441 r-cache442))))) (set-cdr! r401 (extend-env61 labels407 bindings410 (cdr r401))) (build-letrec51 (quote #f) vars408 (map (lambda (x446) (chi103 (cdr x446) (car x446) (quote (())))) vals409) (build-sequence48 (quote #f) (map (lambda (x447) (chi103 (cdr x447) (car x447) (quote (())))) (cons (cons er413 (source-wrap96 e416 w417 s418)) (cdr body405)))))))))))))))))))))) (chi-macro106 (lambda (p448 e449 r450 w451 rib452) (letrec ((rebuild-macro-output453 (lambda (x454 m455) (cond ((pair? x454) (cons (rebuild-macro-output453 (car x454) m455) (rebuild-macro-output453 (cdr x454) m455))) ((syntax-object?53 x454) (let ((w456 (syntax-object-wrap55 x454))) (let ((ms457 (wrap-marks70 w456)) (s458 (wrap-subst71 w456))) (make-syntax-object52 (syntax-object-expression54 x454) (if (and (pair? ms457) (eq? (car ms457) (quote #f))) (make-wrap69 (cdr ms457) (if rib452 (cons rib452 (cdr s458)) (cdr s458))) (make-wrap69 (cons m455 ms457) (if rib452 (cons rib452 (cons (quote shift) s458)) (cons (quote shift) s458)))))))) ((vector? x454) (let ((n459 (vector-length x454))) (let ((v460 (make-vector n459))) (let doloop461 ((i462 (quote 0))) (if (fx=40 i462 n459) v460 (begin (vector-set! v460 i462 (rebuild-macro-output453 (vector-ref x454 i462) m455)) (doloop461 (fx+38 i462 (quote 1))))))))) ((symbol? x454) (syntax-error x454 (quote "encountered raw symbol in macro output"))) (else x454))))) (rebuild-macro-output453 (p448 (wrap95 e449 (anti-mark82 w451))) (string (quote #\m)))))) (chi-application105 (lambda (x463 e464 r465 w466 s467) ((lambda (tmp468) ((lambda (tmp469) (if tmp469 (apply (lambda (e0470 e1471) (cons x463 (map (lambda (e472) (chi103 e472 r465 w466)) e1471))) tmp469) (syntax-error tmp468))) (syntax-dispatch tmp468 (quote (any . each-any))))) e464))) (chi-expr104 (lambda (type474 value475 e476 r477 w478 s479) (let ((t480 type474)) (if (memv t480 (quote (lexical))) value475 (if (memv t480 (quote (core))) (value475 e476 r477 w478 s479) (if (memv t480 (quote (lexical-call))) (chi-application105 value475 e476 r477 w478 s479) (if (memv t480 (quote (global-call))) (chi-application105 value475 e476 r477 w478 s479) (if (memv t480 (quote (constant))) (list (quote quote) (strip114 (source-wrap96 e476 w478 s479) (quote (())))) (if (memv t480 (quote (global))) value475 (if (memv t480 (quote (call))) (chi-application105 (chi103 (car e476) r477 w478) e476 r477 w478 s479) (if (memv t480 (quote (begin-form))) ((lambda (tmp481) ((lambda (tmp482) (if tmp482 (apply (lambda (_483 e1484 e2485) (chi-sequence97 (cons e1484 e2485) r477 w478 s479)) tmp482) (syntax-error tmp481))) (syntax-dispatch tmp481 (quote (any any . each-any))))) e476) (if (memv t480 (quote (local-syntax-form))) (chi-local-syntax109 value475 e476 r477 w478 s479 chi-sequence97) (if (memv t480 (quote (eval-when-form))) ((lambda (tmp487) ((lambda (tmp488) (if tmp488 (apply (lambda (_489 x490 e1491 e2492) (let ((when-list493 (chi-when-list100 e476 x490 w478))) (if (memq (quote eval) when-list493) (chi-sequence97 (cons e1491 e2492) r477 w478 s479) (chi-void111)))) tmp488) (syntax-error tmp487))) (syntax-dispatch tmp487 (quote (any each-any any . each-any))))) e476) (if (memv t480 (quote (define-form define-syntax-form))) (syntax-error (wrap95 value475 w478) (quote "invalid context for definition of")) (if (memv t480 (quote (syntax))) (syntax-error (source-wrap96 e476 w478 s479) (quote "reference to pattern variable outside syntax form")) (if (memv t480 (quote (displaced-lexical))) (syntax-error (source-wrap96 e476 w478 s479) (quote "reference to identifier outside its scope")) (syntax-error (source-wrap96 e476 w478 s479)))))))))))))))))) (chi103 (lambda (e496 r497 w498) (call-with-values (lambda () (syntax-type101 e496 r497 w498 (quote #f) (quote #f))) (lambda (type499 value500 e501 w502 s503) (chi-expr104 type499 value500 e501 r497 w502 s503))))) (chi-top102 (lambda (e504 r505 w506 m507 esew508) (call-with-values (lambda () (syntax-type101 e504 r505 w506 (quote #f) (quote #f))) (lambda (type515 value516 e517 w518 s519) (let ((t520 type515)) (if (memv t520 (quote (begin-form))) ((lambda (tmp521) ((lambda (tmp522) (if tmp522 (apply (lambda (_523) (chi-void111)) tmp522) ((lambda (tmp524) (if tmp524 (apply (lambda (_525 e1526 e2527) (chi-top-sequence98 (cons e1526 e2527) r505 w518 s519 m507 esew508)) tmp524) (syntax-error tmp521))) (syntax-dispatch tmp521 (quote (any any . each-any)))))) (syntax-dispatch tmp521 (quote (any))))) e517) (if (memv t520 (quote (local-syntax-form))) (chi-local-syntax109 value516 e517 r505 w518 s519 (lambda (body529 r530 w531 s532) (chi-top-sequence98 body529 r530 w531 s532 m507 esew508))) (if (memv t520 (quote (eval-when-form))) ((lambda (tmp533) ((lambda (tmp534) (if tmp534 (apply (lambda (_535 x536 e1537 e2538) (let ((when-list539 (chi-when-list100 e517 x536 w518)) (body540 (cons e1537 e2538))) (cond ((eq? m507 (quote e)) (if (memq (quote eval) when-list539) (chi-top-sequence98 body540 r505 w518 s519 (quote e) (quote (eval))) (chi-void111))) ((memq (quote load) when-list539) (if (or (memq (quote compile) when-list539) (and (eq? m507 (quote c&e)) (memq (quote eval) when-list539))) (chi-top-sequence98 body540 r505 w518 s519 (quote c&e) (quote (compile load))) (if (memq m507 (quote (c c&e))) (chi-top-sequence98 body540 r505 w518 s519 (quote c) (quote (load))) (chi-void111)))) ((or (memq (quote compile) when-list539) (and (eq? m507 (quote c&e)) (memq (quote eval) when-list539))) (top-level-eval-hook43 (chi-top-sequence98 body540 r505 w518 s519 (quote e) (quote (eval)))) (chi-void111)) (else (chi-void111))))) tmp534) (syntax-error tmp533))) (syntax-dispatch tmp533 (quote (any each-any any . each-any))))) e517) (if (memv t520 (quote (define-syntax-form))) (let ((n543 (id-var-name89 value516 w518)) (r544 (macros-only-env63 r505))) (let ((t545 m507)) (if (memv t545 (quote (c))) (if (memq (quote compile) esew508) (let ((e546 (chi-install-global99 n543 (chi103 e517 r544 w518)))) (begin (top-level-eval-hook43 e546) (if (memq (quote load) esew508) e546 (chi-void111)))) (if (memq (quote load) esew508) (chi-install-global99 n543 (chi103 e517 r544 w518)) (chi-void111))) (if (memv t545 (quote (c&e))) (let ((e547 (chi-install-global99 n543 (chi103 e517 r544 w518)))) (begin (top-level-eval-hook43 e547) e547)) (begin (if (memq (quote eval) esew508) (top-level-eval-hook43 (chi-install-global99 n543 (chi103 e517 r544 w518)))) (chi-void111)))))) (if (memv t520 (quote (define-form))) (let ((n548 (id-var-name89 value516 w518))) (let ((t549 (binding-type59 (lookup64 n548 r505)))) (if (memv t549 (quote (global))) (let ((x550 (list (quote define) n548 (chi103 e517 r505 w518)))) (begin (if (eq? m507 (quote c&e)) (top-level-eval-hook43 x550)) x550)) (if (memv t549 (quote (displaced-lexical))) (syntax-error (wrap95 value516 w518) (quote "identifier out of context")) (syntax-error (wrap95 value516 w518) (quote "cannot define keyword at top level")))))) (let ((x551 (chi-expr104 type515 value516 e517 r505 w518 s519))) (begin (if (eq? m507 (quote c&e)) (top-level-eval-hook43 x551)) x551)))))))))))) (syntax-type101 (lambda (e552 r553 w554 s555 rib556) (cond ((symbol? e552) (let ((n557 (id-var-name89 e552 w554))) (let ((b558 (lookup64 n557 r553))) (let ((type559 (binding-type59 b558))) (let ((t560 type559)) (if (memv t560 (quote (lexical))) (values type559 (binding-value60 b558) e552 w554 s555) (if (memv t560 (quote (global))) (values type559 n557 e552 w554 s555) (if (memv t560 (quote (macro))) (syntax-type101 (chi-macro106 (binding-value60 b558) e552 r553 w554 rib556) r553 (quote (())) s555 rib556) (values type559 (binding-value60 b558) e552 w554 s555))))))))) ((pair? e552) (let ((first561 (car e552))) (if (id?67 first561) (let ((n562 (id-var-name89 first561 w554))) (let ((b563 (lookup64 n562 r553))) (let ((type564 (binding-type59 b563))) (let ((t565 type564)) (if (memv t565 (quote (lexical))) (values (quote lexical-call) (binding-value60 b563) e552 w554 s555) (if (memv t565 (quote (global))) (values (quote global-call) n562 e552 w554 s555) (if (memv t565 (quote (macro))) (syntax-type101 (chi-macro106 (binding-value60 b563) e552 r553 w554 rib556) r553 (quote (())) s555 rib556) (if (memv t565 (quote (core))) (values type564 (binding-value60 b563) e552 w554 s555) (if (memv t565 (quote (local-syntax))) (values (quote local-syntax-form) (binding-value60 b563) e552 w554 s555) (if (memv t565 (quote (begin))) (values (quote begin-form) (quote #f) e552 w554 s555) (if (memv t565 (quote (eval-when))) (values (quote eval-when-form) (quote #f) e552 w554 s555) (if (memv t565 (quote (define))) ((lambda (tmp566) ((lambda (tmp567) (if (if tmp567 (apply (lambda (_568 name569 val570) (id?67 name569)) tmp567) (quote #f)) (apply (lambda (_571 name572 val573) (values (quote define-form) name572 val573 w554 s555)) tmp567) ((lambda (tmp574) (if (if tmp574 (apply (lambda (_575 name576 args577 e1578 e2579) (and (id?67 name576) (valid-bound-ids?92 (lambda-var-list116 args577)))) tmp574) (quote #f)) (apply (lambda (_580 name581 args582 e1583 e2584) (values (quote define-form) (wrap95 name581 w554) (cons (quote #(syntax-object lambda ((top) #(ribcage #(_ name args e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(type) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(first) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(e r w s rib) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))))) (wrap95 (cons args582 (cons e1583 e2584)) w554)) (quote (())) s555)) tmp574) ((lambda (tmp586) (if (if tmp586 (apply (lambda (_587 name588) (id?67 name588)) tmp586) (quote #f)) (apply (lambda (_589 name590) (values (quote define-form) (wrap95 name590 w554) (quote (#(syntax-object void ((top) #(ribcage #(_ name) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(t) #(("m" top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(type) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(b) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(n) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(first) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(e r w s rib) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i")))))) (quote (())) s555)) tmp586) (syntax-error tmp566))) (syntax-dispatch tmp566 (quote (any any)))))) (syntax-dispatch tmp566 (quote (any (any . any) any . each-any)))))) (syntax-dispatch tmp566 (quote (any any any))))) e552) (if (memv t565 (quote (define-syntax))) ((lambda (tmp591) ((lambda (tmp592) (if (if tmp592 (apply (lambda (_593 name594 val595) (id?67 name594)) tmp592) (quote #f)) (apply (lambda (_596 name597 val598) (values (quote define-syntax-form) name597 val598 w554 s555)) tmp592) (syntax-error tmp591))) (syntax-dispatch tmp591 (quote (any any any))))) e552) (values (quote call) (quote #f) e552 w554 s555)))))))))))))) (values (quote call) (quote #f) e552 w554 s555)))) ((syntax-object?53 e552) (syntax-type101 (syntax-object-expression54 e552) r553 (join-wraps86 w554 (syntax-object-wrap55 e552)) (quote #f) rib556)) ((annotation?42 e552) (syntax-type101 (annotation-expression e552) r553 w554 (annotation-source e552) rib556)) ((let ((x599 e552)) (or (boolean? x599) (number? x599) (string? x599) (char? x599) (null? x599) (keyword? x599))) (values (quote constant) (quote #f) e552 w554 s555)) (else (values (quote other) (quote #f) e552 w554 s555))))) (chi-when-list100 (lambda (e600 when-list601 w602) (let f603 ((when-list604 when-list601) (situations605 (quote ()))) (if (null? when-list604) situations605 (f603 (cdr when-list604) (cons (let ((x606 (car when-list604))) (cond ((free-id=?90 x606 (quote #(syntax-object compile ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f when-list situations) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i")))))) (quote compile)) ((free-id=?90 x606 (quote #(syntax-object load ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f when-list situations) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i")))))) (quote load)) ((free-id=?90 x606 (quote #(syntax-object eval ((top) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f when-list situations) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(e when-list w) #((top) (top) (top)) #("i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i")))))) (quote eval)) (else (syntax-error (wrap95 x606 w602) (quote "invalid eval-when situation"))))) situations605)))))) (chi-install-global99 (lambda (name607 e608) (list (quote install-global-transformer) (list (quote quote) name607) e608))) (chi-top-sequence98 (lambda (body609 r610 w611 s612 m613 esew614) (build-sequence48 s612 (let dobody615 ((body616 body609) (r617 r610) (w618 w611) (m619 m613) (esew620 esew614)) (if (null? body616) (quote ()) (let ((first621 (chi-top102 (car body616) r617 w618 m619 esew620))) (cons first621 (dobody615 (cdr body616) r617 w618 m619 esew620)))))))) (chi-sequence97 (lambda (body622 r623 w624 s625) (build-sequence48 s625 (let dobody626 ((body627 body622) (r628 r623) (w629 w624)) (if (null? body627) (quote ()) (let ((first630 (chi103 (car body627) r628 w629))) (cons first630 (dobody626 (cdr body627) r628 w629)))))))) (source-wrap96 (lambda (x631 w632 s633) (wrap95 (if s633 (make-annotation x631 s633 (quote #f)) x631) w632))) (wrap95 (lambda (x634 w635) (cond ((and (null? (wrap-marks70 w635)) (null? (wrap-subst71 w635))) x634) ((syntax-object?53 x634) (make-syntax-object52 (syntax-object-expression54 x634) (join-wraps86 w635 (syntax-object-wrap55 x634)))) ((null? x634) x634) (else (make-syntax-object52 x634 w635))))) (bound-id-member?94 (lambda (x636 list637) (and (not (null? list637)) (or (bound-id=?91 x636 (car list637)) (bound-id-member?94 x636 (cdr list637)))))) (distinct-bound-ids?93 (lambda (ids638) (let distinct?639 ((ids640 ids638)) (or (null? ids640) (and (not (bound-id-member?94 (car ids640) (cdr ids640))) (distinct?639 (cdr ids640))))))) (valid-bound-ids?92 (lambda (ids641) (and (let all-ids?642 ((ids643 ids641)) (or (null? ids643) (and (id?67 (car ids643)) (all-ids?642 (cdr ids643))))) (distinct-bound-ids?93 ids641)))) (bound-id=?91 (lambda (i644 j645) (if (and (syntax-object?53 i644) (syntax-object?53 j645)) (and (eq? (let ((e646 (syntax-object-expression54 i644))) (if (annotation?42 e646) (annotation-expression e646) e646)) (let ((e647 (syntax-object-expression54 j645))) (if (annotation?42 e647) (annotation-expression e647) e647))) (same-marks?88 (wrap-marks70 (syntax-object-wrap55 i644)) (wrap-marks70 (syntax-object-wrap55 j645)))) (eq? (let ((e648 i644)) (if (annotation?42 e648) (annotation-expression e648) e648)) (let ((e649 j645)) (if (annotation?42 e649) (annotation-expression e649) e649)))))) (free-id=?90 (lambda (i650 j651) (and (eq? (let ((x652 i650)) (let ((e653 (if (syntax-object?53 x652) (syntax-object-expression54 x652) x652))) (if (annotation?42 e653) (annotation-expression e653) e653))) (let ((x654 j651)) (let ((e655 (if (syntax-object?53 x654) (syntax-object-expression54 x654) x654))) (if (annotation?42 e655) (annotation-expression e655) e655)))) (eq? (id-var-name89 i650 (quote (()))) (id-var-name89 j651 (quote (()))))))) (id-var-name89 (lambda (id656 w657) (letrec ((search-vector-rib660 (lambda (sym666 subst667 marks668 symnames669 ribcage670) (let ((n671 (vector-length symnames669))) (let f672 ((i673 (quote 0))) (cond ((fx=40 i673 n671) (search658 sym666 (cdr subst667) marks668)) ((and (eq? (vector-ref symnames669 i673) sym666) (same-marks?88 marks668 (vector-ref (ribcage-marks77 ribcage670) i673))) (values (vector-ref (ribcage-labels78 ribcage670) i673) marks668)) (else (f672 (fx+38 i673 (quote 1))))))))) (search-list-rib659 (lambda (sym674 subst675 marks676 symnames677 ribcage678) (let f679 ((symnames680 symnames677) (i681 (quote 0))) (cond ((null? symnames680) (search658 sym674 (cdr subst675) marks676)) ((and (eq? (car symnames680) sym674) (same-marks?88 marks676 (list-ref (ribcage-marks77 ribcage678) i681))) (values (list-ref (ribcage-labels78 ribcage678) i681) marks676)) (else (f679 (cdr symnames680) (fx+38 i681 (quote 1)))))))) (search658 (lambda (sym682 subst683 marks684) (if (null? subst683) (values (quote #f) marks684) (let ((fst685 (car subst683))) (if (eq? fst685 (quote shift)) (search658 sym682 (cdr subst683) (cdr marks684)) (let ((symnames686 (ribcage-symnames76 fst685))) (if (vector? symnames686) (search-vector-rib660 sym682 subst683 marks684 symnames686 fst685) (search-list-rib659 sym682 subst683 marks684 symnames686 fst685))))))))) (cond ((symbol? id656) (or (call-with-values (lambda () (search658 id656 (wrap-subst71 w657) (wrap-marks70 w657))) (lambda (x688 . ignore687) x688)) id656)) ((syntax-object?53 id656) (let ((id689 (let ((e691 (syntax-object-expression54 id656))) (if (annotation?42 e691) (annotation-expression e691) e691))) (w1690 (syntax-object-wrap55 id656))) (let ((marks692 (join-marks87 (wrap-marks70 w657) (wrap-marks70 w1690)))) (call-with-values (lambda () (search658 id689 (wrap-subst71 w657) marks692)) (lambda (new-id693 marks694) (or new-id693 (call-with-values (lambda () (search658 id689 (wrap-subst71 w1690) marks694)) (lambda (x696 . ignore695) x696)) id689)))))) ((annotation?42 id656) (let ((id697 (let ((e698 id656)) (if (annotation?42 e698) (annotation-expression e698) e698)))) (or (call-with-values (lambda () (search658 id697 (wrap-subst71 w657) (wrap-marks70 w657))) (lambda (x700 . ignore699) x700)) id697))) (else (error-hook45 (quote id-var-name) (quote "invalid id") id656)))))) (same-marks?88 (lambda (x701 y702) (or (eq? x701 y702) (and (not (null? x701)) (not (null? y702)) (eq? (car x701) (car y702)) (same-marks?88 (cdr x701) (cdr y702)))))) (join-marks87 (lambda (m1703 m2704) (smart-append85 m1703 m2704))) (join-wraps86 (lambda (w1705 w2706) (let ((m1707 (wrap-marks70 w1705)) (s1708 (wrap-subst71 w1705))) (if (null? m1707) (if (null? s1708) w2706 (make-wrap69 (wrap-marks70 w2706) (smart-append85 s1708 (wrap-subst71 w2706)))) (make-wrap69 (smart-append85 m1707 (wrap-marks70 w2706)) (smart-append85 s1708 (wrap-subst71 w2706))))))) (smart-append85 (lambda (m1709 m2710) (if (null? m2710) m1709 (append m1709 m2710)))) (make-binding-wrap84 (lambda (ids711 labels712 w713) (if (null? ids711) w713 (make-wrap69 (wrap-marks70 w713) (cons (let ((labelvec714 (list->vector labels712))) (let ((n715 (vector-length labelvec714))) (let ((symnamevec716 (make-vector n715)) (marksvec717 (make-vector n715))) (begin (let f718 ((ids719 ids711) (i720 (quote 0))) (if (not (null? ids719)) (call-with-values (lambda () (id-sym-name&marks68 (car ids719) w713)) (lambda (symname721 marks722) (begin (vector-set! symnamevec716 i720 symname721) (vector-set! marksvec717 i720 marks722) (f718 (cdr ids719) (fx+38 i720 (quote 1)))))))) (make-ribcage74 symnamevec716 marksvec717 labelvec714))))) (wrap-subst71 w713)))))) (extend-ribcage!83 (lambda (ribcage723 id724 label725) (begin (set-ribcage-symnames!79 ribcage723 (cons (let ((e726 (syntax-object-expression54 id724))) (if (annotation?42 e726) (annotation-expression e726) e726)) (ribcage-symnames76 ribcage723))) (set-ribcage-marks!80 ribcage723 (cons (wrap-marks70 (syntax-object-wrap55 id724)) (ribcage-marks77 ribcage723))) (set-ribcage-labels!81 ribcage723 (cons label725 (ribcage-labels78 ribcage723)))))) (anti-mark82 (lambda (w727) (make-wrap69 (cons (quote #f) (wrap-marks70 w727)) (cons (quote shift) (wrap-subst71 w727))))) (set-ribcage-labels!81 (lambda (x728 update729) (vector-set! x728 (quote 3) update729))) (set-ribcage-marks!80 (lambda (x730 update731) (vector-set! x730 (quote 2) update731))) (set-ribcage-symnames!79 (lambda (x732 update733) (vector-set! x732 (quote 1) update733))) (ribcage-labels78 (lambda (x734) (vector-ref x734 (quote 3)))) (ribcage-marks77 (lambda (x735) (vector-ref x735 (quote 2)))) (ribcage-symnames76 (lambda (x736) (vector-ref x736 (quote 1)))) (ribcage?75 (lambda (x737) (and (vector? x737) (= (vector-length x737) (quote 4)) (eq? (vector-ref x737 (quote 0)) (quote ribcage))))) (make-ribcage74 (lambda (symnames738 marks739 labels740) (vector (quote ribcage) symnames738 marks739 labels740))) (gen-labels73 (lambda (ls741) (if (null? ls741) (quote ()) (cons (gen-label72) (gen-labels73 (cdr ls741)))))) (gen-label72 (lambda () (string (quote #\i)))) (wrap-subst71 cdr) (wrap-marks70 car) (make-wrap69 cons) (id-sym-name&marks68 (lambda (x742 w743) (if (syntax-object?53 x742) (values (let ((e744 (syntax-object-expression54 x742))) (if (annotation?42 e744) (annotation-expression e744) e744)) (join-marks87 (wrap-marks70 w743) (wrap-marks70 (syntax-object-wrap55 x742)))) (values (let ((e745 x742)) (if (annotation?42 e745) (annotation-expression e745) e745)) (wrap-marks70 w743))))) (id?67 (lambda (x746) (cond ((symbol? x746) (quote #t)) ((syntax-object?53 x746) (symbol? (let ((e747 (syntax-object-expression54 x746))) (if (annotation?42 e747) (annotation-expression e747) e747)))) ((annotation?42 x746) (symbol? (annotation-expression x746))) (else (quote #f))))) (nonsymbol-id?66 (lambda (x748) (and (syntax-object?53 x748) (symbol? (let ((e749 (syntax-object-expression54 x748))) (if (annotation?42 e749) (annotation-expression e749) e749)))))) (global-extend65 (lambda (type750 sym751 val752) (put-global-definition-hook46 sym751 (cons type750 val752)))) (lookup64 (lambda (x753 r754) (cond ((assq x753 r754) => cdr) ((symbol? x753) (or (get-global-definition-hook47 x753) (quote (global)))) (else (quote (displaced-lexical)))))) (macros-only-env63 (lambda (r755) (if (null? r755) (quote ()) (let ((a756 (car r755))) (if (eq? (cadr a756) (quote macro)) (cons a756 (macros-only-env63 (cdr r755))) (macros-only-env63 (cdr r755))))))) (extend-var-env62 (lambda (labels757 vars758 r759) (if (null? labels757) r759 (extend-var-env62 (cdr labels757) (cdr vars758) (cons (cons (car labels757) (cons (quote lexical) (car vars758))) r759))))) (extend-env61 (lambda (labels760 bindings761 r762) (if (null? labels760) r762 (extend-env61 (cdr labels760) (cdr bindings761) (cons (cons (car labels760) (car bindings761)) r762))))) (binding-value60 cdr) (binding-type59 car) (source-annotation58 (lambda (x763) (cond ((annotation?42 x763) (annotation-source x763)) ((syntax-object?53 x763) (source-annotation58 (syntax-object-expression54 x763))) (else (quote #f))))) (set-syntax-object-wrap!57 (lambda (x764 update765) (vector-set! x764 (quote 2) update765))) (set-syntax-object-expression!56 (lambda (x766 update767) (vector-set! x766 (quote 1) update767))) (syntax-object-wrap55 (lambda (x768) (vector-ref x768 (quote 2)))) (syntax-object-expression54 (lambda (x769) (vector-ref x769 (quote 1)))) (syntax-object?53 (lambda (x770) (and (vector? x770) (= (vector-length x770) (quote 3)) (eq? (vector-ref x770 (quote 0)) (quote syntax-object))))) (make-syntax-object52 (lambda (expression771 wrap772) (vector (quote syntax-object) expression771 wrap772))) (build-letrec51 (lambda (src773 vars774 val-exps775 body-exp776) (if (null? vars774) body-exp776 (list (quote letrec) (map list vars774 val-exps775) body-exp776)))) (build-named-let50 (lambda (src777 vars778 val-exps779 body-exp780) (if (null? vars778) body-exp780 (list (quote let) (car vars778) (map list (cdr vars778) val-exps779) body-exp780)))) (build-let49 (lambda (src781 vars782 val-exps783 body-exp784) (if (null? vars782) body-exp784 (list (quote let) (map list vars782 val-exps783) body-exp784)))) (build-sequence48 (lambda (src785 exps786) (if (null? (cdr exps786)) (car exps786) (cons (quote begin) exps786)))) (get-global-definition-hook47 (lambda (symbol787) (getprop symbol787 (quote *sc-expander*)))) (put-global-definition-hook46 (lambda (symbol788 binding789) (putprop symbol788 (quote *sc-expander*) binding789))) (error-hook45 (lambda (who790 why791 what792) (error who790 (quote "~a ~s") why791 what792))) (local-eval-hook44 (lambda (x793) (eval (list noexpand37 x793) (interaction-environment)))) (top-level-eval-hook43 (lambda (x794) (eval (list noexpand37 x794) (interaction-environment)))) (annotation?42 (lambda (x795) (quote #f))) (fx<41 <) (fx=40 =) (fx-39 -) (fx+38 +) (noexpand37 (quote "noexpand"))) (begin (global-extend65 (quote local-syntax) (quote letrec-syntax) (quote #t)) (global-extend65 (quote local-syntax) (quote let-syntax) (quote #f)) (global-extend65 (quote core) (quote fluid-let-syntax) (lambda (e796 r797 w798 s799) ((lambda (tmp800) ((lambda (tmp801) (if (if tmp801 (apply (lambda (_802 var803 val804 e1805 e2806) (valid-bound-ids?92 var803)) tmp801) (quote #f)) (apply (lambda (_808 var809 val810 e1811 e2812) (let ((names813 (map (lambda (x814) (id-var-name89 x814 w798)) var809))) (begin (for-each (lambda (id816 n817) (let ((t818 (binding-type59 (lookup64 n817 r797)))) (if (memv t818 (quote (displaced-lexical))) (syntax-error (source-wrap96 id816 w798 s799) (quote "identifier out of context"))))) var809 names813) (chi-body107 (cons e1811 e2812) (source-wrap96 e796 w798 s799) (extend-env61 names813 (let ((trans-r821 (macros-only-env63 r797))) (map (lambda (x822) (cons (quote macro) (eval-local-transformer110 (chi103 x822 trans-r821 w798)))) val810)) r797) w798)))) tmp801) ((lambda (_824) (syntax-error (source-wrap96 e796 w798 s799))) tmp800))) (syntax-dispatch tmp800 (quote (any #(each (any any)) any . each-any))))) e796))) (global-extend65 (quote core) (quote quote) (lambda (e825 r826 w827 s828) ((lambda (tmp829) ((lambda (tmp830) (if tmp830 (apply (lambda (_831 e832) (list (quote quote) (strip114 e832 w827))) tmp830) ((lambda (_833) (syntax-error (source-wrap96 e825 w827 s828))) tmp829))) (syntax-dispatch tmp829 (quote (any any))))) e825))) (global-extend65 (quote core) (quote syntax) (letrec ((regen841 (lambda (x842) (let ((t843 (car x842))) (if (memv t843 (quote (ref))) (cadr x842) (if (memv t843 (quote (primitive))) (cadr x842) (if (memv t843 (quote (quote))) (list (quote quote) (cadr x842)) (if (memv t843 (quote (lambda))) (list (quote lambda) (cadr x842) (regen841 (caddr x842))) (if (memv t843 (quote (map))) (let ((ls844 (map regen841 (cdr x842)))) (cons (if (fx=40 (length ls844) (quote 2)) (quote map) (quote map)) ls844)) (cons (car x842) (map regen841 (cdr x842))))))))))) (gen-vector840 (lambda (x845) (cond ((eq? (car x845) (quote list)) (cons (quote vector) (cdr x845))) ((eq? (car x845) (quote quote)) (list (quote quote) (list->vector (cadr x845)))) (else (list (quote list->vector) x845))))) (gen-append839 (lambda (x846 y847) (if (equal? y847 (quote (quote ()))) x846 (list (quote append) x846 y847)))) (gen-cons838 (lambda (x848 y849) (let ((t850 (car y849))) (if (memv t850 (quote (quote))) (if (eq? (car x848) (quote quote)) (list (quote quote) (cons (cadr x848) (cadr y849))) (if (eq? (cadr y849) (quote ())) (list (quote list) x848) (list (quote cons) x848 y849))) (if (memv t850 (quote (list))) (cons (quote list) (cons x848 (cdr y849))) (list (quote cons) x848 y849)))))) (gen-map837 (lambda (e851 map-env852) (let ((formals853 (map cdr map-env852)) (actuals854 (map (lambda (x855) (list (quote ref) (car x855))) map-env852))) (cond ((eq? (car e851) (quote ref)) (car actuals854)) ((andmap (lambda (x856) (and (eq? (car x856) (quote ref)) (memq (cadr x856) formals853))) (cdr e851)) (cons (quote map) (cons (list (quote primitive) (car e851)) (map (let ((r857 (map cons formals853 actuals854))) (lambda (x858) (cdr (assq (cadr x858) r857)))) (cdr e851))))) (else (cons (quote map) (cons (list (quote lambda) formals853 e851) actuals854))))))) (gen-mappend836 (lambda (e859 map-env860) (list (quote apply) (quote (primitive append)) (gen-map837 e859 map-env860)))) (gen-ref835 (lambda (src861 var862 level863 maps864) (if (fx=40 level863 (quote 0)) (values var862 maps864) (if (null? maps864) (syntax-error src861 (quote "missing ellipsis in syntax form")) (call-with-values (lambda () (gen-ref835 src861 var862 (fx-39 level863 (quote 1)) (cdr maps864))) (lambda (outer-var865 outer-maps866) (let ((b867 (assq outer-var865 (car maps864)))) (if b867 (values (cdr b867) maps864) (let ((inner-var868 (gen-var115 (quote tmp)))) (values inner-var868 (cons (cons (cons outer-var865 inner-var868) (car maps864)) outer-maps866))))))))))) (gen-syntax834 (lambda (src869 e870 r871 maps872 ellipsis?873) (if (id?67 e870) (let ((label874 (id-var-name89 e870 (quote (()))))) (let ((b875 (lookup64 label874 r871))) (if (eq? (binding-type59 b875) (quote syntax)) (call-with-values (lambda () (let ((var.lev876 (binding-value60 b875))) (gen-ref835 src869 (car var.lev876) (cdr var.lev876) maps872))) (lambda (var877 maps878) (values (list (quote ref) var877) maps878))) (if (ellipsis?873 e870) (syntax-error src869 (quote "misplaced ellipsis in syntax form")) (values (list (quote quote) e870) maps872))))) ((lambda (tmp879) ((lambda (tmp880) (if (if tmp880 (apply (lambda (dots881 e882) (ellipsis?873 dots881)) tmp880) (quote #f)) (apply (lambda (dots883 e884) (gen-syntax834 src869 e884 r871 maps872 (lambda (x885) (quote #f)))) tmp880) ((lambda (tmp886) (if (if tmp886 (apply (lambda (x887 dots888 y889) (ellipsis?873 dots888)) tmp886) (quote #f)) (apply (lambda (x890 dots891 y892) (let f893 ((y894 y892) (k895 (lambda (maps896) (call-with-values (lambda () (gen-syntax834 src869 x890 r871 (cons (quote ()) maps896) ellipsis?873)) (lambda (x897 maps898) (if (null? (car maps898)) (syntax-error src869 (quote "extra ellipsis in syntax form")) (values (gen-map837 x897 (car maps898)) (cdr maps898)))))))) ((lambda (tmp899) ((lambda (tmp900) (if (if tmp900 (apply (lambda (dots901 y902) (ellipsis?873 dots901)) tmp900) (quote #f)) (apply (lambda (dots903 y904) (f893 y904 (lambda (maps905) (call-with-values (lambda () (k895 (cons (quote ()) maps905))) (lambda (x906 maps907) (if (null? (car maps907)) (syntax-error src869 (quote "extra ellipsis in syntax form")) (values (gen-mappend836 x906 (car maps907)) (cdr maps907)))))))) tmp900) ((lambda (_908) (call-with-values (lambda () (gen-syntax834 src869 y894 r871 maps872 ellipsis?873)) (lambda (y909 maps910) (call-with-values (lambda () (k895 maps910)) (lambda (x911 maps912) (values (gen-append839 x911 y909) maps912)))))) tmp899))) (syntax-dispatch tmp899 (quote (any . any))))) y894))) tmp886) ((lambda (tmp913) (if tmp913 (apply (lambda (x914 y915) (call-with-values (lambda () (gen-syntax834 src869 x914 r871 maps872 ellipsis?873)) (lambda (x916 maps917) (call-with-values (lambda () (gen-syntax834 src869 y915 r871 maps917 ellipsis?873)) (lambda (y918 maps919) (values (gen-cons838 x916 y918) maps919)))))) tmp913) ((lambda (tmp920) (if tmp920 (apply (lambda (e1921 e2922) (call-with-values (lambda () (gen-syntax834 src869 (cons e1921 e2922) r871 maps872 ellipsis?873)) (lambda (e924 maps925) (values (gen-vector840 e924) maps925)))) tmp920) ((lambda (_926) (values (list (quote quote) e870) maps872)) tmp879))) (syntax-dispatch tmp879 (quote #(vector (any . each-any))))))) (syntax-dispatch tmp879 (quote (any . any)))))) (syntax-dispatch tmp879 (quote (any any . any)))))) (syntax-dispatch tmp879 (quote (any any))))) e870))))) (lambda (e927 r928 w929 s930) (let ((e931 (source-wrap96 e927 w929 s930))) ((lambda (tmp932) ((lambda (tmp933) (if tmp933 (apply (lambda (_934 x935) (call-with-values (lambda () (gen-syntax834 e931 x935 r928 (quote ()) ellipsis?112)) (lambda (e936 maps937) (regen841 e936)))) tmp933) ((lambda (_938) (syntax-error e931)) tmp932))) (syntax-dispatch tmp932 (quote (any any))))) e931))))) (global-extend65 (quote core) (quote lambda) (lambda (e939 r940 w941 s942) ((lambda (tmp943) ((lambda (tmp944) (if tmp944 (apply (lambda (_945 c946) (chi-lambda-clause108 (source-wrap96 e939 w941 s942) c946 r940 w941 (lambda (vars947 body948) (list (quote lambda) vars947 body948)))) tmp944) (syntax-error tmp943))) (syntax-dispatch tmp943 (quote (any . any))))) e939))) (global-extend65 (quote core) (quote let) (letrec ((chi-let949 (lambda (e950 r951 w952 s953 constructor954 ids955 vals956 exps957) (if (not (valid-bound-ids?92 ids955)) (syntax-error e950 (quote "duplicate bound variable in")) (let ((labels958 (gen-labels73 ids955)) (new-vars959 (map gen-var115 ids955))) (let ((nw960 (make-binding-wrap84 ids955 labels958 w952)) (nr961 (extend-var-env62 labels958 new-vars959 r951))) (constructor954 s953 new-vars959 (map (lambda (x962) (chi103 x962 r951 w952)) vals956) (chi-body107 exps957 (source-wrap96 e950 nw960 s953) nr961 nw960)))))))) (lambda (e963 r964 w965 s966) ((lambda (tmp967) ((lambda (tmp968) (if tmp968 (apply (lambda (_969 id970 val971 e1972 e2973) (chi-let949 e963 r964 w965 s966 build-let49 id970 val971 (cons e1972 e2973))) tmp968) ((lambda (tmp977) (if (if tmp977 (apply (lambda (_978 f979 id980 val981 e1982 e2983) (id?67 f979)) tmp977) (quote #f)) (apply (lambda (_984 f985 id986 val987 e1988 e2989) (chi-let949 e963 r964 w965 s966 build-named-let50 (cons f985 id986) val987 (cons e1988 e2989))) tmp977) ((lambda (_993) (syntax-error (source-wrap96 e963 w965 s966))) tmp967))) (syntax-dispatch tmp967 (quote (any any #(each (any any)) any . each-any)))))) (syntax-dispatch tmp967 (quote (any #(each (any any)) any . each-any))))) e963)))) (global-extend65 (quote core) (quote letrec) (lambda (e994 r995 w996 s997) ((lambda (tmp998) ((lambda (tmp999) (if tmp999 (apply (lambda (_1000 id1001 val1002 e11003 e21004) (let ((ids1005 id1001)) (if (not (valid-bound-ids?92 ids1005)) (syntax-error e994 (quote "duplicate bound variable in")) (let ((labels1007 (gen-labels73 ids1005)) (new-vars1008 (map gen-var115 ids1005))) (let ((w1009 (make-binding-wrap84 ids1005 labels1007 w996)) (r1010 (extend-var-env62 labels1007 new-vars1008 r995))) (build-letrec51 s997 new-vars1008 (map (lambda (x1011) (chi103 x1011 r1010 w1009)) val1002) (chi-body107 (cons e11003 e21004) (source-wrap96 e994 w1009 s997) r1010 w1009))))))) tmp999) ((lambda (_1014) (syntax-error (source-wrap96 e994 w996 s997))) tmp998))) (syntax-dispatch tmp998 (quote (any #(each (any any)) any . each-any))))) e994))) (global-extend65 (quote core) (quote set!) (lambda (e1015 r1016 w1017 s1018) ((lambda (tmp1019) ((lambda (tmp1020) (if (if tmp1020 (apply (lambda (_1021 id1022 val1023) (id?67 id1022)) tmp1020) (quote #f)) (apply (lambda (_1024 id1025 val1026) (let ((val1027 (chi103 val1026 r1016 w1017)) (n1028 (id-var-name89 id1025 w1017))) (let ((b1029 (lookup64 n1028 r1016))) (let ((t1030 (binding-type59 b1029))) (if (memv t1030 (quote (lexical))) (list (quote set!) (binding-value60 b1029) val1027) (if (memv t1030 (quote (global))) (list (quote set!) n1028 val1027) (if (memv t1030 (quote (displaced-lexical))) (syntax-error (wrap95 id1025 w1017) (quote "identifier out of context")) (syntax-error (source-wrap96 e1015 w1017 s1018))))))))) tmp1020) ((lambda (tmp1031) (if tmp1031 (apply (lambda (_1032 getter1033 arg1034 val1035) (cons (chi103 (list (quote #(syntax-object setter ((top) #(ribcage #(_ getter arg val) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(e r w s) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))))) getter1033) r1016 w1017) (map (lambda (e1036) (chi103 e1036 r1016 w1017)) (append arg1034 (list val1035))))) tmp1031) ((lambda (_1038) (syntax-error (source-wrap96 e1015 w1017 s1018))) tmp1019))) (syntax-dispatch tmp1019 (quote (any (any . each-any) any)))))) (syntax-dispatch tmp1019 (quote (any any any))))) e1015))) (global-extend65 (quote begin) (quote begin) (quote ())) (global-extend65 (quote define) (quote define) (quote ())) (global-extend65 (quote define-syntax) (quote define-syntax) (quote ())) (global-extend65 (quote eval-when) (quote eval-when) (quote ())) (global-extend65 (quote core) (quote syntax-case) (letrec ((gen-syntax-case1042 (lambda (x1043 keys1044 clauses1045 r1046) (if (null? clauses1045) (list (quote syntax-error) x1043) ((lambda (tmp1047) ((lambda (tmp1048) (if tmp1048 (apply (lambda (pat1049 exp1050) (if (and (id?67 pat1049) (andmap (lambda (x1051) (not (free-id=?90 pat1049 x1051))) (cons (quote #(syntax-object ... ((top) #(ribcage #(pat exp) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x keys clauses r) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage (gen-syntax-case gen-clause build-dispatch-call convert-pattern) ((top) (top) (top) (top)) ("i" "i" "i" "i")) #(ribcage (lambda-var-list gen-var strip strip-annotation ellipsis? chi-void eval-local-transformer chi-local-syntax chi-lambda-clause chi-body chi-macro chi-application chi-expr chi chi-top syntax-type chi-when-list chi-install-global chi-top-sequence chi-sequence source-wrap wrap bound-id-member? distinct-bound-ids? valid-bound-ids? bound-id=? free-id=? id-var-name same-marks? join-marks join-wraps smart-append make-binding-wrap extend-ribcage! make-empty-ribcage new-mark anti-mark the-anti-mark top-marked? top-wrap empty-wrap set-ribcage-labels! set-ribcage-marks! set-ribcage-symnames! ribcage-labels ribcage-marks ribcage-symnames ribcage? make-ribcage gen-labels gen-label make-rename rename-marks rename-new rename-old subst-rename? wrap-subst wrap-marks make-wrap id-sym-name&marks id-sym-name id? nonsymbol-id? global-extend lookup macros-only-env extend-var-env extend-env null-env binding-value binding-type make-binding arg-check source-annotation no-source unannotate set-syntax-object-wrap! set-syntax-object-expression! syntax-object-wrap syntax-object-expression syntax-object? make-syntax-object self-evaluating? build-lexical-var build-letrec build-named-let build-let build-sequence build-data build-primref build-lambda build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application get-global-definition-hook put-global-definition-hook gensym-hook error-hook local-eval-hook top-level-eval-hook annotation? fx< fx= fx- fx+ noexpand) ((top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top) (top)) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) #(ribcage (define-structure) ((top)) ("i"))))) keys1044))) (let ((labels1052 (list (gen-label72))) (var1053 (gen-var115 pat1049))) (list (list (quote lambda) (list var1053) (chi103 exp1050 (extend-env61 labels1052 (list (cons (quote syntax) (cons var1053 (quote 0)))) r1046) (make-binding-wrap84 (list pat1049) labels1052 (quote (()))))) x1043)) (gen-clause1041 x1043 keys1044 (cdr clauses1045) r1046 pat1049 (quote #t) exp1050))) tmp1048) ((lambda (tmp1054) (if tmp1054 (apply (lambda (pat1055 fender1056 exp1057) (gen-clause1041 x1043 keys1044 (cdr clauses1045) r1046 pat1055 fender1056 exp1057)) tmp1054) ((lambda (_1058) (syntax-error (car clauses1045) (quote "invalid syntax-case clause"))) tmp1047))) (syntax-dispatch tmp1047 (quote (any any any)))))) (syntax-dispatch tmp1047 (quote (any any))))) (car clauses1045))))) (gen-clause1041 (lambda (x1059 keys1060 clauses1061 r1062 pat1063 fender1064 exp1065) (call-with-values (lambda () (convert-pattern1039 pat1063 keys1060)) (lambda (p1066 pvars1067) (cond ((not (distinct-bound-ids?93 (map car pvars1067))) (syntax-error pat1063 (quote "duplicate pattern variable in syntax-case pattern"))) ((not (andmap (lambda (x1068) (not (ellipsis?112 (car x1068)))) pvars1067)) (syntax-error pat1063 (quote "misplaced ellipsis in syntax-case pattern"))) (else (let ((y1069 (gen-var115 (quote tmp)))) (list (list (quote lambda) (list y1069) (let ((y1070 y1069)) (list (quote if) ((lambda (tmp1071) ((lambda (tmp1072) (if tmp1072 (apply (lambda () y1070) tmp1072) ((lambda (_1073) (list (quote if) y1070 (build-dispatch-call1040 pvars1067 fender1064 y1070 r1062) (list (quote quote) (quote #f)))) tmp1071))) (syntax-dispatch tmp1071 (quote #(atom #t))))) fender1064) (build-dispatch-call1040 pvars1067 exp1065 y1070 r1062) (gen-syntax-case1042 x1059 keys1060 clauses1061 r1062)))) (if (eq? p1066 (quote any)) (list (quote list) x1059) (list (quote syntax-dispatch) x1059 (list (quote quote) p1066))))))))))) (build-dispatch-call1040 (lambda (pvars1074 exp1075 y1076 r1077) (let ((ids1078 (map car pvars1074)) (levels1079 (map cdr pvars1074))) (let ((labels1080 (gen-labels73 ids1078)) (new-vars1081 (map gen-var115 ids1078))) (list (quote apply) (list (quote lambda) new-vars1081 (chi103 exp1075 (extend-env61 labels1080 (map (lambda (var1082 level1083) (cons (quote syntax) (cons var1082 level1083))) new-vars1081 (map cdr pvars1074)) r1077) (make-binding-wrap84 ids1078 labels1080 (quote (()))))) y1076))))) (convert-pattern1039 (lambda (pattern1084 keys1085) (let cvt1086 ((p1087 pattern1084) (n1088 (quote 0)) (ids1089 (quote ()))) (if (id?67 p1087) (if (bound-id-member?94 p1087 keys1085) (values (vector (quote free-id) p1087) ids1089) (values (quote any) (cons (cons p1087 n1088) ids1089))) ((lambda (tmp1090) ((lambda (tmp1091) (if (if tmp1091 (apply (lambda (x1092 dots1093) (ellipsis?112 dots1093)) tmp1091) (quote #f)) (apply (lambda (x1094 dots1095) (call-with-values (lambda () (cvt1086 x1094 (fx+38 n1088 (quote 1)) ids1089)) (lambda (p1096 ids1097) (values (if (eq? p1096 (quote any)) (quote each-any) (vector (quote each) p1096)) ids1097)))) tmp1091) ((lambda (tmp1098) (if tmp1098 (apply (lambda (x1099 y1100) (call-with-values (lambda () (cvt1086 y1100 n1088 ids1089)) (lambda (y1101 ids1102) (call-with-values (lambda () (cvt1086 x1099 n1088 ids1102)) (lambda (x1103 ids1104) (values (cons x1103 y1101) ids1104)))))) tmp1098) ((lambda (tmp1105) (if tmp1105 (apply (lambda () (values (quote ()) ids1089)) tmp1105) ((lambda (tmp1106) (if tmp1106 (apply (lambda (x1107) (call-with-values (lambda () (cvt1086 x1107 n1088 ids1089)) (lambda (p1109 ids1110) (values (vector (quote vector) p1109) ids1110)))) tmp1106) ((lambda (x1111) (values (vector (quote atom) (strip114 p1087 (quote (())))) ids1089)) tmp1090))) (syntax-dispatch tmp1090 (quote #(vector each-any)))))) (syntax-dispatch tmp1090 (quote ()))))) (syntax-dispatch tmp1090 (quote (any . any)))))) (syntax-dispatch tmp1090 (quote (any any))))) p1087)))))) (lambda (e1112 r1113 w1114 s1115) (let ((e1116 (source-wrap96 e1112 w1114 s1115))) ((lambda (tmp1117) ((lambda (tmp1118) (if tmp1118 (apply (lambda (_1119 val1120 key1121 m1122) (if (andmap (lambda (x1123) (and (id?67 x1123) (not (ellipsis?112 x1123)))) key1121) (let ((x1125 (gen-var115 (quote tmp)))) (list (list (quote lambda) (list x1125) (gen-syntax-case1042 x1125 key1121 m1122 r1113)) (chi103 val1120 r1113 (quote (()))))) (syntax-error e1116 (quote "invalid literals list in")))) tmp1118) (syntax-error tmp1117))) (syntax-dispatch tmp1117 (quote (any any each-any . each-any))))) e1116))))) (set! sc-expand (let ((m1128 (quote e)) (esew1129 (quote (eval)))) (lambda (x1130) (if (and (pair? x1130) (equal? (car x1130) noexpand37)) (cadr x1130) (chi-top102 x1130 (quote ()) (quote ((top))) m1128 esew1129))))) (set! sc-expand3 (let ((m1131 (quote e)) (esew1132 (quote (eval)))) (lambda (x1134 . rest1133) (if (and (pair? x1134) (equal? (car x1134) noexpand37)) (cadr x1134) (chi-top102 x1134 (quote ()) (quote ((top))) (if (null? rest1133) m1131 (car rest1133)) (if (or (null? rest1133) (null? (cdr rest1133))) esew1132 (cadr rest1133))))))) (set! identifier? (lambda (x1135) (nonsymbol-id?66 x1135))) (set! datum->syntax-object (lambda (id1136 datum1137) (make-syntax-object52 datum1137 (syntax-object-wrap55 id1136)))) (set! syntax-object->datum (lambda (x1138) (strip114 x1138 (quote (()))))) (set! generate-temporaries (lambda (ls1139) (begin (let ((x1140 ls1139)) (if (not (list? x1140)) (error-hook45 (quote generate-temporaries) (quote "invalid argument") x1140))) (map (lambda (x1141) (wrap95 (gensym) (quote ((top))))) ls1139)))) (set! free-identifier=? (lambda (x1142 y1143) (begin (let ((x1144 x1142)) (if (not (nonsymbol-id?66 x1144)) (error-hook45 (quote free-identifier=?) (quote "invalid argument") x1144))) (let ((x1145 y1143)) (if (not (nonsymbol-id?66 x1145)) (error-hook45 (quote free-identifier=?) (quote "invalid argument") x1145))) (free-id=?90 x1142 y1143)))) (set! bound-identifier=? (lambda (x1146 y1147) (begin (let ((x1148 x1146)) (if (not (nonsymbol-id?66 x1148)) (error-hook45 (quote bound-identifier=?) (quote "invalid argument") x1148))) (let ((x1149 y1147)) (if (not (nonsymbol-id?66 x1149)) (error-hook45 (quote bound-identifier=?) (quote "invalid argument") x1149))) (bound-id=?91 x1146 y1147)))) (set! syntax-error (lambda (object1151 . messages1150) (begin (for-each (lambda (x1152) (let ((x1153 x1152)) (if (not (string? x1153)) (error-hook45 (quote syntax-error) (quote "invalid argument") x1153)))) messages1150) (let ((message1154 (if (null? messages1150) (quote "invalid syntax") (apply string-append messages1150)))) (error-hook45 (quote #f) message1154 (strip114 object1151 (quote (())))))))) (set! install-global-transformer (lambda (sym1155 v1156) (begin (let ((x1157 sym1155)) (if (not (symbol? x1157)) (error-hook45 (quote define-syntax) (quote "invalid argument") x1157))) (let ((x1158 v1156)) (if (not (procedure? x1158)) (error-hook45 (quote define-syntax) (quote "invalid argument") x1158))) (global-extend65 (quote macro) sym1155 v1156)))) (letrec ((match1163 (lambda (e1164 p1165 w1166 r1167) (cond ((not r1167) (quote #f)) ((eq? p1165 (quote any)) (cons (wrap95 e1164 w1166) r1167)) ((syntax-object?53 e1164) (match*1162 (let ((e1168 (syntax-object-expression54 e1164))) (if (annotation?42 e1168) (annotation-expression e1168) e1168)) p1165 (join-wraps86 w1166 (syntax-object-wrap55 e1164)) r1167)) (else (match*1162 (let ((e1169 e1164)) (if (annotation?42 e1169) (annotation-expression e1169) e1169)) p1165 w1166 r1167))))) (match*1162 (lambda (e1170 p1171 w1172 r1173) (cond ((null? p1171) (and (null? e1170) r1173)) ((pair? p1171) (and (pair? e1170) (match1163 (car e1170) (car p1171) w1172 (match1163 (cdr e1170) (cdr p1171) w1172 r1173)))) ((eq? p1171 (quote each-any)) (let ((l1174 (match-each-any1160 e1170 w1172))) (and l1174 (cons l1174 r1173)))) (else (let ((t1175 (vector-ref p1171 (quote 0)))) (if (memv t1175 (quote (each))) (if (null? e1170) (match-empty1161 (vector-ref p1171 (quote 1)) r1173) (let ((l1176 (match-each1159 e1170 (vector-ref p1171 (quote 1)) w1172))) (and l1176 (let collect1177 ((l1178 l1176)) (if (null? (car l1178)) r1173 (cons (map car l1178) (collect1177 (map cdr l1178)))))))) (if (memv t1175 (quote (free-id))) (and (id?67 e1170) (free-id=?90 (wrap95 e1170 w1172) (vector-ref p1171 (quote 1))) r1173) (if (memv t1175 (quote (atom))) (and (equal? (vector-ref p1171 (quote 1)) (strip114 e1170 w1172)) r1173) (if (memv t1175 (quote (vector))) (and (vector? e1170) (match1163 (vector->list e1170) (vector-ref p1171 (quote 1)) w1172 r1173))))))))))) (match-empty1161 (lambda (p1179 r1180) (cond ((null? p1179) r1180) ((eq? p1179 (quote any)) (cons (quote ()) r1180)) ((pair? p1179) (match-empty1161 (car p1179) (match-empty1161 (cdr p1179) r1180))) ((eq? p1179 (quote each-any)) (cons (quote ()) r1180)) (else (let ((t1181 (vector-ref p1179 (quote 0)))) (if (memv t1181 (quote (each))) (match-empty1161 (vector-ref p1179 (quote 1)) r1180) (if (memv t1181 (quote (free-id atom))) r1180 (if (memv t1181 (quote (vector))) (match-empty1161 (vector-ref p1179 (quote 1)) r1180))))))))) (match-each-any1160 (lambda (e1182 w1183) (cond ((annotation?42 e1182) (match-each-any1160 (annotation-expression e1182) w1183)) ((pair? e1182) (let ((l1184 (match-each-any1160 (cdr e1182) w1183))) (and l1184 (cons (wrap95 (car e1182) w1183) l1184)))) ((null? e1182) (quote ())) ((syntax-object?53 e1182) (match-each-any1160 (syntax-object-expression54 e1182) (join-wraps86 w1183 (syntax-object-wrap55 e1182)))) (else (quote #f))))) (match-each1159 (lambda (e1185 p1186 w1187) (cond ((annotation?42 e1185) (match-each1159 (annotation-expression e1185) p1186 w1187)) ((pair? e1185) (let ((first1188 (match1163 (car e1185) p1186 w1187 (quote ())))) (and first1188 (let ((rest1189 (match-each1159 (cdr e1185) p1186 w1187))) (and rest1189 (cons first1188 rest1189)))))) ((null? e1185) (quote ())) ((syntax-object?53 e1185) (match-each1159 (syntax-object-expression54 e1185) p1186 (join-wraps86 w1187 (syntax-object-wrap55 e1185)))) (else (quote #f)))))) (set! syntax-dispatch (lambda (e1190 p1191) (cond ((eq? p1191 (quote any)) (list e1190)) ((syntax-object?53 e1190) (match*1162 (let ((e1192 (syntax-object-expression54 e1190))) (if (annotation?42 e1192) (annotation-expression e1192) e1192)) p1191 (syntax-object-wrap55 e1190) (quote ()))) (else (match*1162 (let ((e1193 e1190)) (if (annotation?42 e1193) (annotation-expression e1193) e1193)) p1191 (quote (())) (quote ())))))))))
(install-global-transformer (quote with-syntax) (lambda (x1194) ((lambda (tmp1195) ((lambda (tmp1196) (if tmp1196 (apply (lambda (_1197 e11198 e21199) (cons (quote #(syntax-object begin ((top) #(ribcage #(_ e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e11198 e21199))) tmp1196) ((lambda (tmp1201) (if tmp1201 (apply (lambda (_1202 out1203 in1204 e11205 e21206) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) in1204 (quote ()) (list out1203 (cons (quote #(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e11205 e21206))))) tmp1201) ((lambda (tmp1208) (if tmp1208 (apply (lambda (_1209 out1210 in1211 e11212 e21213) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons (quote #(syntax-object list ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) in1211) (quote ()) (list out1210 (cons (quote #(syntax-object begin ((top) #(ribcage #(_ out in e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e11212 e21213))))) tmp1208) (syntax-error tmp1195))) (syntax-dispatch tmp1195 (quote (any #(each (any any)) any . each-any)))))) (syntax-dispatch tmp1195 (quote (any ((any any)) any . each-any)))))) (syntax-dispatch tmp1195 (quote (any () any . each-any))))) x1194)))
(install-global-transformer (quote syntax-rules) (lambda (x1217) ((lambda (tmp1218) ((lambda (tmp1219) (if tmp1219 (apply (lambda (_1220 k1221 keyword1222 pattern1223 template1224) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote (#(syntax-object x ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))))) (cons (quote #(syntax-object syntax-case ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons (quote #(syntax-object x ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons k1221 (map (lambda (tmp1227 tmp1226) (list (cons (quote #(syntax-object dummy ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) tmp1226) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ k keyword pattern template) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) tmp1227))) template1224 pattern1223)))))) tmp1219) (syntax-error tmp1218))) (syntax-dispatch tmp1218 (quote (any each-any . #(each ((any . any) any))))))) x1217)))
(install-global-transformer (quote let*) (lambda (x1228) ((lambda (tmp1229) ((lambda (tmp1230) (if (if tmp1230 (apply (lambda (let*1231 x1232 v1233 e11234 e21235) (andmap identifier? x1232)) tmp1230) (quote #f)) (apply (lambda (let*1237 x1238 v1239 e11240 e21241) (let f1242 ((bindings1243 (map list x1238 v1239))) (if (null? bindings1243) (cons (quote #(syntax-object let ((top) #(ribcage () () ()) #(ribcage #(f bindings) #((top) (top)) #("i" "i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons (quote ()) (cons e11240 e21241))) ((lambda (tmp1247) ((lambda (tmp1248) (if tmp1248 (apply (lambda (body1249 binding1250) (list (quote #(syntax-object let ((top) #(ribcage #(body binding) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(f bindings) #((top) (top)) #("i" "i")) #(ribcage #(let* x v e1 e2) #((top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (list binding1250) body1249)) tmp1248) (syntax-error tmp1247))) (syntax-dispatch tmp1247 (quote (any any))))) (list (f1242 (cdr bindings1243)) (car bindings1243)))))) tmp1230) (syntax-error tmp1229))) (syntax-dispatch tmp1229 (quote (any #(each (any any)) any . each-any))))) x1228)))
(install-global-transformer (quote do) (lambda (orig-x1251) ((lambda (tmp1252) ((lambda (tmp1253) (if tmp1253 (apply (lambda (_1254 var1255 init1256 step1257 e01258 e11259 c1260) ((lambda (tmp1261) ((lambda (tmp1262) (if tmp1262 (apply (lambda (step1263) ((lambda (tmp1264) ((lambda (tmp1265) (if tmp1265 (apply (lambda () (list (quote #(syntax-object let ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (quote #(syntax-object doloop ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (map list var1255 init1256) (list (quote #(syntax-object if ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (list (quote #(syntax-object not ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) e01258) (cons (quote #(syntax-object begin ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (append c1260 (list (cons (quote #(syntax-object doloop ((top) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) step1263))))))) tmp1265) ((lambda (tmp1270) (if tmp1270 (apply (lambda (e11271 e21272) (list (quote #(syntax-object let ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (quote #(syntax-object doloop ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (map list var1255 init1256) (list (quote #(syntax-object if ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) e01258 (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (cons e11271 e21272)) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) (append c1260 (list (cons (quote #(syntax-object doloop ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage #(step) #((top)) #("i")) #(ribcage #(_ var init step e0 e1 c) #((top) (top) (top) (top) (top) (top) (top)) #("i" "i" "i" "i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(orig-x) #((top)) #("i"))))) step1263))))))) tmp1270) (syntax-error tmp1264))) (syntax-dispatch tmp1264 (quote (any . each-any)))))) (syntax-dispatch tmp1264 (quote ())))) e11259)) tmp1262) (syntax-error tmp1261))) (syntax-dispatch tmp1261 (quote each-any)))) (map (lambda (v1279 s1280) ((lambda (tmp1281) ((lambda (tmp1282) (if tmp1282 (apply (lambda () v1279) tmp1282) ((lambda (tmp1283) (if tmp1283 (apply (lambda (e1284) e1284) tmp1283) ((lambda (_1285) (syntax-error orig-x1251)) tmp1281))) (syntax-dispatch tmp1281 (quote (any)))))) (syntax-dispatch tmp1281 (quote ())))) s1280)) var1255 step1257))) tmp1253) (syntax-error tmp1252))) (syntax-dispatch tmp1252 (quote (any #(each (any any . any)) (any . each-any) . each-any))))) orig-x1251)))
(install-global-transformer (quote quasiquote) (letrec ((quasicons1288 (lambda (x1292 y1293) ((lambda (tmp1294) ((lambda (tmp1295) (if tmp1295 (apply (lambda (x1296 y1297) ((lambda (tmp1298) ((lambda (tmp1299) (if tmp1299 (apply (lambda (dy1300) ((lambda (tmp1301) ((lambda (tmp1302) (if tmp1302 (apply (lambda (dx1303) (list (quote #(syntax-object quote ((top) #(ribcage #(dx) #((top)) #("i")) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) (cons dx1303 dy1300))) tmp1302) ((lambda (_1304) (if (null? dy1300) (list (quote #(syntax-object list ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) x1296) (list (quote #(syntax-object cons ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) x1296 y1297))) tmp1301))) (syntax-dispatch tmp1301 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(dy) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) any))))) x1296)) tmp1299) ((lambda (tmp1305) (if tmp1305 (apply (lambda (stuff1306) (cons (quote #(syntax-object list ((top) #(ribcage #(stuff) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) (cons x1296 stuff1306))) tmp1305) ((lambda (else1307) (list (quote #(syntax-object cons ((top) #(ribcage #(else) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) x1296 y1297)) tmp1298))) (syntax-dispatch tmp1298 (quote (#(free-id #(syntax-object list ((top) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) . any)))))) (syntax-dispatch tmp1298 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) any))))) y1297)) tmp1295) (syntax-error tmp1294))) (syntax-dispatch tmp1294 (quote (any any))))) (list x1292 y1293)))) (quasiappend1289 (lambda (x1308 y1309) ((lambda (tmp1310) ((lambda (tmp1311) (if tmp1311 (apply (lambda (x1312 y1313) ((lambda (tmp1314) ((lambda (tmp1315) (if tmp1315 (apply (lambda () x1312) tmp1315) ((lambda (_1316) (list (quote #(syntax-object append ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) x1312 y1313)) tmp1314))) (syntax-dispatch tmp1314 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x y) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) ()))))) y1313)) tmp1311) (syntax-error tmp1310))) (syntax-dispatch tmp1310 (quote (any any))))) (list x1308 y1309)))) (quasivector1290 (lambda (x1317) ((lambda (tmp1318) ((lambda (x1319) ((lambda (tmp1320) ((lambda (tmp1321) (if tmp1321 (apply (lambda (x1322) (list (quote #(syntax-object quote ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) (list->vector x1322))) tmp1321) ((lambda (tmp1324) (if tmp1324 (apply (lambda (x1325) (cons (quote #(syntax-object vector ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) x1325)) tmp1324) ((lambda (_1327) (list (quote #(syntax-object list->vector ((top) #(ribcage #(_) #((top)) #("i")) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) x1319)) tmp1320))) (syntax-dispatch tmp1320 (quote (#(free-id #(syntax-object list ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) . each-any)))))) (syntax-dispatch tmp1320 (quote (#(free-id #(syntax-object quote ((top) #(ribcage #(x) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) each-any))))) x1319)) tmp1318)) x1317))) (quasi1291 (lambda (p1328 lev1329) ((lambda (tmp1330) ((lambda (tmp1331) (if tmp1331 (apply (lambda (p1332) (if (= lev1329 (quote 0)) p1332 (quasicons1288 (quote (#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i")))) #(syntax-object unquote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i")))))) (quasi1291 (list p1332) (- lev1329 (quote 1)))))) tmp1331) ((lambda (tmp1333) (if tmp1333 (apply (lambda (p1334 q1335) (if (= lev1329 (quote 0)) (quasiappend1289 p1334 (quasi1291 q1335 lev1329)) (quasicons1288 (quasicons1288 (quote (#(syntax-object quote ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i")))) #(syntax-object unquote-splicing ((top) #(ribcage #(p q) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i")))))) (quasi1291 (list p1334) (- lev1329 (quote 1)))) (quasi1291 q1335 lev1329)))) tmp1333) ((lambda (tmp1336) (if tmp1336 (apply (lambda (p1337) (quasicons1288 (quote (#(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i")))) #(syntax-object quasiquote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i")))))) (quasi1291 (list p1337) (+ lev1329 (quote 1))))) tmp1336) ((lambda (tmp1338) (if tmp1338 (apply (lambda (p1339 q1340) (quasicons1288 (quasi1291 p1339 lev1329) (quasi1291 q1340 lev1329))) tmp1338) ((lambda (tmp1341) (if tmp1341 (apply (lambda (x1342) (quasivector1290 (quasi1291 x1342 lev1329))) tmp1341) ((lambda (p1344) (list (quote #(syntax-object quote ((top) #(ribcage #(p) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) p1344)) tmp1330))) (syntax-dispatch tmp1330 (quote #(vector each-any)))))) (syntax-dispatch tmp1330 (quote (any . any)))))) (syntax-dispatch tmp1330 (quote (#(free-id #(syntax-object quasiquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) any)))))) (syntax-dispatch tmp1330 (quote ((#(free-id #(syntax-object unquote-splicing ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) any) . any)))))) (syntax-dispatch tmp1330 (quote (#(free-id #(syntax-object unquote ((top) #(ribcage () () ()) #(ribcage #(p lev) #((top) (top)) #("i" "i")) #(ribcage #(quasicons quasiappend quasivector quasi) #((top) (top) (top) (top)) #("i" "i" "i" "i"))))) any))))) p1328)))) (lambda (x1345) ((lambda (tmp1346) ((lambda (tmp1347) (if tmp1347 (apply (lambda (_1348 e1349) (quasi1291 e1349 (quote 0))) tmp1347) (syntax-error tmp1346))) (syntax-dispatch tmp1346 (quote (any any))))) x1345))))
(install-global-transformer (quote include) (lambda (x1350) (letrec ((read-file1351 (lambda (fn1352 k1353) (let ((p1354 (open-input-file fn1352))) (let f1355 ((x1356 (read p1354))) (if (eof-object? x1356) (begin (close-input-port p1354) (quote ())) (cons (datum->syntax-object k1353 x1356) (f1355 (read p1354))))))))) ((lambda (tmp1357) ((lambda (tmp1358) (if tmp1358 (apply (lambda (k1359 filename1360) (let ((fn1361 (syntax-object->datum filename1360))) ((lambda (tmp1362) ((lambda (tmp1363) (if tmp1363 (apply (lambda (exp1364) (cons (quote #(syntax-object begin ((top) #(ribcage #(exp) #((top)) #("i")) #(ribcage () () ()) #(ribcage () () ()) #(ribcage #(fn) #((top)) #("i")) #(ribcage #(k filename) #((top) (top)) #("i" "i")) #(ribcage (read-file) ((top)) ("i")) #(ribcage #(x) #((top)) #("i"))))) exp1364)) tmp1363) (syntax-error tmp1362))) (syntax-dispatch tmp1362 (quote each-any)))) (read-file1351 fn1361 k1359)))) tmp1358) (syntax-error tmp1357))) (syntax-dispatch tmp1357 (quote (any any))))) x1350))))
(install-global-transformer (quote unquote) (lambda (x1366) ((lambda (tmp1367) ((lambda (tmp1368) (if tmp1368 (apply (lambda (_1369 e1370) (error (quote unquote) (quote "expression ,~s not valid outside of quasiquote") (syntax-object->datum e1370))) tmp1368) (syntax-error tmp1367))) (syntax-dispatch tmp1367 (quote (any any))))) x1366)))
(install-global-transformer (quote unquote-splicing) (lambda (x1371) ((lambda (tmp1372) ((lambda (tmp1373) (if tmp1373 (apply (lambda (_1374 e1375) (error (quote unquote-splicing) (quote "expression ,@~s not valid outside of quasiquote") (syntax-object->datum e1375))) tmp1373) (syntax-error tmp1372))) (syntax-dispatch tmp1372 (quote (any any))))) x1371)))
(install-global-transformer (quote case) (lambda (x1376) ((lambda (tmp1377) ((lambda (tmp1378) (if tmp1378 (apply (lambda (_1379 e1380 m11381 m21382) ((lambda (tmp1383) ((lambda (body1384) (list (quote #(syntax-object let ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (list (list (quote #(syntax-object t ((top) #(ribcage #(body) #((top)) #("i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) e1380)) body1384)) tmp1383)) (let f1385 ((clause1386 m11381) (clauses1387 m21382)) (if (null? clauses1387) ((lambda (tmp1389) ((lambda (tmp1390) (if tmp1390 (apply (lambda (e11391 e21392) (cons (quote #(syntax-object begin ((top) #(ribcage #(e1 e2) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e11391 e21392))) tmp1390) ((lambda (tmp1394) (if tmp1394 (apply (lambda (k1395 e11396 e21397) (list (quote #(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (list (quote #(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote #(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (list (quote #(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) k1395)) (cons (quote #(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e11396 e21397)))) tmp1394) ((lambda (_1400) (syntax-error x1376)) tmp1389))) (syntax-dispatch tmp1389 (quote (each-any any . each-any)))))) (syntax-dispatch tmp1389 (quote (#(free-id #(syntax-object else ((top) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) any . each-any))))) clause1386) ((lambda (tmp1401) ((lambda (rest1402) ((lambda (tmp1403) ((lambda (tmp1404) (if tmp1404 (apply (lambda (k1405 e11406 e21407) (list (quote #(syntax-object if ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (list (quote #(syntax-object memv ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote #(syntax-object t ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (list (quote #(syntax-object quote ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) k1405)) (cons (quote #(syntax-object begin ((top) #(ribcage #(k e1 e2) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(rest) #((top)) #("i")) #(ribcage () () ()) #(ribcage #(f clause clauses) #((top) (top) (top)) #("i" "i" "i")) #(ribcage #(_ e m1 m2) #((top) (top) (top) (top)) #("i" "i" "i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e11406 e21407)) rest1402)) tmp1404) ((lambda (_1410) (syntax-error x1376)) tmp1403))) (syntax-dispatch tmp1403 (quote (each-any any . each-any))))) clause1386)) tmp1401)) (f1385 (car clauses1387) (cdr clauses1387))))))) tmp1378) (syntax-error tmp1377))) (syntax-dispatch tmp1377 (quote (any any any . each-any))))) x1376)))
(install-global-transformer (quote identifier-syntax) (lambda (x1411) ((lambda (tmp1412) ((lambda (tmp1413) (if tmp1413 (apply (lambda (_1414 e1415) (list (quote #(syntax-object lambda ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))))) (list (quote #(syntax-object syntax-case ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote #(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote ()) (list (quote #(syntax-object id ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (quote (#(syntax-object identifier? ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))) (#(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))) #(syntax-object id ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) e1415)) (list (cons _1414 (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))) #(syntax-object ... ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))))) (list (quote #(syntax-object syntax ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i"))))) (cons e1415 (quote (#(syntax-object x ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))) #(syntax-object ... ((top) #(ribcage #(_ e) #((top) (top)) #("i" "i")) #(ribcage () () ()) #(ribcage #(x) #((top)) #("i")))))))))))) tmp1413) (syntax-error tmp1412))) (syntax-dispatch tmp1412 (quote (any any))))) x1411)))
