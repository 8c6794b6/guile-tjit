BUGS

This file contains bugs we haven't fixed yet, and some we have.
The format is very simple (one bug per page):

#   line				   regexp

1   bug NUMBER -- ONE-LINE-DESCRIPTION	   ^bug ([0-9]+) -- (.+)$
2   reported-by: SOMEONE / DATE		   ^reported-by: ([^/]) */ *(.+)$
3   fixed: DATE (for guile VERSION)	   ^fixed: (.+) .for guile (.+).$
4+  OTHER-NOTES

DATE is formatted YYYY-MM-DD, or "not-yet".  Line numbering is zero-origin;
line 0 is empty (newline always follows newpage (recognizable w/ "\f\n")).
The suggested regexps can be used in a line-oriented parser.


bug 0 -- no BUGS file
reported-by: ttn / 2001-09-25
fixed: 2001-09-30 (1.5.x, 1.7.x)

bugs are good.


bug 1 -- (debug-disable 'debug) has no effect if first form in ~/.guile
reported-by: Sven.Hartrumpf@fernuni-hagen.de / 2001-08-31
fixed: not-yet

ttn sez:
buggy behavior confirmed on both 1.5.x and 1.7.x.

on the other hand, when second or later, the expected effect (disabling use of
debugging evaluator) seems to be reflected when viewing the debug options.  it
could be that the bug is in display and not the actual setting.


bug 2 -- documentation mirroring not complete
reported-by: lord@regexps.com / 2001-08
fixed: not-yet

ttn sez:
uncollated mirroring is already available:
http://savannah.gnu.org/cgi-bin/viewcvs/guile/
http://mail.gnu.org/pipermail/guile-devel/


bug 3 -- design decisions not recorded
reported-by: lord@regexps.com / 2001-08
fixed: not-yet

changes are made w/ little documentation on their motivation, design and
consequences.  past initiatives and current maintainer discipline to support
them need shoring up.

ttn sez:
someone also mentioned that process and product are orthogonal; nastiness can
result in/from either, and for different reasons.  i tend to believe this up
until a certain point, when the process becomes self-aware and includes its own
improvement in its considerations.  then, hopefully it becomes light.

to change people is difficult, but that's why we have guile...


bug 4 -- named-let transform evaluates initvalue in the wrong scope
reported-by: agj@alum.mit.edu / 2001-09-21
fixed: not-yet

currently:
> (let name ((var init) ...) body ...)
> 
> to
> 
> (letrec ((name (lambda (var ...) body ...)))
>   (name init ...))

should be:
> ((letrec ((name (lambda (var ...) body ...))) name) init ...)

Dirk Herrmann sez:
I will do it - no big deal (I hope).  But, I won't have time to do it
before next week.  What about adding this code as a test case to the test
suite?  Until it is fixed, it can be tagged as expected to fail.


bug 5 -- uniform vector read-hash "e" clashes w/ exactness specification
reported-by: kwright@gis.net / 2001-10-07
fixed: not-yet

Keith Wright sez:
> Before getting into philosophy, I want to mention that while poking
> around and rethinking I found the following Bug.
> 
>     guile> (version)
>     "1.5.2"
>     guile> #E3
>     3
>     guile> #e3
>     ERROR: read:uniform-vector list not found
>     ABORT: (misc-error)
>     guile> 3
> 
> This violates both R5RS 7.1 ``Case is insignificant'' and 
> 
> > From: guile-1.5.2/doc/ref/guile.info-3 Line 568
> >
> >     The codes for indicating exactness (which can, incidentally, be
> >  applied to all numerical values) are:
> >
> >   * `#e', `#E' -- the number is exact

[BUGS ends here]
