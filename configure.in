dnl   configuration script for Guile
dnl   Process this file with autoconf to produce configure.
dnl
dnl  Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
dnl
dnl  This file is part of GUILE
dnl
dnl  GUILE is free software; you can redistribute it and/or modify it
dnl  under the terms of the GNU General Public License as published by
dnl  the Free Software Foundation; either version 2, or (at your
dnl  option) any later version.
dnl
dnl  GUILE is distributed in the hope that it will be useful, but
dnl  WITHOUT ANY WARRANTY; without even the implied warranty of
dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl  General Public License for more details.
dnl
dnl  You should have received a copy of the GNU General Public License
dnl  along with GUILE; see the file COPYING.  If not, write to the
dnl  Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl  Boston, MA 02111-1307, USA.

AC_PREREQ(2.50)

AC_INIT
AC_CONFIG_SRCDIR([Makefile.in])
. $srcdir/GUILE-VERSION
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(libguile/scmconfig.h)

#--------------------------------------------------------------------
#
# Independent Subdirectories
#
#--------------------------------------------------------------------

AC_CONFIG_SUBDIRS(guile-readline)

#--------------------------------------------------------------------
#
# User options
#
#--------------------------------------------------------------------

AC_ARG_ENABLE(error-on-warning,
  [  --enable-error-on-warning    treat compile warnings as errors],
  [case "${enableval}" in
     yes | y) CFLAGS="${CFLAGS} -Werror"; enable_compile_warnings=no ;;
     no | n)  ;;
     *) AC_MSG_ERROR(bad value ${enableval} for --enable-error-on-warning) ;;
   esac])

AC_ARG_ENABLE(debug-freelist,
  [  --enable-debug-freelist include garbage collector freelist debugging code],
  if test "$enable_debug_freelist" = y || test "$enable_debug_freelist" = yes; then
    AC_DEFINE(GUILE_DEBUG_FREELIST)
  fi)

AC_ARG_ENABLE(debug-malloc,
  [  --enable-debug-malloc   include malloc debugging code],
  if test "$enable_debug_malloc" = y || test "$enable_debug_malloc" = yes; then
    AC_DEFINE(GUILE_DEBUG_MALLOC)
  fi)

AC_ARG_ENABLE(guile-debug,
  [  --enable-guile-debug    include internal debugging functions],
  if test "$enable_guile_debug" = y || test "$enable_guile_debug" = yes; then
    AC_DEFINE(GUILE_DEBUG)
  fi)

AC_ARG_ENABLE(arrays,
  [  --disable-arrays        omit array and uniform array support],,
  enable_arrays=yes)

AC_ARG_ENABLE(posix,
  [  --disable-posix         omit posix interfaces],,
  enable_posix=yes)

AC_ARG_ENABLE(networking,
  [  --disable-networking    omit networking interfaces],,
  enable_networking=yes)

AC_ARG_ENABLE(regex,
  [  --disable-regex         omit regular expression interfaces],,
  enable_regex=yes)

AC_ARG_ENABLE(htmldoc,
  [  --enable-htmldoc        build HTML documentation as well as Info],
  [if test "$enable_htmldoc" = "" || test "$enable_htmldoc" = y || test "$enable_htmldoc" = yes; then
     htmldoc_enabled=yes
     AC_PATH_PROG(TEXI2HTML, texi2html, not found)
     if test "$TEXI2HTML" = "not found"; then
       echo
       echo Building HTML documentation requires the \`texi2html\' program,
       echo which appears not to be present on your machine.
       echo
       echo \`texi2html\' is available from
       echo 'http://www.mathematik.uni-kl.de/~obachman/Texi2html/.'
       echo
       echo In the meantime, to build the guile-doc distribution
       echo without HTML enabled, please rerun \`./configure\' without
       echo the \`--enable-htmldoc\' option.
       exit -1
     fi
   fi])

AM_CONDITIONAL(HTMLDOC, test x$htmldoc_enabled = xyes)

AC_ARG_ENABLE(deprecated,
  [  --disable-deprecated    omit deprecated features [no]])

if test "$enable_deprecated" = no; then
  AC_DEFINE(SCM_DEBUG_DEPRECATED, 1)
else
  if test "$enable_deprecated" = yes || test "$enable_deprecated" = ""; then
    warn_default=summary
  elif test "$enable_deprecated" = shutup; then
    warn_default=no
  else
    warn_default=$enable_deprecated
  fi
  AC_DEFINE(SCM_DEBUG_DEPRECATED, 0)
  AC_DEFINE_UNQUOTED(SCM_WARN_DEPRECATED_DEFAULT, "$warn_default")
fi

dnl The --disable-debug used to control these two.  But now they are
dnl a required part of the distribution.
AC_DEFINE(DEBUG_EXTENSIONS)
AC_DEFINE(READER_EXTENSIONS)

dnl files which are destined for separate modules.

if test "$enable_arrays" = yes; then
   LIBOBJS="$LIBOBJS ramap.o unif.o"
   AC_DEFINE(HAVE_ARRAYS)
fi

if test "$enable_posix" = yes; then
   LIBOBJS="$LIBOBJS filesys.o posix.o"
   AC_DEFINE(HAVE_POSIX)
fi

if test "$enable_networking" = yes; then
   LIBOBJS="$LIBOBJS net_db.o socket.o"
   AC_DEFINE(HAVE_NETWORKING)
fi

if test "$enable_debug_malloc" = yes; then
   LIBOBJS="$LIBOBJS debug-malloc.o"
fi

#--------------------------------------------------------------------

AC_LIBLTDL_CONVENIENCE
AC_CONFIG_SUBDIRS(libltdl)

AC_PROG_CC
AC_PROG_CPP
AC_LIBTOOL_DLOPEN

AC_AIX
AC_ISC_POSIX
AC_MINIX

AM_PROG_CC_STDC
AM_PROG_LIBTOOL

AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN

AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

dnl Check for integral types that can represent the range of pointers.
dnl If these types don't exist on this platform, they are replaced by
dnl "unsigned long" and "long", respectively.

AC_CHECK_HEADERS(stdint.h)
AC_CHECK_HEADERS(inttypes.h)
AC_CHECK_TYPES([uintptr_t, ptrdiff_t])

AC_CACHE_CHECK([for long longs], scm_cv_long_longs,
	       AC_TRY_COMPILE(,
			      [long long a],
			      scm_cv_long_longs=yes,
			      scm_cv_long_longs=no))
if test "$scm_cv_long_longs" = yes; then
  AC_DEFINE(HAVE_LONG_LONGS)
  AC_CHECK_SIZEOF(long long)
fi

AC_CHECK_SIZEOF(void *)

if test "$ac_cv_sizeof_long" -ne "$ac_cv_sizeof_void_p"; then
  AC_MSG_ERROR(sizes of long and void* are not identical)
fi

AC_HEADER_STDC
AC_HEADER_DIRENT
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(io.h libc.h limits.h malloc.h memory.h string.h regex.h rxposix.h rx/rxposix.h sys/ioctl.h sys/select.h sys/time.h sys/timeb.h sys/times.h sys/stdtypes.h sys/types.h sys/utime.h time.h unistd.h utime.h pwd.h winsock2.h grp.h sys/utsname.h)
GUILE_HEADER_LIBC_WITH_UNISTD

AC_TYPE_GETGROUPS
AC_TYPE_SIGNAL
AC_TYPE_MODE_T

AC_CHECK_LIB(m, main)
AC_CHECK_FUNCS(gethostbyname)
if test $ac_cv_func_gethostbyname = no; then
    AC_CHECK_LIB(nsl, gethostbyname)
fi
AC_CHECK_FUNCS(connect)
if test $ac_cv_func_connect = no; then
    AC_CHECK_LIB(socket, connect)
fi

# Check for dynamic linking

use_modules=yes
AC_ARG_WITH(modules,
[  --with-modules[=FILES]  Add support for dynamic modules],
use_modules="$withval")
test -z "$use_modules" && use_modules=yes
DLPREOPEN=
if test "$use_modules" != no; then
  AC_DEFINE(DYNAMIC_LINKING)
  if test "$use_modules" = yes; then
    DLPREOPEN="-dlpreopen force"
  else
    DLPREOPEN="-export-dynamic"
    for module in $use_modules; do
      DLPREOPEN="$DLPREOPEN -dlopen $module"
    done
  fi
fi
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)
AC_SUBST(DLPREOPEN)

AC_CHECK_FUNCS(ctermid ftime fchown getcwd geteuid gettimeofday lstat mkdir mknod nice readlink rename rmdir select setegid seteuid setlocale setpgid setsid sigaction siginterrupt strftime strptime symlink sync tcgetpgrp tcsetpgrp times uname waitpid strdup system usleep atexit on_exit chown link fcntl ttyname getpwent getgrent kill getppid getpgrp fork setitimer getitimer)

AC_CHECK_HEADERS(crypt.h sys/resource.h sys/file.h)
AC_CHECK_FUNCS(chroot flock getlogin cuserid getpriority setpriority getpass sethostname gethostname)
AC_CHECK_LIB(crypt, crypt)

### Some systems don't declare some functions.  On such systems, we
### need to at least provide our own K&R-style declarations.

### GUILE_FUNC_DECLARED(function, headerfile)

### Check for a declaration of FUNCTION in HEADERFILE; if it is
### not there, #define MISSING_FUNCTION_DECL.
AC_DEFUN(GUILE_FUNC_DECLARED, [
  AC_CACHE_CHECK(for $1 declaration, guile_cv_func_$1_declared,
    AC_EGREP_HEADER($1, $2,
		    guile_cv_func_$1_declared=yes,
		    guile_cv_func_$1_declared=no))
  if test [x$guile_cv_func_]$1[_declared] = xno; then
    AC_DEFINE([MISSING_]translit($1, [a-z], [A-Z])[_DECL])
  fi
])

GUILE_FUNC_DECLARED(strptime, time.h)
GUILE_FUNC_DECLARED(sleep, unistd.h)
GUILE_FUNC_DECLARED(usleep, unistd.h)

### On some systems usleep has no return value.  If it does have one,
### we'd like to return it; otherwise, we'll fake it.
AC_CACHE_CHECK([return type of usleep], guile_cv_func_usleep_return_type,
  [AC_EGREP_HEADER(changequote(<, >)<void[ 	]+usleep>changequote([, ]),
                   /usr/include/unistd.h,
		   [guile_cv_func_usleep_return_type=void],
		   [guile_cv_func_usleep_return_type=int])])
case "$guile_cv_func_usleep_return_type" in
  "void" )
    AC_DEFINE(USLEEP_RETURNS_VOID)
  ;;
esac

AC_CHECK_HEADER(sys/un.h, have_sys_un_h=1)
if test -n "$have_sys_un_h" ; then
AC_DEFINE(HAVE_UNIX_DOMAIN_SOCKETS)
fi

AC_CHECK_FUNCS(socketpair getgroups setpwent pause tzset)

AC_CHECK_FUNCS(sethostent   gethostent   endhostent   dnl
               setnetent    getnetent    endnetent    dnl
               setprotoent  getprotoent  endprotoent  dnl
               setservent   getservent   endservent   dnl
               getnetbyaddr getnetbyname dnl
	       inet_lnaof inet_makeaddr inet_netof hstrerror dnl
	       inet_pton inet_ntop)

dnl Some systems do not declare this.  Some systems do declare it, as a
dnl macro.  With cygwin it may be in a DLL.

AC_MSG_CHECKING(whether netdb.h declares h_errno)
AC_CACHE_VAL(guile_cv_have_h_errno,
[AC_TRY_COMPILE([#include <netdb.h>],
[int a = h_errno;],
guile_cv_have_h_errno=yes, guile_cv_have_h_errno=no)])
AC_MSG_RESULT($guile_cv_have_h_errno)
if test $guile_cv_have_h_errno = yes; then
  AC_DEFINE(HAVE_H_ERRNO)
fi

AC_MSG_CHECKING(whether netdb.h defines uint32_t)
AC_CACHE_VAL(guile_cv_have_uint32_t,
[AC_TRY_COMPILE([#include <netdb.h>],
[uint32_t a;],
guile_cv_have_uint32_t=yes, guile_cv_have_uint32_t=no)])
AC_MSG_RESULT($guile_cv_have_uint32_t)
if test $guile_cv_have_uint32_t = yes; then
  AC_DEFINE(HAVE_UINT32_T)
fi

AC_MSG_CHECKING(for working IPv6 support)
AC_CACHE_VAL(guile_cv_have_ipv6,
[AC_TRY_COMPILE([#include <netinet/in.h>
#include <sys/socket.h>],
[struct sockaddr_in6 a;  a.sin6_family = AF_INET6;],
guile_cv_have_ipv6=yes, guile_cv_have_ipv6=no)])
AC_MSG_RESULT($guile_cv_have_ipv6)
if test $guile_cv_have_ipv6 = yes; then
  AC_DEFINE(HAVE_IPV6)
fi

# included in rfc2553 but not in older implementations, e.g., glibc 2.1.3.
AC_MSG_CHECKING(whether sockaddr_in6 has sin6_scope_id)
AC_CACHE_VAL(guile_cv_have_sin6_scope_id,
[AC_TRY_COMPILE([#include <netinet/in.h>],
[struct sockaddr_in6 sok;  sok.sin6_scope_id = 0;],
guile_cv_have_sin6_scope_id=yes, guile_cv_have_sin6_scope_id=no)])
AC_MSG_RESULT($guile_cv_have_sin6_scope_id)
if test $guile_cv_have_sin6_scope_id = yes; then
  AC_DEFINE(HAVE_SIN6_SCOPE_ID)
fi

AC_MSG_CHECKING(whether localtime caches TZ)
AC_CACHE_VAL(guile_cv_localtime_cache,
[if test x$ac_cv_func_tzset = xyes; then
AC_TRY_RUN([#include <time.h>
#if STDC_HEADERS
# include <stdlib.h>
#endif
extern char **environ;
unset_TZ ()
{
  char **from, **to;
  for (to = from = environ; (*to = *from); from++)
    if (! (to[0][0] == 'T' && to[0][1] == 'Z' && to[0][2] == '='))
      to++;
}
char TZ_GMT0[] = "TZ=GMT0";
char TZ_PST8[] = "TZ=PST8";
main()
{
  time_t now = time ((time_t *) 0);
  int hour_GMT0, hour_unset;
  if (putenv (TZ_GMT0) != 0)
    exit (1);
  hour_GMT0 = localtime (&now)->tm_hour;
  unset_TZ ();
  hour_unset = localtime (&now)->tm_hour;
  if (putenv (TZ_PST8) != 0)
    exit (1);
  if (localtime (&now)->tm_hour == hour_GMT0)
    exit (1);
  unset_TZ ();
  if (localtime (&now)->tm_hour != hour_unset)
    exit (1);
  exit (0);
}], guile_cv_localtime_cache=no, guile_cv_localtime_cache=yes,
[# If we have tzset, assume the worst when cross-compiling.
guile_cv_localtime_cache=yes])
else
        # If we lack tzset, report that localtime does not cache TZ,
        # since we can't invalidate the cache if we don't have tzset.
        guile_cv_localtime_cache=no
fi])dnl
AC_MSG_RESULT($guile_cv_localtime_cache)
if test $guile_cv_localtime_cache = yes; then
  AC_DEFINE(LOCALTIME_CACHE)
fi

dnl Test whether system calls are restartable by default on the
dnl current system.  If they are not, we put a loop around every system
dnl call to check for EINTR (see SCM_SYSCALL) and do not attempt to
dnl change from the default behaviour.  On the other hand, if signals
dnl are restartable then the loop is not installed and when libguile
dnl initialises it also resets the behaviour of each signal to cause a
dnl restart (in case a different runtime had a different default
dnl behaviour for some reason: e.g., different versions of linux seem
dnl to behave differently.)

AC_SYS_RESTARTABLE_SYSCALLS

if test "$enable_regex" = yes; then
   if test "$ac_cv_header_regex_h" = yes ||
      test "$ac_cv_header_rxposix_h" = yes ||
      test "$ac_cv_header_rx_rxposix_h" = yes; then
     GUILE_NAMED_CHECK_FUNC(regcomp, norx, [LIBOBJS="regex-posix.o $LIBOBJS"],
     [AC_CHECK_LIB(rx, main)
      GUILE_NAMED_CHECK_FUNC(regcomp, rx, [LIBOBJS="regex-posix.o $LIBOBJS"])]
     )
     dnl The following should not be necessary, but for some reason
     dnl autoheader misses it if we don't include it!
     if test "$ac_cv_func_regcomp_norx" = yes ||
        test "$ac_cv_func_regcomp_rx" = yes; then
       AC_DEFINE(HAVE_REGCOMP)
     fi
   fi
fi

AC_REPLACE_FUNCS(inet_aton putenv strerror memmove mkstemp)

# When testing for the presence of alloca, we need to add alloca.o
# explicitly to LIBOBJS to make sure that it is translated to
# `alloca.lo' for libtool later on.  This can and should be done more cleanly.
AC_FUNC_ALLOCA
if test "$ALLOCA" = "alloca.o"; then LIBOBJS="alloca.o $LIBOBJS"; fi

AC_CHECK_MEMBERS([struct stat.st_rdev])
AC_CHECK_MEMBERS([struct stat.st_blksize])

AC_STRUCT_ST_BLOCKS

AC_CACHE_CHECK([for S_ISLNK in sys/stat.h], ac_cv_macro_S_ISLNK,
  [AC_TRY_CPP([#include <sys/stat.h>
               #ifndef S_ISLNK
               #error no S_ISLNK
               #endif],
               ac_cv_macro_S_ISLNK=yes,
               ac_cv_macro_S_ISLNK=no)])
if test $ac_cv_macro_S_ISLNK = yes; then
  AC_DEFINE(HAVE_S_ISLNK)
fi

AC_STRUCT_TIMEZONE
GUILE_STRUCT_UTIMBUF

#--------------------------------------------------------------------
#
# Which way does the stack grow?
#
#--------------------------------------------------------------------

AC_TRY_RUN(aux (l) unsigned long l;
	     { int x; exit (l >= ((unsigned long)&x)); }
	   main () { int q; aux((unsigned long)&q); },
	   AC_DEFINE(SCM_STACK_GROWS_UP),,AC_MSG_WARN(Guessing that stack grows down -- see scmconfig.h.in))

AC_CACHE_CHECK([whether floats fit in longs], guile_cv_type_float_fits_long,
    [AC_TRY_RUN([main () { exit (sizeof(float) > sizeof(long)); }],
		[guile_cv_type_float_fits_long=yes],
		[guile_cv_type_float_fits_long=no],
		[guile_cv_type_float_fits_long=guess-yes])])
case $guile_cv_type_float_fits_long in
  "yes" )
    AC_DEFINE(SCM_SINGLES)
  ;;
  "guess-yes" )
    AC_DEFINE(SCM_SINGLES)
    AC_MSG_WARN([guessing that sizeof(long) == sizeof(float)])
    AC_MSG_WARN([see SCM_SINGLES in scmconfig.h.in])
  ;;
esac


AC_MSG_CHECKING(for struct linger)
AC_CACHE_VAL(scm_cv_struct_linger,
	AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>],
			[struct linger lgr;  lgr.l_linger = 100],
			scm_cv_struct_linger="yes",
			scm_cv_struct_linger="no"))
AC_MSG_RESULT($scm_cv_struct_linger)
if test $scm_cv_struct_linger = yes; then
	AC_DEFINE(HAVE_STRUCT_LINGER)
fi


AC_MSG_CHECKING(for struct timespec)
AC_CACHE_VAL(scm_cv_struct_timespec,
	AC_TRY_COMPILE([
#include <time.h>],
			[struct timespec t;  t.tv_nsec = 100],
			scm_cv_struct_timespec="yes",
			scm_cv_struct_timespec="no"))
AC_MSG_RESULT($scm_cv_struct_timespec)
if test $scm_cv_struct_timespec = yes; then
	AC_DEFINE(HAVE_STRUCT_TIMESPEC)
fi

#--------------------------------------------------------------------
#
# Flags for thread support
#
#--------------------------------------------------------------------

### What thread package has the user asked for?
AC_ARG_WITH(threads, [  --with-threads          thread interface],
            , with_threads=no)

### Turn $with_threads into either the name of a threads package, like
### `qt', or `no', meaning that threads should not be supported.
AC_MSG_CHECKING(whether to support threads)
case "$with_threads" in
  "yes" | "qt" | "coop" | "")
    with_threads=qt
  ;;
  "no" )
  ;;
  * )
    AC_MSG_ERROR(invalid value for --with-threads: $with_threads)
  ;;
esac
AC_MSG_RESULT($with_threads)

## Make sure the threads package we've chosen is actually supported on
## the present platform.
case "${with_threads}" in
  "qt" )
    ## This configures the QuickThreads package, and sets or clears
    ## the THREAD_PACKAGE variable if qthreads don't configure
    ## correctly.
    QTHREADS_CONFIGURE
   ;;
esac

## If we're using threads, bring in some other parts of Guile which
## work with them.
if test "${THREAD_PACKAGE}" != "" ; then
  AC_DEFINE(USE_THREADS, 1)

  ## Include the Guile thread interface in the library...
  LIBOBJS="$LIBOBJS threads.o"

  ## ... and tell it which package to talk to.
  case "${THREAD_PACKAGE}" in
    "QT" )
      AC_DEFINE(USE_COOP_THREADS, 1)
    ;;
    * )
      AC_MSG_ERROR(invalid value for THREAD_PACKAGE: ${THREAD_PACKAGE})
    ;;
  esac

  ## Bring in scm_internal_select, if appropriate.
  if test $ac_cv_func_gettimeofday = yes &&
     test $ac_cv_func_select = yes; then
    AC_DEFINE(GUILE_ISELECT, 1)
  fi

  ## Workaround for linuxthreads (currently disabled)
  if test $host_os = linux-gnu; then
    AC_DEFINE(GUILE_PTHREAD_COMPAT, 1)
    AC_CHECK_LIB(pthread, main)
  fi
fi
AC_SUBST(LIBGUILEQTHREADS_MAJOR_VERSION)
AC_SUBST(LIBGUILEQTHREADS_MINOR_VERSION)
AC_SUBST(LIBGUILEQTHREADS_REVISION_VERSION)
AC_SUBST(LIBGUILEQTHREADS_VERSION)

## If we're using GCC, ask for aggressive warnings.
case "$GCC" in
  yes )
    ## We had -Wstrict-prototypes in here for a bit, but Guile does too
    ## much stuff with generic function pointers for that to really be
    ## less than exasperating.
    ## -Wpointer-arith was here too, but something changed in gcc/glibc
    ## and it became equally exasperating (gcc 2.95 and/or glibc 2.1.2).
    CFLAGS="$CFLAGS -Wall -Wmissing-prototypes" ;;
esac

AC_PROG_AWK

## If we're creating a shared library (using libtool!), then we'll
## need to generate a list of .lo files corresponding to the .o files
## given in LIBOBJS.  We'll call it LIBLOBJS.
LIBLOBJS="`echo ${LIBOBJS} | sed 's/\.o/.lo/g'`"

## We also need to create corresponding .doc and .x files
EXTRA_DOT_DOC_FILES="`echo ${LIBOBJS} | sed 's/\.o/.doc/g'`"
EXTRA_DOT_X_FILES="`echo ${LIBOBJS} | sed 's/\.o/.x/g'`"

AC_SUBST(GUILE_MAJOR_VERSION)
AC_SUBST(GUILE_MINOR_VERSION)
AC_SUBST(GUILE_MICRO_VERSION)
AC_SUBST(GUILE_VERSION)
AC_SUBST(LIBGUILE_MAJOR_VERSION)
AC_SUBST(LIBGUILE_MINOR_VERSION)
AC_SUBST(LIBGUILE_REVISION_VERSION)
AC_SUBST(LIBGUILE_VERSION)

dnl Tell guile-config what flags guile users should link against.
GUILE_LIBS="$LDFLAGS $THREAD_LIBS_INSTALLED $LIBS"
AC_SUBST(GUILE_LIBS)

AC_SUBST(AWK)
AC_SUBST(LIBLOBJS)
AC_SUBST(EXTRA_DOT_DOC_FILES)
AC_SUBST(EXTRA_DOT_X_FILES)

AC_CONFIG_FILES([
  Makefile
  libguile/Makefile
  libguile/guile-snarf
  libguile/guile-doc-snarf
  libguile/guile-func-name-check
  libguile/guile-snarf-docs
  libguile/guile-snarf-docs-texi
  libguile/versiondat.h
  ice-9/Makefile
  oop/Makefile
  oop/goops/Makefile
  scripts/Makefile
  srfi/Makefile
  qt/Makefile
  qt/qt.h
  qt/md/Makefile
  qt/time/Makefile
  guile-config/Makefile
  doc/Makefile
  examples/Makefile
  examples/scripts/Makefile
  examples/box/Makefile
  examples/box-module/Makefile
  examples/box-dynamic/Makefile
  examples/box-dynamic-module/Makefile
  examples/modules/Makefile
  examples/safe/Makefile
  check-guile
  guile-tools])

AC_CONFIG_COMMANDS(default,
  [ chmod +x libguile/guile-snarf \
             libguile/guile-doc-snarf \
             libguile/guile-func-name-check \
             libguile/guile-snarf-docs \
             libguile/guile-snarf-docs-texi \
             check-guile \
             guile-tools])

AC_OUTPUT

dnl Local Variables:
dnl comment-start: "dnl "
dnl comment-end: ""
dnl comment-start-skip: "\\bdnl\\b\\s *"
dnl End:
