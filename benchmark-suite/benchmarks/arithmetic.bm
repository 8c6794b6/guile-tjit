;;; -*- mode: scheme; coding: utf-8; -*-
;;; Integer arithmetic.
;;;
;;; Copyright 2010 Free Software Foundation, Inc.
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU Lesser General Public License
;;; as published by the Free Software Foundation; either version 3, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this software; see the file COPYING.LESSER.  If
;;; not, write to the Free Software Foundation, Inc., 51 Franklin
;;; Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (benchmarks arithmetic)
  #:use-module (benchmark-suite lib))

(define-syntax repeat
  (lambda (s)
    ;; Construct an expression of the form `(OP (OP (OP BODY)))', with a
    ;; depth of COUNT.
    (syntax-case s ()
      ((_ op body count)
       (number? (syntax->datum #'count))
       (let loop ((count  (syntax->datum #'count))
                  (result #'body))
         (if (= 0 count)
             result
             (loop (1- count)
                   (with-syntax ((result result))
                     #'(op result)))))))))


(with-benchmark-prefix "fixnum"

  (benchmark "1+" 1e7
    (repeat 1+ 2 100))

  (benchmark "1-" 1e7
    (repeat 1- 2 100)))
